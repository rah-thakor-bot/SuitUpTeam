--------------------------------------------------------
--  File created - Thursday-July-23-2015   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence DEPARTMENTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."DEPARTMENTS_SEQ"  MINVALUE 1 MAXVALUE 9990 INCREMENT BY 10 START WITH 280 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence EMPLOYEES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."EMPLOYEES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 207 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence LOCATIONS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."LOCATIONS_SEQ"  MINVALUE 1 MAXVALUE 9900 INCREMENT BY 100 START WITH 3300 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ENTITY_ID
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."SEQ_ENTITY_ID"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table BATCH_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."BATCH_MAS" 
   (	"BRANCH" VARCHAR2(20 BYTE), 
	"BATCH_ID" NUMBER, 
	"BATCH_NAME" VARCHAR2(50 BYTE), 
	"REF_SUB_ID" NUMBER, 
	"REF_T_ENTITY_ID" NUMBER, 
	"FR_TIME" NUMBER, 
	"TO_TIME" NUMBER, 
	"ENT_DATE" DATE, 
	"ENT_TERM" VARCHAR2(20 BYTE), 
	"ENT_USER" VARCHAR2(20 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(20 BYTE), 
	"UPD_TERM" VARCHAR2(20 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BRANCH_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."BRANCH_MAS" 
   (	"BRANCH_ID" VARCHAR2(30 BYTE), 
	"BRANCH_NAME" VARCHAR2(100 BYTE), 
	"BRANCH_ADR" VARCHAR2(200 BYTE), 
	"REMARK" VARCHAR2(200 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 1048576 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CHP_DET
--------------------------------------------------------

  CREATE TABLE "HR"."CHP_DET" 
   (	"SEQNO" NUMBER(5,0), 
	"REF_SUB_ID" NUMBER, 
	"CHP_ID" NUMBER, 
	"CHP_NAME" VARCHAR2(50 BYTE), 
	"DESCRIPTION" VARCHAR2(100 BYTE), 
	"REMARK" VARCHAR2(100 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(20 BYTE), 
	"ENT_TERM" VARCHAR2(20 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(20 BYTE), 
	"UPD_TERM" VARCHAR2(20 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table COUNTRIES
--------------------------------------------------------

  CREATE TABLE "HR"."COUNTRIES" 
   (	"COUNTRY_ID" CHAR(2 BYTE), 
	"COUNTRY_NAME" VARCHAR2(40 BYTE), 
	"REGION_ID" NUMBER, 
	 CONSTRAINT "COUNTRY_C_ID_PK" PRIMARY KEY ("COUNTRY_ID") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" 
 PCTTHRESHOLD 50;
 

   COMMENT ON COLUMN "HR"."COUNTRIES"."COUNTRY_ID" IS 'Primary key of countries table.';
 
   COMMENT ON COLUMN "HR"."COUNTRIES"."COUNTRY_NAME" IS 'Country name';
 
   COMMENT ON COLUMN "HR"."COUNTRIES"."REGION_ID" IS 'Region ID for the country. Foreign key to region_id column in the departments table.';
 
   COMMENT ON TABLE "HR"."COUNTRIES"  IS 'country table. Contains 25 rows. References with locations table.';
--------------------------------------------------------
--  DDL for Table DEPARTMENTS
--------------------------------------------------------

  CREATE TABLE "HR"."DEPARTMENTS" 
   (	"DEPARTMENT_ID" NUMBER(4,0), 
	"DEPARTMENT_NAME" VARCHAR2(30 BYTE), 
	"MANAGER_ID" NUMBER(6,0), 
	"LOCATION_ID" NUMBER(4,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
 

   COMMENT ON COLUMN "HR"."DEPARTMENTS"."DEPARTMENT_ID" IS 'Primary key column of departments table.';
 
   COMMENT ON COLUMN "HR"."DEPARTMENTS"."DEPARTMENT_NAME" IS 'A not null column that shows name of a department. Administration,
Marketing, Purchasing, Human Resources, Shipping, IT, Executive, Public
Relations, Sales, Finance, and Accounting. ';
 
   COMMENT ON COLUMN "HR"."DEPARTMENTS"."MANAGER_ID" IS 'Manager_id of a department. Foreign key to employee_id column of employees table. The manager_id column of the employee table references this column.';
 
   COMMENT ON COLUMN "HR"."DEPARTMENTS"."LOCATION_ID" IS 'Location id where a department is located. Foreign key to location_id column of locations table.';
 
   COMMENT ON TABLE "HR"."DEPARTMENTS"  IS 'Departments table that shows details of departments where employees
work. Contains 27 rows; references with locations, employees, and job_history tables.';
--------------------------------------------------------
--  DDL for Table EMPLOYEES
--------------------------------------------------------

  CREATE TABLE "HR"."EMPLOYEES" 
   (	"EMPLOYEE_ID" NUMBER(6,0), 
	"FIRST_NAME" VARCHAR2(20 BYTE), 
	"LAST_NAME" VARCHAR2(25 BYTE), 
	"EMAIL" VARCHAR2(25 BYTE), 
	"PHONE_NUMBER" VARCHAR2(20 BYTE), 
	"HIRE_DATE" DATE, 
	"JOB_ID" VARCHAR2(10 BYTE), 
	"SALARY" NUMBER(8,2), 
	"COMMISSION_PCT" NUMBER(2,2), 
	"MANAGER_ID" NUMBER(6,0), 
	"DEPARTMENT_ID" NUMBER(4,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
 

   COMMENT ON COLUMN "HR"."EMPLOYEES"."EMPLOYEE_ID" IS 'Primary key of employees table.';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."FIRST_NAME" IS 'First name of the employee. A not null column.';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."LAST_NAME" IS 'Last name of the employee. A not null column.';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."EMAIL" IS 'Email id of the employee';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."PHONE_NUMBER" IS 'Phone number of the employee; includes country code and area code';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."HIRE_DATE" IS 'Date when the employee started on this job. A not null column.';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."JOB_ID" IS 'Current job of the employee; foreign key to job_id column of the
jobs table. A not null column.';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."SALARY" IS 'Monthly salary of the employee. Must be greater
than zero (enforced by constraint emp_salary_min)';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."COMMISSION_PCT" IS 'Commission percentage of the employee; Only employees in sales
department elgible for commission percentage';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."MANAGER_ID" IS 'Manager id of the employee; has same domain as manager_id in
departments table. Foreign key to employee_id column of employees table.
(useful for reflexive joins and CONNECT BY query)';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."DEPARTMENT_ID" IS 'Department id where employee works; foreign key to department_id
column of the departments table';
 
   COMMENT ON TABLE "HR"."EMPLOYEES"  IS 'employees table. Contains 107 rows. References with departments,
jobs, job_history tables. Contains a self reference.';
--------------------------------------------------------
--  DDL for Table EMP_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."EMP_MAS" 
   (	"BRANCH" VARCHAR2(20 BYTE), 
	"ENTITY_ID" NUMBER(4,0), 
	"GR_NO" NUMBER(4,0), 
	"F_NAME" VARCHAR2(20 BYTE), 
	"M_NAME" VARCHAR2(20 BYTE), 
	"L_NAME" VARCHAR2(20 BYTE), 
	"DOB" DATE, 
	"DOJ" DATE, 
	"LEAVE_DATE" DATE, 
	"SEX" VARCHAR2(1 BYTE), 
	"BLOOD_GRP" VARCHAR2(10 BYTE), 
	"PHONE1" NUMBER(10,0), 
	"PHONE2" NUMBER(10,0), 
	"PHOTO" CLOB, 
	"ADD1" VARCHAR2(100 BYTE), 
	"ADD2" VARCHAR2(100 BYTE), 
	"CITY" VARCHAR2(20 BYTE), 
	"STATE" VARCHAR2(20 BYTE), 
	"PINCODE" NUMBER(10,0), 
	"EMAIL_ID" VARCHAR2(50 BYTE), 
	"ENT_DATE" VARCHAR2(30 BYTE), 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("PHOTO") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
 

   COMMENT ON COLUMN "HR"."EMP_MAS"."GR_NO" IS 'GENRAL NUMBER';
--------------------------------------------------------
--  DDL for Table ENTITY_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."ENTITY_MAS" 
   (	"ENTITY_ID" NUMBER, 
	"ENTITY_TYPE_ID" NUMBER, 
	"ENTITY_NAME" VARCHAR2(50 BYTE), 
	"IS_ACTIVE" VARCHAR2(1 BYTE), 
	"ENT_DATE" VARCHAR2(30 BYTE), 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ENTITY_TYPE_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."ENTITY_TYPE_MAS" 
   (	"ENTITY_TYPE_ID" NUMBER, 
	"ENTITY_TYPE_NAME" VARCHAR2(30 BYTE), 
	"IS_ACTIVE" VARCHAR2(1 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FLG_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."FLG_MAS" 
   (	"FLG_ID" NUMBER, 
	"FLG_SH_NAME" VARCHAR2(20 BYTE), 
	"FLG_NAME" VARCHAR2(20 BYTE), 
	"REMARK" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table GRID_FIEDLS
--------------------------------------------------------

  CREATE TABLE "HR"."GRID_FIEDLS" 
   (	"MENU_NAME" VARCHAR2(50 BYTE), 
	"CTRL_NAME" VARCHAR2(30 BYTE), 
	"DATA_FIELD_NAME" VARCHAR2(30 BYTE), 
	"FIELD_SIZE" NUMBER(3,0) DEFAULT 40, 
	"DISP_NAME" VARCHAR2(50 BYTE), 
	"COL_TYPE" VARCHAR2(75 BYTE), 
	"COMBO_FLG" VARCHAR2(20 BYTE), 
	"COMBO_BIND_ID" VARCHAR2(20 BYTE), 
	"EXCEL_FIELD_NAME" VARCHAR2(20 BYTE), 
	"REMARK" VARCHAR2(50 BYTE), 
	"EXTRA_REMARK" VARCHAR2(50 BYTE), 
	"ORD" NUMBER(4,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table JOBS
--------------------------------------------------------

  CREATE TABLE "HR"."JOBS" 
   (	"JOB_ID" VARCHAR2(10 BYTE), 
	"JOB_TITLE" VARCHAR2(35 BYTE), 
	"MIN_SALARY" NUMBER(6,0), 
	"MAX_SALARY" NUMBER(6,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
 

   COMMENT ON COLUMN "HR"."JOBS"."JOB_ID" IS 'Primary key of jobs table.';
 
   COMMENT ON COLUMN "HR"."JOBS"."JOB_TITLE" IS 'A not null column that shows job title, e.g. AD_VP, FI_ACCOUNTANT';
 
   COMMENT ON COLUMN "HR"."JOBS"."MIN_SALARY" IS 'Minimum salary for a job title.';
 
   COMMENT ON COLUMN "HR"."JOBS"."MAX_SALARY" IS 'Maximum salary for a job title';
 
   COMMENT ON TABLE "HR"."JOBS"  IS 'jobs table with job titles and salary ranges. Contains 19 rows.
References with employees and job_history table.';
--------------------------------------------------------
--  DDL for Table JOB_HISTORY
--------------------------------------------------------

  CREATE TABLE "HR"."JOB_HISTORY" 
   (	"EMPLOYEE_ID" NUMBER(6,0), 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"JOB_ID" VARCHAR2(10 BYTE), 
	"DEPARTMENT_ID" NUMBER(4,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
 

   COMMENT ON COLUMN "HR"."JOB_HISTORY"."EMPLOYEE_ID" IS 'A not null column in the complex primary key employee_id+start_date.
Foreign key to employee_id column of the employee table';
 
   COMMENT ON COLUMN "HR"."JOB_HISTORY"."START_DATE" IS 'A not null column in the complex primary key employee_id+start_date.
Must be less than the end_date of the job_history table. (enforced by
constraint jhist_date_interval)';
 
   COMMENT ON COLUMN "HR"."JOB_HISTORY"."END_DATE" IS 'Last day of the employee in this job role. A not null column. Must be
greater than the start_date of the job_history table.
(enforced by constraint jhist_date_interval)';
 
   COMMENT ON COLUMN "HR"."JOB_HISTORY"."JOB_ID" IS 'Job role in which the employee worked in the past; foreign key to
job_id column in the jobs table. A not null column.';
 
   COMMENT ON COLUMN "HR"."JOB_HISTORY"."DEPARTMENT_ID" IS 'Department id in which the employee worked in the past; foreign key to deparment_id column in the departments table';
 
   COMMENT ON TABLE "HR"."JOB_HISTORY"  IS 'Table that stores job history of the employees. If an employee
changes departments within the job or changes jobs within the department,
new rows get inserted into this table with old job information of the
employee. Contains a complex primary key: employee_id+start_date.
Contains 25 rows. References with jobs, employees, and departments tables.';
--------------------------------------------------------
--  DDL for Table LOCATIONS
--------------------------------------------------------

  CREATE TABLE "HR"."LOCATIONS" 
   (	"LOCATION_ID" NUMBER(4,0), 
	"STREET_ADDRESS" VARCHAR2(40 BYTE), 
	"POSTAL_CODE" VARCHAR2(12 BYTE), 
	"CITY" VARCHAR2(30 BYTE), 
	"STATE_PROVINCE" VARCHAR2(25 BYTE), 
	"COUNTRY_ID" CHAR(2 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
 

   COMMENT ON COLUMN "HR"."LOCATIONS"."LOCATION_ID" IS 'Primary key of locations table';
 
   COMMENT ON COLUMN "HR"."LOCATIONS"."STREET_ADDRESS" IS 'Street address of an office, warehouse, or production site of a company.
Contains building number and street name';
 
   COMMENT ON COLUMN "HR"."LOCATIONS"."POSTAL_CODE" IS 'Postal code of the location of an office, warehouse, or production site
of a company. ';
 
   COMMENT ON COLUMN "HR"."LOCATIONS"."CITY" IS 'A not null column that shows city where an office, warehouse, or
production site of a company is located. ';
 
   COMMENT ON COLUMN "HR"."LOCATIONS"."STATE_PROVINCE" IS 'State or Province where an office, warehouse, or production site of a
company is located.';
 
   COMMENT ON COLUMN "HR"."LOCATIONS"."COUNTRY_ID" IS 'Country where an office, warehouse, or production site of a company is
located. Foreign key to country_id column of the countries table.';
 
   COMMENT ON TABLE "HR"."LOCATIONS"  IS 'Locations table that contains specific address of a specific office,
warehouse, and/or production site of a company. Does not store addresses /
locations of customers. Contains 23 rows; references with the
departments and countries tables. ';
--------------------------------------------------------
--  DDL for Table REGIONS
--------------------------------------------------------

  CREATE TABLE "HR"."REGIONS" 
   (	"REGION_ID" NUMBER, 
	"REGION_NAME" VARCHAR2(25 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Table SCHL_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."SCHL_MAS" 
   (	"SCHL_ID" NUMBER, 
	"SCHL_NAME" VARCHAR2(50 BYTE), 
	"ADR" VARCHAR2(50 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table STUDY_LEVEL_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."STUDY_LEVEL_MAS" 
   (	"BRANCH" VARCHAR2(30 BYTE), 
	"STD_ID" NUMBER, 
	"STD_LEVEL" NUMBER, 
	"STD_TYPE" VARCHAR2(6 BYTE), 
	"STD_NAME" VARCHAR2(40 BYTE), 
	"IS_ACTIVE" VARCHAR2(1 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6), 
	"STD_MEDIUM" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "HR"."STUDY_LEVEL_MAS"."STD_TYPE" IS 'GBSE\CBSE\ICSE';
--------------------------------------------------------
--  DDL for Table STUD_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."STUD_MAS" 
   (	"STUD_ID" NUMBER, 
	"S_ENTITY_ID" NUMBER, 
	"S_FNAME" VARCHAR2(30 BYTE), 
	"S_MNAME" VARCHAR2(30 BYTE), 
	"S_LNAME" VARCHAR2(30 BYTE), 
	"DOB" DATE, 
	"PHOTO" CLOB, 
	"PH1" NUMBER, 
	"PH2" NUMBER, 
	"SCHL_ID" NUMBER, 
	"PER" NUMBER, 
	"DOJ" DATE, 
	"BLD_GRP" VARCHAR2(10 BYTE), 
	"SEX" VARCHAR2(1 BYTE), 
	"REMARK" VARCHAR2(150 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "USERS" 
 LOB ("PHOTO") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING ) ;
--------------------------------------------------------
--  DDL for Table SUB_ALLOCATION
--------------------------------------------------------

  CREATE TABLE "HR"."SUB_ALLOCATION" 
   (	"BRANCH" VARCHAR2(10 BYTE), 
	"BATCH_ID" NUMBER, 
	"ENTITY_ID" NUMBER, 
	"ENTITY_TYPE_ID" NUMBER, 
	"REF_SUB_ID" NUMBER, 
	"IS_ACTIVE" VARCHAR2(1 BYTE) DEFAULT 'N', 
	"REMARK" VARCHAR2(50 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_TERM" VARCHAR2(20 BYTE), 
	"ENT_USER" VARCHAR2(20 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(20 BYTE), 
	"UPD_TERM" VARCHAR2(20 BYTE), 
	"TIME_STAMP" TIMESTAMP (6), 
	"ALLOCATION_ID" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SUB_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."SUB_MAS" 
   (	"BRANCH" VARCHAR2(20 BYTE), 
	"REF_STD_ID" NUMBER, 
	"SUB_ID" NUMBER, 
	"SUB_NAME" VARCHAR2(50 BYTE), 
	"HAVE_EXAM" VARCHAR2(1 BYTE), 
	"IS_ACTIVE" VARCHAR2(1 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_TERM" VARCHAR2(20 BYTE), 
	"ENT_USER" VARCHAR2(20 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(20 BYTE), 
	"UPD_TERM" VARCHAR2(20 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TEACHER_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."TEACHER_MAS" 
   (	"TEACHER_ID" NUMBER, 
	"T_ENTITY_ID" NUMBER, 
	"T_FNAME" VARCHAR2(30 BYTE), 
	"T_MNAME" VARCHAR2(30 BYTE), 
	"T_LNAME" VARCHAR2(30 BYTE), 
	"SCHL_ID" NUMBER, 
	"EXPE" NUMBER, 
	"PH1" NUMBER, 
	"PH2" NUMBER, 
	"ADR" VARCHAR2(100 BYTE), 
	"REMARK" VARCHAR2(100 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View EMP_DETAILS_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "HR"."EMP_DETAILS_VIEW" ("EMPLOYEE_ID", "JOB_ID", "MANAGER_ID", "DEPARTMENT_ID", "LOCATION_ID", "COUNTRY_ID", "FIRST_NAME", "LAST_NAME", "SALARY", "COMMISSION_PCT", "DEPARTMENT_NAME", "JOB_TITLE", "CITY", "STATE_PROVINCE", "COUNTRY_NAME", "REGION_NAME") AS 
  SELECT
  e.employee_id,
  e.job_id,
  e.manager_id,
  e.department_id,
  d.location_id,
  l.country_id,
  e.first_name,
  e.last_name,
  e.salary,
  e.commission_pct,
  d.department_name,
  j.job_title,
  l.city,
  l.state_province,
  c.country_name,
  r.region_name
FROM
  employees e,
  departments d,
  jobs j,
  locations l,
  countries c,
  regions r
WHERE e.department_id = d.department_id
  AND d.location_id = l.location_id
  AND l.country_id = c.country_id
  AND c.region_id = r.region_id
  AND j.job_id = e.job_id
WITH READ ONLY;
REM INSERTING into HR.BATCH_MAS
SET DEFINE OFF;
REM INSERTING into HR.BRANCH_MAS
SET DEFINE OFF;
Insert into HR.BRANCH_MAS (BRANCH_ID,BRANCH_NAME,BRANCH_ADR,REMARK,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('T001','UDHNA','VIVEK CLASSES',null,to_date('05-07-15','DD-MM-RR'),'RLT','RAHUL-PC',null,null,null,to_timestamp('05-07-15 07:19:36.071000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
REM INSERTING into HR.CHP_DET
SET DEFINE OFF;
REM INSERTING into HR.COUNTRIES
SET DEFINE OFF;
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('AR','Argentina',2);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('AU','Australia',3);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('BE','Belgium',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('BR','Brazil',2);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('CA','Canada',2);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('CH','Switzerland',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('CN','China',3);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('DE','Germany',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('DK','Denmark',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('EG','Egypt',4);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('FR','France',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('IL','Israel',4);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('IN','India',3);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('IT','Italy',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('JP','Japan',3);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('KW','Kuwait',4);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('ML','Malaysia',3);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('MX','Mexico',2);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('NG','Nigeria',4);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('NL','Netherlands',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('SG','Singapore',3);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('UK','United Kingdom',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('US','United States of America',2);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('ZM','Zambia',4);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('ZW','Zimbabwe',4);
REM INSERTING into HR.DEPARTMENTS
SET DEFINE OFF;
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (10,'Administration',200,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (20,'Marketing',201,1800);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (30,'Purchasing',114,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (40,'Human Resources',203,2400);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (50,'Shipping',121,1500);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (60,'IT',103,1400);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (70,'Public Relations',204,2700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (80,'Sales',145,2500);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (90,'Executive',100,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (100,'Finance',108,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (110,'Accounting',205,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (120,'Treasury',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (130,'Corporate Tax',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (140,'Control And Credit',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (150,'Shareholder Services',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (160,'Benefits',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (170,'Manufacturing',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (180,'Construction',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (190,'Contracting',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (200,'Operations',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (210,'IT Support',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (220,'NOC',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (230,'IT Helpdesk',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (240,'Government Sales',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (250,'Retail Sales',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (260,'Recruiting',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (270,'Payroll',null,1700);
REM INSERTING into HR.EMPLOYEES
SET DEFINE OFF;
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (100,'Steven','King','SKING','515.123.4567',to_date('17-06-03','DD-MM-RR'),'AD_PRES',24000,null,null,90);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (101,'Neena','Kochhar','NKOCHHAR','515.123.4568',to_date('21-09-05','DD-MM-RR'),'AD_VP',17000,null,100,90);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (102,'Lex','De Haan','LDEHAAN','515.123.4569',to_date('13-01-01','DD-MM-RR'),'AD_VP',17000,null,100,90);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (103,'Alexander','Hunold','AHUNOLD','590.423.4567',to_date('03-01-06','DD-MM-RR'),'IT_PROG',9000,null,102,60);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (104,'Bruce','Ernst','BERNST','590.423.4568',to_date('21-05-07','DD-MM-RR'),'IT_PROG',6000,null,103,60);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (105,'David','Austin','DAUSTIN','590.423.4569',to_date('25-06-05','DD-MM-RR'),'IT_PROG',4800,null,103,60);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (106,'Valli','Pataballa','VPATABAL','590.423.4560',to_date('05-02-06','DD-MM-RR'),'IT_PROG',4800,null,103,60);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (107,'Diana','Lorentz','DLORENTZ','590.423.5567',to_date('07-02-07','DD-MM-RR'),'IT_PROG',4200,null,103,60);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (108,'Nancy','Greenberg','NGREENBE','515.124.4569',to_date('17-08-02','DD-MM-RR'),'FI_MGR',12008,null,101,100);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (109,'Daniel','Faviet','DFAVIET','515.124.4169',to_date('16-08-02','DD-MM-RR'),'FI_ACCOUNT',9000,null,108,100);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (110,'John','Chen','JCHEN','515.124.4269',to_date('28-09-05','DD-MM-RR'),'FI_ACCOUNT',8200,null,108,100);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (111,'Ismael','Sciarra','ISCIARRA','515.124.4369',to_date('30-09-05','DD-MM-RR'),'FI_ACCOUNT',7700,null,108,100);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (112,'Jose Manuel','Urman','JMURMAN','515.124.4469',to_date('07-03-06','DD-MM-RR'),'FI_ACCOUNT',7800,null,108,100);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (113,'Luis','Popp','LPOPP','515.124.4567',to_date('07-12-07','DD-MM-RR'),'FI_ACCOUNT',6900,null,108,100);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (114,'Den','Raphaely','DRAPHEAL','515.127.4561',to_date('07-12-02','DD-MM-RR'),'PU_MAN',11000,null,100,30);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (115,'Alexander','Khoo','AKHOO','515.127.4562',to_date('18-05-03','DD-MM-RR'),'PU_CLERK',3100,null,114,30);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (116,'Shelli','Baida','SBAIDA','515.127.4563',to_date('24-12-05','DD-MM-RR'),'PU_CLERK',2900,null,114,30);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (117,'Sigal','Tobias','STOBIAS','515.127.4564',to_date('24-07-05','DD-MM-RR'),'PU_CLERK',2800,null,114,30);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (118,'Guy','Himuro','GHIMURO','515.127.4565',to_date('15-11-06','DD-MM-RR'),'PU_CLERK',2600,null,114,30);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (119,'Karen','Colmenares','KCOLMENA','515.127.4566',to_date('10-08-07','DD-MM-RR'),'PU_CLERK',2500,null,114,30);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (120,'Matthew','Weiss','MWEISS','650.123.1234',to_date('18-07-04','DD-MM-RR'),'ST_MAN',8000,null,100,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (121,'Adam','Fripp','AFRIPP','650.123.2234',to_date('10-04-05','DD-MM-RR'),'ST_MAN',8200,null,100,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (122,'Payam','Kaufling','PKAUFLIN','650.123.3234',to_date('01-05-03','DD-MM-RR'),'ST_MAN',7900,null,100,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (123,'Shanta','Vollman','SVOLLMAN','650.123.4234',to_date('10-10-05','DD-MM-RR'),'ST_MAN',6500,null,100,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (124,'Kevin','Mourgos','KMOURGOS','650.123.5234',to_date('16-11-07','DD-MM-RR'),'ST_MAN',5800,null,100,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (125,'Julia','Nayer','JNAYER','650.124.1214',to_date('16-07-05','DD-MM-RR'),'ST_CLERK',3200,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (126,'Irene','Mikkilineni','IMIKKILI','650.124.1224',to_date('28-09-06','DD-MM-RR'),'ST_CLERK',2700,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (127,'James','Landry','JLANDRY','650.124.1334',to_date('14-01-07','DD-MM-RR'),'ST_CLERK',2400,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (128,'Steven','Markle','SMARKLE','650.124.1434',to_date('08-03-08','DD-MM-RR'),'ST_CLERK',2200,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (129,'Laura','Bissot','LBISSOT','650.124.5234',to_date('20-08-05','DD-MM-RR'),'ST_CLERK',3300,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (130,'Mozhe','Atkinson','MATKINSO','650.124.6234',to_date('30-10-05','DD-MM-RR'),'ST_CLERK',2800,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (131,'James','Marlow','JAMRLOW','650.124.7234',to_date('16-02-05','DD-MM-RR'),'ST_CLERK',2500,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (132,'TJ','Olson','TJOLSON','650.124.8234',to_date('10-04-07','DD-MM-RR'),'ST_CLERK',2100,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (133,'Jason','Mallin','JMALLIN','650.127.1934',to_date('14-06-04','DD-MM-RR'),'ST_CLERK',3300,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (134,'Michael','Rogers','MROGERS','650.127.1834',to_date('26-08-06','DD-MM-RR'),'ST_CLERK',2900,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (135,'Ki','Gee','KGEE','650.127.1734',to_date('12-12-07','DD-MM-RR'),'ST_CLERK',2400,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (136,'Hazel','Philtanker','HPHILTAN','650.127.1634',to_date('06-02-08','DD-MM-RR'),'ST_CLERK',2200,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (137,'Renske','Ladwig','RLADWIG','650.121.1234',to_date('14-07-03','DD-MM-RR'),'ST_CLERK',3600,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (138,'Stephen','Stiles','SSTILES','650.121.2034',to_date('26-10-05','DD-MM-RR'),'ST_CLERK',3200,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (139,'John','Seo','JSEO','650.121.2019',to_date('12-02-06','DD-MM-RR'),'ST_CLERK',2700,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (140,'Joshua','Patel','JPATEL','650.121.1834',to_date('06-04-06','DD-MM-RR'),'ST_CLERK',2500,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (141,'Trenna','Rajs','TRAJS','650.121.8009',to_date('17-10-03','DD-MM-RR'),'ST_CLERK',3500,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (142,'Curtis','Davies','CDAVIES','650.121.2994',to_date('29-01-05','DD-MM-RR'),'ST_CLERK',3100,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (143,'Randall','Matos','RMATOS','650.121.2874',to_date('15-03-06','DD-MM-RR'),'ST_CLERK',2600,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (144,'Peter','Vargas','PVARGAS','650.121.2004',to_date('09-07-06','DD-MM-RR'),'ST_CLERK',2500,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (145,'John','Russell','JRUSSEL','011.44.1344.429268',to_date('01-10-04','DD-MM-RR'),'SA_MAN',14000,0.4,100,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (146,'Karen','Partners','KPARTNER','011.44.1344.467268',to_date('05-01-05','DD-MM-RR'),'SA_MAN',13500,0.3,100,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (147,'Alberto','Errazuriz','AERRAZUR','011.44.1344.429278',to_date('10-03-05','DD-MM-RR'),'SA_MAN',12000,0.3,100,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (148,'Gerald','Cambrault','GCAMBRAU','011.44.1344.619268',to_date('15-10-07','DD-MM-RR'),'SA_MAN',11000,0.3,100,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (149,'Eleni','Zlotkey','EZLOTKEY','011.44.1344.429018',to_date('29-01-08','DD-MM-RR'),'SA_MAN',10500,0.2,100,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (150,'Peter','Tucker','PTUCKER','011.44.1344.129268',to_date('30-01-05','DD-MM-RR'),'SA_REP',10000,0.3,145,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (151,'David','Bernstein','DBERNSTE','011.44.1344.345268',to_date('24-03-05','DD-MM-RR'),'SA_REP',9500,0.25,145,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (152,'Peter','Hall','PHALL','011.44.1344.478968',to_date('20-08-05','DD-MM-RR'),'SA_REP',9000,0.25,145,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (153,'Christopher','Olsen','COLSEN','011.44.1344.498718',to_date('30-03-06','DD-MM-RR'),'SA_REP',8000,0.2,145,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (154,'Nanette','Cambrault','NCAMBRAU','011.44.1344.987668',to_date('09-12-06','DD-MM-RR'),'SA_REP',7500,0.2,145,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (155,'Oliver','Tuvault','OTUVAULT','011.44.1344.486508',to_date('23-11-07','DD-MM-RR'),'SA_REP',7000,0.15,145,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (156,'Janette','King','JKING','011.44.1345.429268',to_date('30-01-04','DD-MM-RR'),'SA_REP',10000,0.35,146,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (157,'Patrick','Sully','PSULLY','011.44.1345.929268',to_date('04-03-04','DD-MM-RR'),'SA_REP',9500,0.35,146,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (158,'Allan','McEwen','AMCEWEN','011.44.1345.829268',to_date('01-08-04','DD-MM-RR'),'SA_REP',9000,0.35,146,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (159,'Lindsey','Smith','LSMITH','011.44.1345.729268',to_date('10-03-05','DD-MM-RR'),'SA_REP',8000,0.3,146,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (160,'Louise','Doran','LDORAN','011.44.1345.629268',to_date('15-12-05','DD-MM-RR'),'SA_REP',7500,0.3,146,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (161,'Sarath','Sewall','SSEWALL','011.44.1345.529268',to_date('03-11-06','DD-MM-RR'),'SA_REP',7000,0.25,146,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (162,'Clara','Vishney','CVISHNEY','011.44.1346.129268',to_date('11-11-05','DD-MM-RR'),'SA_REP',10500,0.25,147,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (163,'Danielle','Greene','DGREENE','011.44.1346.229268',to_date('19-03-07','DD-MM-RR'),'SA_REP',9500,0.15,147,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (164,'Mattea','Marvins','MMARVINS','011.44.1346.329268',to_date('24-01-08','DD-MM-RR'),'SA_REP',7200,0.1,147,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (165,'David','Lee','DLEE','011.44.1346.529268',to_date('23-02-08','DD-MM-RR'),'SA_REP',6800,0.1,147,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (166,'Sundar','Ande','SANDE','011.44.1346.629268',to_date('24-03-08','DD-MM-RR'),'SA_REP',6400,0.1,147,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (167,'Amit','Banda','ABANDA','011.44.1346.729268',to_date('21-04-08','DD-MM-RR'),'SA_REP',6200,0.1,147,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (168,'Lisa','Ozer','LOZER','011.44.1343.929268',to_date('11-03-05','DD-MM-RR'),'SA_REP',11500,0.25,148,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (169,'Harrison','Bloom','HBLOOM','011.44.1343.829268',to_date('23-03-06','DD-MM-RR'),'SA_REP',10000,0.2,148,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (170,'Tayler','Fox','TFOX','011.44.1343.729268',to_date('24-01-06','DD-MM-RR'),'SA_REP',9600,0.2,148,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (171,'William','Smith','WSMITH','011.44.1343.629268',to_date('23-02-07','DD-MM-RR'),'SA_REP',7400,0.15,148,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (172,'Elizabeth','Bates','EBATES','011.44.1343.529268',to_date('24-03-07','DD-MM-RR'),'SA_REP',7300,0.15,148,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (173,'Sundita','Kumar','SKUMAR','011.44.1343.329268',to_date('21-04-08','DD-MM-RR'),'SA_REP',6100,0.1,148,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (174,'Ellen','Abel','EABEL','011.44.1644.429267',to_date('11-05-04','DD-MM-RR'),'SA_REP',11000,0.3,149,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (175,'Alyssa','Hutton','AHUTTON','011.44.1644.429266',to_date('19-03-05','DD-MM-RR'),'SA_REP',8800,0.25,149,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (176,'Jonathon','Taylor','JTAYLOR','011.44.1644.429265',to_date('24-03-06','DD-MM-RR'),'SA_REP',8600,0.2,149,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (177,'Jack','Livingston','JLIVINGS','011.44.1644.429264',to_date('23-04-06','DD-MM-RR'),'SA_REP',8400,0.2,149,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (178,'Kimberely','Grant','KGRANT','011.44.1644.429263',to_date('24-05-07','DD-MM-RR'),'SA_REP',7000,0.15,149,null);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (179,'Charles','Johnson','CJOHNSON','011.44.1644.429262',to_date('04-01-08','DD-MM-RR'),'SA_REP',6200,0.1,149,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (180,'Winston','Taylor','WTAYLOR','650.507.9876',to_date('24-01-06','DD-MM-RR'),'SH_CLERK',3200,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (181,'Jean','Fleaur','JFLEAUR','650.507.9877',to_date('23-02-06','DD-MM-RR'),'SH_CLERK',3100,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (182,'Martha','Sullivan','MSULLIVA','650.507.9878',to_date('21-06-07','DD-MM-RR'),'SH_CLERK',2500,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (183,'Girard','Geoni','GGEONI','650.507.9879',to_date('03-02-08','DD-MM-RR'),'SH_CLERK',2800,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (184,'Nandita','Sarchand','NSARCHAN','650.509.1876',to_date('27-01-04','DD-MM-RR'),'SH_CLERK',4200,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (185,'Alexis','Bull','ABULL','650.509.2876',to_date('20-02-05','DD-MM-RR'),'SH_CLERK',4100,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (186,'Julia','Dellinger','JDELLING','650.509.3876',to_date('24-06-06','DD-MM-RR'),'SH_CLERK',3400,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (187,'Anthony','Cabrio','ACABRIO','650.509.4876',to_date('07-02-07','DD-MM-RR'),'SH_CLERK',3000,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (188,'Kelly','Chung','KCHUNG','650.505.1876',to_date('14-06-05','DD-MM-RR'),'SH_CLERK',3800,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (189,'Jennifer','Dilly','JDILLY','650.505.2876',to_date('13-08-05','DD-MM-RR'),'SH_CLERK',3600,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (190,'Timothy','Gates','TGATES','650.505.3876',to_date('11-07-06','DD-MM-RR'),'SH_CLERK',2900,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (191,'Randall','Perkins','RPERKINS','650.505.4876',to_date('19-12-07','DD-MM-RR'),'SH_CLERK',2500,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (192,'Sarah','Bell','SBELL','650.501.1876',to_date('04-02-04','DD-MM-RR'),'SH_CLERK',4000,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (193,'Britney','Everett','BEVERETT','650.501.2876',to_date('03-03-05','DD-MM-RR'),'SH_CLERK',3900,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (194,'Samuel','McCain','SMCCAIN','650.501.3876',to_date('01-07-06','DD-MM-RR'),'SH_CLERK',3200,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (195,'Vance','Jones','VJONES','650.501.4876',to_date('17-03-07','DD-MM-RR'),'SH_CLERK',2800,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (196,'Alana','Walsh','AWALSH','650.507.9811',to_date('24-04-06','DD-MM-RR'),'SH_CLERK',3100,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (197,'Kevin','Feeney','KFEENEY','650.507.9822',to_date('23-05-06','DD-MM-RR'),'SH_CLERK',3000,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (198,'Donald','OConnell','DOCONNEL','650.507.9833',to_date('21-06-07','DD-MM-RR'),'SH_CLERK',2600,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (199,'Douglas','Grant','DGRANT','650.507.9844',to_date('13-01-08','DD-MM-RR'),'SH_CLERK',2600,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (200,'Jennifer','Whalen','JWHALEN','515.123.4444',to_date('17-09-03','DD-MM-RR'),'AD_ASST',4400,null,101,10);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (201,'Michael','Hartstein','MHARTSTE','515.123.5555',to_date('17-02-04','DD-MM-RR'),'MK_MAN',13000,null,100,20);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (202,'Pat','Fay','PFAY','603.123.6666',to_date('17-08-05','DD-MM-RR'),'MK_REP',6000,null,201,20);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (203,'Susan','Mavris','SMAVRIS','515.123.7777',to_date('07-06-02','DD-MM-RR'),'HR_REP',6500,null,101,40);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (204,'Hermann','Baer','HBAER','515.123.8888',to_date('07-06-02','DD-MM-RR'),'PR_REP',10000,null,101,70);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (205,'Shelley','Higgins','SHIGGINS','515.123.8080',to_date('07-06-02','DD-MM-RR'),'AC_MGR',12008,null,101,110);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (206,'William','Gietz','WGIETZ','515.123.8181',to_date('07-06-02','DD-MM-RR'),'AC_ACCOUNT',8300,null,205,110);
REM INSERTING into HR.EMP_MAS
SET DEFINE OFF;
Insert into HR.EMP_MAS (BRANCH,ENTITY_ID,GR_NO,F_NAME,M_NAME,L_NAME,DOB,DOJ,LEAVE_DATE,SEX,BLOOD_GRP,PHONE1,PHONE2,ADD1,ADD2,CITY,STATE,PINCODE,EMAIL_ID,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('H',2,1,'HIREN','S','PATEL',to_date('18-03-89','DD-MM-RR'),to_date('25-07-15','DD-MM-RR'),null,'M','O+',9033717428,0,'RANDER',null,'SURAT','GUJARAT',395005,'PHIREN53@GMAIL.COM','11-07-15','HIREN','MYPC',null,null,null,to_timestamp('11-07-15 06:51:19.262000000 PM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.EMP_MAS (BRANCH,ENTITY_ID,GR_NO,F_NAME,M_NAME,L_NAME,DOB,DOJ,LEAVE_DATE,SEX,BLOOD_GRP,PHONE1,PHONE2,ADD1,ADD2,CITY,STATE,PINCODE,EMAIL_ID,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('H',4,1,'Hiren','S','Patel',to_date('18-03-89','DD-MM-RR'),to_date('25-05-15','DD-MM-RR'),null,'M','O+',1,1,'Rander','Surat','Surat','GUJ',1,null,'11-07-15','Hiren','MYPC',null,null,null,to_timestamp('11-07-15 07:09:51.705000000 PM','DD-MM-RR HH12:MI:SSXFF AM'));
REM INSERTING into HR.ENTITY_MAS
SET DEFINE OFF;
REM INSERTING into HR.ENTITY_TYPE_MAS
SET DEFINE OFF;
Insert into HR.ENTITY_TYPE_MAS (ENTITY_TYPE_ID,ENTITY_TYPE_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values (1,'STUDENT','Y',to_date('11-07-15','DD-MM-RR'),'RLT','RAHUL-PC',null,null,null,to_timestamp('11-07-15 08:03:09.049000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.ENTITY_TYPE_MAS (ENTITY_TYPE_ID,ENTITY_TYPE_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values (2,'TEACHER','Y',to_date('11-07-15','DD-MM-RR'),'RLT','RAHUL-PC',null,null,null,to_timestamp('11-07-15 08:03:38.185000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
REM INSERTING into HR.FLG_MAS
SET DEFINE OFF;
Insert into HR.FLG_MAS (FLG_ID,FLG_SH_NAME,FLG_NAME,REMARK) values (3,'STDTYPE','Standard Type','GBSE |CBSE | ICSE ');
Insert into HR.FLG_MAS (FLG_ID,FLG_SH_NAME,FLG_NAME,REMARK) values (4,'STDMED','Standard Medium ','ENGLISH | GUJARATI');
Insert into HR.FLG_MAS (FLG_ID,FLG_SH_NAME,FLG_NAME,REMARK) values (1,'ACTSTD','Active Standard','Get Active Standard');
Insert into HR.FLG_MAS (FLG_ID,FLG_SH_NAME,FLG_NAME,REMARK) values (2,'NRML','Normal','Normal Column Type');
REM INSERTING into HR.GRID_FIEDLS
SET DEFINE OFF;
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('EntityTypeMas','grdMas','ENTITY_TYPE_ID',60,'Seqno','NRML','N',null,null,null,null,3);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('EntityTypeMas','grdMas','ENTITY_TYPE_NAME',60,'Type Name','NRML','N',null,null,null,null,2);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('EntityTypeMas','grdMas','IS_ACTIVE',60,'Is Active','CHKBX','N',null,null,null,null,1);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('StudyLevelMas','grdStudyLevelMas','BRANCH',60,'Branch ID','HIDECOL','N',null,null,null,null,1);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('StudyLevelMas','grdStudyLevelMas','STD_ID',60,'Std ID','READYONLY','N',null,null,null,null,2);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('StudyLevelMas','grdStudyLevelMas','STD_MEDIUM',60,'Std Medium','CMBBX','STDMED',null,null,null,null,3);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('StudyLevelMas','grdStudyLevelMas','STD_LEVEL',60,'Standard ','NRML','N',null,null,null,null,5);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('StudyLevelMas','grdStudyLevelMas','STD_TYPE',60,'Std Type','CMBBX','STDTYPE',null,null,null,null,4);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('StudyLevelMas','grdStudyLevelMas','STD_NAME',60,'Std Name','NRML','N',null,null,null,null,6);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('StudyLevelMas','grdStudyLevelMas','IS_ACTIVE',60,'Is Active','CHKBX','N',null,null,null,null,7);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('StudyLevelMas','grdStudyLevelMas','TIME_STAMP',60,'Timstamp','HIDECOL','N',null,null,null,null,8);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdMas','BRANCH',60,'Branch Name','NRML,.READONLY','N',null,null,null,null,1);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdMas','REF_STD_ID',60,'Standard','CMBBX','ACTSTD',null,null,null,null,2);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdMas','SUB_ID',60,'Subject ID','NRML','N',null,null,null,null,3);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdMas','SUB_NAME',60,'Subject Name','NRML','N',null,null,null,null,4);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdMas','HAVE_EXAM',60,'Have Exam','CHKBX','N',null,null,null,null,5);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdMas','IS_ACTIVE',60,'Is Active','CHKBX','N',null,null,null,null,6);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdMas','TIME_STAMP',60,'TimeStamp','HIDECOL','N',null,null,null,null,7);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdDet','SEQNO',60,'Seqno','NRML.READONLY','N',null,null,null,null,1);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdDet','REF_SUB_ID',60,'Subject ID','CMBBX','ACTSUB',null,null,null,null,2);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdDet','CHP_ID',60,'Chapter No','NRML','N',null,null,null,null,3);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdDet','CHP_NAME',60,'Chapter Name','NRML','N',null,null,null,null,4);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdDet','DESCRIPTION',60,'Description','NRML','N',null,null,null,null,5);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdDet','REMARK',60,'Remark','NRML','N',null,null,null,null,6);
Insert into HR.GRID_FIEDLS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD) values ('SubjectMas','grdDet','TIME_STAMP',60,'Timestamp','HIDECOL,.READONLY','N',null,null,null,null,7);
REM INSERTING into HR.JOBS
SET DEFINE OFF;
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('AD_PRES','President',20080,40000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('AD_VP','Administration Vice President',15000,30000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('AD_ASST','Administration Assistant',3000,6000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('FI_MGR','Finance Manager',8200,16000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('FI_ACCOUNT','Accountant',4200,9000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('AC_MGR','Accounting Manager',8200,16000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('AC_ACCOUNT','Public Accountant',4200,9000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('SA_MAN','Sales Manager',10000,20080);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('SA_REP','Sales Representative',6000,12008);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('PU_MAN','Purchasing Manager',8000,15000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('PU_CLERK','Purchasing Clerk',2500,5500);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('ST_MAN','Stock Manager',5500,8500);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('ST_CLERK','Stock Clerk',2008,5000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('SH_CLERK','Shipping Clerk',2500,5500);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('IT_PROG','Programmer',4000,10000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('MK_MAN','Marketing Manager',9000,15000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('MK_REP','Marketing Representative',4000,9000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('HR_REP','Human Resources Representative',4000,9000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('PR_REP','Public Relations Representative',4500,10500);
REM INSERTING into HR.JOB_HISTORY
SET DEFINE OFF;
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (102,to_date('13-01-01','DD-MM-RR'),to_date('24-07-06','DD-MM-RR'),'IT_PROG',60);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (101,to_date('21-09-97','DD-MM-RR'),to_date('27-10-01','DD-MM-RR'),'AC_ACCOUNT',110);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (101,to_date('28-10-01','DD-MM-RR'),to_date('15-03-05','DD-MM-RR'),'AC_MGR',110);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (201,to_date('17-02-04','DD-MM-RR'),to_date('19-12-07','DD-MM-RR'),'MK_REP',20);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (114,to_date('24-03-06','DD-MM-RR'),to_date('31-12-07','DD-MM-RR'),'ST_CLERK',50);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (122,to_date('01-01-07','DD-MM-RR'),to_date('31-12-07','DD-MM-RR'),'ST_CLERK',50);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (200,to_date('17-09-95','DD-MM-RR'),to_date('17-06-01','DD-MM-RR'),'AD_ASST',90);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (176,to_date('24-03-06','DD-MM-RR'),to_date('31-12-06','DD-MM-RR'),'SA_REP',80);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (176,to_date('01-01-07','DD-MM-RR'),to_date('31-12-07','DD-MM-RR'),'SA_MAN',80);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (200,to_date('01-07-02','DD-MM-RR'),to_date('31-12-06','DD-MM-RR'),'AC_ACCOUNT',90);
REM INSERTING into HR.LOCATIONS
SET DEFINE OFF;
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1000,'1297 Via Cola di Rie','00989','Roma',null,'IT');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1100,'93091 Calle della Testa','10934','Venice',null,'IT');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1200,'2017 Shinjuku-ku','1689','Tokyo','Tokyo Prefecture','JP');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1300,'9450 Kamiya-cho','6823','Hiroshima',null,'JP');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1400,'2014 Jabberwocky Rd','26192','Southlake','Texas','US');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1500,'2011 Interiors Blvd','99236','South San Francisco','California','US');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1600,'2007 Zagora St','50090','South Brunswick','New Jersey','US');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1700,'2004 Charade Rd','98199','Seattle','Washington','US');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1800,'147 Spadina Ave','M5V 2L7','Toronto','Ontario','CA');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1900,'6092 Boxwood St','YSW 9T2','Whitehorse','Yukon','CA');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2000,'40-5-12 Laogianggen','190518','Beijing',null,'CN');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2100,'1298 Vileparle (E)','490231','Bombay','Maharashtra','IN');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2200,'12-98 Victoria Street','2901','Sydney','New South Wales','AU');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2300,'198 Clementi North','540198','Singapore',null,'SG');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2400,'8204 Arthur St',null,'London',null,'UK');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2500,'Magdalen Centre, The Oxford Science Park','OX9 9ZB','Oxford','Oxford','UK');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2600,'9702 Chester Road','09629850293','Stretford','Manchester','UK');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2700,'Schwanthalerstr. 7031','80925','Munich','Bavaria','DE');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2800,'Rua Frei Caneca 1360 ','01307-002','Sao Paulo','Sao Paulo','BR');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2900,'20 Rue des Corps-Saints','1730','Geneva','Geneve','CH');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (3000,'Murtenstrasse 921','3095','Bern','BE','CH');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (3100,'Pieter Breughelstraat 837','3029SK','Utrecht','Utrecht','NL');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (3200,'Mariano Escobedo 9991','11932','Mexico City','Distrito Federal,','MX');
REM INSERTING into HR.REGIONS
SET DEFINE OFF;
Insert into HR.REGIONS (REGION_ID,REGION_NAME) values (1,'Europe');
Insert into HR.REGIONS (REGION_ID,REGION_NAME) values (2,'Americas');
Insert into HR.REGIONS (REGION_ID,REGION_NAME) values (3,'Asia');
Insert into HR.REGIONS (REGION_ID,REGION_NAME) values (4,'Middle East and Africa');
REM INSERTING into HR.SCHL_MAS
SET DEFINE OFF;
REM INSERTING into HR.STUDY_LEVEL_MAS
SET DEFINE OFF;
REM INSERTING into HR.STUD_MAS
SET DEFINE OFF;
REM INSERTING into HR.SUB_ALLOCATION
SET DEFINE OFF;
REM INSERTING into HR.SUB_MAS
SET DEFINE OFF;
REM INSERTING into HR.TEACHER_MAS
SET DEFINE OFF;
--------------------------------------------------------
--  DDL for Index ENTITY_TYPE_MAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."ENTITY_TYPE_MAS_PK" ON "HR"."ENTITY_TYPE_MAS" ("ENTITY_TYPE_ID", "ENTITY_TYPE_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LOC_STATE_PROVINCE_IX
--------------------------------------------------------

  CREATE INDEX "HR"."LOC_STATE_PROVINCE_IX" ON "HR"."LOCATIONS" ("STATE_PROVINCE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index LOC_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."LOC_ID_PK" ON "HR"."LOCATIONS" ("LOCATION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index EMP_DEPARTMENT_IX
--------------------------------------------------------

  CREATE INDEX "HR"."EMP_DEPARTMENT_IX" ON "HR"."EMPLOYEES" ("DEPARTMENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index EMP_EMAIL_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."EMP_EMAIL_UK" ON "HR"."EMPLOYEES" ("EMAIL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index EMP_MAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."EMP_MAS_PK" ON "HR"."EMP_MAS" ("ENTITY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index EMP_NAME_IX
--------------------------------------------------------

  CREATE INDEX "HR"."EMP_NAME_IX" ON "HR"."EMPLOYEES" ("LAST_NAME", "FIRST_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index EMP_MANAGER_IX
--------------------------------------------------------

  CREATE INDEX "HR"."EMP_MANAGER_IX" ON "HR"."EMPLOYEES" ("MANAGER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index DEPT_LOCATION_IX
--------------------------------------------------------

  CREATE INDEX "HR"."DEPT_LOCATION_IX" ON "HR"."DEPARTMENTS" ("LOCATION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index FLG_MAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."FLG_MAS_PK" ON "HR"."FLG_MAS" ("FLG_ID", "FLG_SH_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index REG_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."REG_ID_PK" ON "HR"."REGIONS" ("REGION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index JHIST_EMP_ID_ST_DATE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."JHIST_EMP_ID_ST_DATE_PK" ON "HR"."JOB_HISTORY" ("EMPLOYEE_ID", "START_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index JHIST_DEPARTMENT_IX
--------------------------------------------------------

  CREATE INDEX "HR"."JHIST_DEPARTMENT_IX" ON "HR"."JOB_HISTORY" ("DEPARTMENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index EMP_EMP_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."EMP_EMP_ID_PK" ON "HR"."EMPLOYEES" ("EMPLOYEE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index DEPT_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."DEPT_ID_PK" ON "HR"."DEPARTMENTS" ("DEPARTMENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index ENTITY_MAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."ENTITY_MAS_PK" ON "HR"."ENTITY_MAS" ("ENTITY_ID", "ENTITY_TYPE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index COUNTRY_C_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."COUNTRY_C_ID_PK" ON "HR"."COUNTRIES" ("COUNTRY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index JHIST_JOB_IX
--------------------------------------------------------

  CREATE INDEX "HR"."JHIST_JOB_IX" ON "HR"."JOB_HISTORY" ("JOB_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index JHIST_EMPLOYEE_IX
--------------------------------------------------------

  CREATE INDEX "HR"."JHIST_EMPLOYEE_IX" ON "HR"."JOB_HISTORY" ("EMPLOYEE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index LOC_COUNTRY_IX
--------------------------------------------------------

  CREATE INDEX "HR"."LOC_COUNTRY_IX" ON "HR"."LOCATIONS" ("COUNTRY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index EMP_JOB_IX
--------------------------------------------------------

  CREATE INDEX "HR"."EMP_JOB_IX" ON "HR"."EMPLOYEES" ("JOB_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index LOC_CITY_IX
--------------------------------------------------------

  CREATE INDEX "HR"."LOC_CITY_IX" ON "HR"."LOCATIONS" ("CITY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index CHAP_DET_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."CHAP_DET_PK" ON "HR"."CHP_DET" ("REF_SUB_ID", "CHP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index JOB_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."JOB_ID_PK" ON "HR"."JOBS" ("JOB_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  Constraints for Table SCHL_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."SCHL_MAS" MODIFY ("SCHL_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SCHL_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SCHL_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SCHL_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SCHL_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LOCATIONS
--------------------------------------------------------

  ALTER TABLE "HR"."LOCATIONS" MODIFY ("CITY" CONSTRAINT "LOC_CITY_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."LOCATIONS" ADD CONSTRAINT "LOC_ID_PK" PRIMARY KEY ("LOCATION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TEACHER_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("TEACHER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("T_ENTITY_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("PH1" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EMPLOYEES
--------------------------------------------------------

  ALTER TABLE "HR"."EMPLOYEES" MODIFY ("EMAIL" CONSTRAINT "EMP_EMAIL_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMPLOYEES" ADD CONSTRAINT "EMP_EMAIL_UK" UNIQUE ("EMAIL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
 
  ALTER TABLE "HR"."EMPLOYEES" ADD CONSTRAINT "EMP_EMP_ID_PK" PRIMARY KEY ("EMPLOYEE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
 
  ALTER TABLE "HR"."EMPLOYEES" MODIFY ("HIRE_DATE" CONSTRAINT "EMP_HIRE_DATE_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMPLOYEES" MODIFY ("JOB_ID" CONSTRAINT "EMP_JOB_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMPLOYEES" MODIFY ("LAST_NAME" CONSTRAINT "EMP_LAST_NAME_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMPLOYEES" ADD CONSTRAINT "EMP_SALARY_MIN" CHECK (salary > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table SUB_ALLOCATION
--------------------------------------------------------

  ALTER TABLE "HR"."SUB_ALLOCATION" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SUB_ALLOCATION" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SUB_ALLOCATION" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SUB_ALLOCATION" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SUB_ALLOCATION" MODIFY ("ALLOCATION_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ENTITY_TYPE_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."ENTITY_TYPE_MAS" ADD CONSTRAINT "ENTITY_TYPE_MAS_PK" PRIMARY KEY ("ENTITY_TYPE_ID", "ENTITY_TYPE_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."ENTITY_TYPE_MAS" MODIFY ("ENTITY_TYPE_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_TYPE_MAS" MODIFY ("ENTITY_TYPE_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_TYPE_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_TYPE_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_TYPE_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_TYPE_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EMP_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."EMP_MAS" ADD CONSTRAINT "EMP_MAS_PK" PRIMARY KEY ("ENTITY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."EMP_MAS" ADD CONSTRAINT "EMP_MAS_VALIDATE_SEX" CHECK (SEX IN ('M','F')) ENABLE;
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("ENTITY_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("GR_NO" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("F_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("DOJ" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("BRANCH" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CHP_DET
--------------------------------------------------------

  ALTER TABLE "HR"."CHP_DET" ADD CONSTRAINT "CHAP_DET_PK" PRIMARY KEY ("REF_SUB_ID", "CHP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("SEQNO" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("REF_SUB_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("CHP_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("CHP_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("ENT_TERM" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table JOBS
--------------------------------------------------------

  ALTER TABLE "HR"."JOBS" ADD CONSTRAINT "JOB_ID_PK" PRIMARY KEY ("JOB_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
 
  ALTER TABLE "HR"."JOBS" MODIFY ("JOB_TITLE" CONSTRAINT "JOB_TITLE_NN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table REGIONS
--------------------------------------------------------

  ALTER TABLE "HR"."REGIONS" MODIFY ("REGION_ID" CONSTRAINT "REGION_ID_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."REGIONS" ADD CONSTRAINT "REG_ID_PK" PRIMARY KEY ("REGION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
--------------------------------------------------------
--  Constraints for Table FLG_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."FLG_MAS" ADD CONSTRAINT "FLG_MAS_PK" PRIMARY KEY ("FLG_ID", "FLG_SH_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."FLG_MAS" MODIFY ("FLG_SH_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."FLG_MAS" MODIFY ("FLG_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."FLG_MAS" MODIFY ("FLG_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STUDY_LEVEL_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("BRANCH" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("STD_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("STD_LEVEL" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("STD_TYPE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ENTITY_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."ENTITY_MAS" ADD CONSTRAINT "ENTITY_MAS_PK" PRIMARY KEY ("ENTITY_ID", "ENTITY_TYPE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("ENTITY_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("ENTITY_TYPE_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("ENTITY_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DEPARTMENTS
--------------------------------------------------------

  ALTER TABLE "HR"."DEPARTMENTS" ADD CONSTRAINT "DEPT_ID_PK" PRIMARY KEY ("DEPARTMENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
 
  ALTER TABLE "HR"."DEPARTMENTS" MODIFY ("DEPARTMENT_NAME" CONSTRAINT "DEPT_NAME_NN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table JOB_HISTORY
--------------------------------------------------------

  ALTER TABLE "HR"."JOB_HISTORY" ADD CONSTRAINT "JHIST_DATE_INTERVAL" CHECK (end_date > start_date) ENABLE;
 
  ALTER TABLE "HR"."JOB_HISTORY" MODIFY ("EMPLOYEE_ID" CONSTRAINT "JHIST_EMPLOYEE_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."JOB_HISTORY" ADD CONSTRAINT "JHIST_EMP_ID_ST_DATE_PK" PRIMARY KEY ("EMPLOYEE_ID", "START_DATE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
 
  ALTER TABLE "HR"."JOB_HISTORY" MODIFY ("END_DATE" CONSTRAINT "JHIST_END_DATE_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."JOB_HISTORY" MODIFY ("JOB_ID" CONSTRAINT "JHIST_JOB_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."JOB_HISTORY" MODIFY ("START_DATE" CONSTRAINT "JHIST_START_DATE_NN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STUD_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."STUD_MAS" MODIFY ("STUD_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("S_ENTITY_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("S_FNAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("PH1" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table COUNTRIES
--------------------------------------------------------

  ALTER TABLE "HR"."COUNTRIES" ADD CONSTRAINT "COUNTRY_C_ID_PK" PRIMARY KEY ("COUNTRY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
 
  ALTER TABLE "HR"."COUNTRIES" MODIFY ("COUNTRY_ID" CONSTRAINT "COUNTRY_ID_NN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table GRID_FIEDLS
--------------------------------------------------------

  ALTER TABLE "HR"."GRID_FIEDLS" MODIFY ("MENU_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."GRID_FIEDLS" MODIFY ("CTRL_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."GRID_FIEDLS" MODIFY ("DATA_FIELD_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."GRID_FIEDLS" MODIFY ("DISP_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table COUNTRIES
--------------------------------------------------------

  ALTER TABLE "HR"."COUNTRIES" ADD CONSTRAINT "COUNTR_REG_FK" FOREIGN KEY ("REGION_ID")
	  REFERENCES "HR"."REGIONS" ("REGION_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DEPARTMENTS
--------------------------------------------------------

  ALTER TABLE "HR"."DEPARTMENTS" ADD CONSTRAINT "DEPT_LOC_FK" FOREIGN KEY ("LOCATION_ID")
	  REFERENCES "HR"."LOCATIONS" ("LOCATION_ID") ENABLE;
 
  ALTER TABLE "HR"."DEPARTMENTS" ADD CONSTRAINT "DEPT_MGR_FK" FOREIGN KEY ("MANAGER_ID")
	  REFERENCES "HR"."EMPLOYEES" ("EMPLOYEE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EMPLOYEES
--------------------------------------------------------

  ALTER TABLE "HR"."EMPLOYEES" ADD CONSTRAINT "EMP_DEPT_FK" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES "HR"."DEPARTMENTS" ("DEPARTMENT_ID") ENABLE;
 
  ALTER TABLE "HR"."EMPLOYEES" ADD CONSTRAINT "EMP_JOB_FK" FOREIGN KEY ("JOB_ID")
	  REFERENCES "HR"."JOBS" ("JOB_ID") ENABLE;
 
  ALTER TABLE "HR"."EMPLOYEES" ADD CONSTRAINT "EMP_MANAGER_FK" FOREIGN KEY ("MANAGER_ID")
	  REFERENCES "HR"."EMPLOYEES" ("EMPLOYEE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table JOB_HISTORY
--------------------------------------------------------

  ALTER TABLE "HR"."JOB_HISTORY" ADD CONSTRAINT "JHIST_DEPT_FK" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES "HR"."DEPARTMENTS" ("DEPARTMENT_ID") ENABLE;
 
  ALTER TABLE "HR"."JOB_HISTORY" ADD CONSTRAINT "JHIST_EMP_FK" FOREIGN KEY ("EMPLOYEE_ID")
	  REFERENCES "HR"."EMPLOYEES" ("EMPLOYEE_ID") ENABLE;
 
  ALTER TABLE "HR"."JOB_HISTORY" ADD CONSTRAINT "JHIST_JOB_FK" FOREIGN KEY ("JOB_ID")
	  REFERENCES "HR"."JOBS" ("JOB_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LOCATIONS
--------------------------------------------------------

  ALTER TABLE "HR"."LOCATIONS" ADD CONSTRAINT "LOC_C_ID_FK" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES "HR"."COUNTRIES" ("COUNTRY_ID") ENABLE;
--------------------------------------------------------
--  DDL for Trigger SECURE_EMPLOYEES
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "HR"."SECURE_EMPLOYEES" 
  BEFORE INSERT OR UPDATE OR DELETE ON employees
BEGIN
  secure_dml;
END secure_employees;
/
ALTER TRIGGER "HR"."SECURE_EMPLOYEES" DISABLE;
--------------------------------------------------------
--  DDL for Trigger UPDATE_JOB_HISTORY
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "HR"."UPDATE_JOB_HISTORY" 
  AFTER UPDATE OF job_id, department_id ON employees
  FOR EACH ROW
BEGIN
  add_job_history(:old.employee_id, :old.hire_date, sysdate,
                  :old.job_id, :old.department_id);
END;
/
ALTER TRIGGER "HR"."UPDATE_JOB_HISTORY" ENABLE;
--------------------------------------------------------
--  DDL for Package PKG_BATCH_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_BATCH_MAS" AS 

  type ref_cur is REF CURSOR;
  
  procedure prc_mas_ins(
                          p_branch batch_mas.branch%type, 
                          p_batch_id batch_mas.batch_id%type, 
                          p_batch_name batch_mas.batch_name%type, 
                          p_ref_sub_id batch_mas.ref_sub_id%type, 
                          p_ref_t_entity_id batch_mas.ref_t_entity_id%type,
                          p_fr_time batch_mas.fr_time%type, 
                          p_to_time batch_mas.to_time%type, 
                          p_ent_date batch_mas.ent_date%type, 
                          p_ent_term batch_mas.ent_term%type, 
                          p_ent_user batch_mas.ent_user%type, 
                          p_time_stamp out sub_mas.time_stamp%type,
                          p_flg out varchar2,
                          p_msg out varchar2
                         );
    
   procedure prc_mas_upd(
                          p_branch batch_mas.branch%type, 
                          p_batch_id batch_mas.batch_id%type, 
                          p_batch_name batch_mas.batch_name%type, 
                          p_ref_sub_id batch_mas.ref_sub_id%type, 
                          p_ref_t_entity_id batch_mas.ref_t_entity_id%type,
                          p_fr_time batch_mas.fr_time%type, 
                          p_to_time batch_mas.to_time%type, 
                          p_upd_date batch_mas.ent_date%type, 
                          p_upd_term batch_mas.ent_term%type, 
                          p_upd_user batch_mas.ent_user%type, 
                          p_time_stamp in out sub_mas.time_stamp%type,
                          p_flg out varchar2,
                          p_msg out varchar2
                         );

  procedure prc_mas_del(p_branch batch_mas.branch%type,
                        p_batch_id batch_mas.batch_id%type, 
                        p_flg out varchar2,
                        p_msg out varchar2
                       );
  
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            );
END PKG_BATCH_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_CHP_DET
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_CHP_DET" AS 

  type ref_cur is REF CURSOR;
  
  procedure prc_mas_ins( p_ref_sub_id chp_det.ref_sub_id%type, 
                         p_chp_id out chp_det.chp_id%type,  
                         p_chp_name chp_det.chp_name%type, 
                         p_description chp_det.description%type,
                         p_remark chp_det.remark%type,  
                         p_ent_date chp_det.ent_date%type,
                         p_ent_term chp_det.ent_term%type,
                         p_ent_user chp_det.ent_user%type,
                         p_time_stamp out chp_det.time_stamp%type,
                         p_flg out varchar2,
                         p_msg out varchar2
                       ) ;
  ---------------------------------------
  procedure prc_mas_upd( p_ref_sub_id chp_det.ref_sub_id%type,
                         p_chp_id out chp_det.chp_id%type,
                         p_chp_name chp_det.chp_name%type,
                         p_description chp_det.description%type,
                         p_remark chp_det.remark%type,
                         p_upd_date chp_det.ent_date%type,
                         p_upd_term chp_det.ent_term%type,
                         p_upd_user chp_det.ent_user%type,
                         p_time_stamp in out chp_det.time_stamp%type,
                         p_flg out varchar2,
                         p_msg out varchar2
                       );
  
  ---------------------------------------------------
  procedure prc_mas_del(p_uniq_id chp_det.chp_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );
  ---------------------------------------------------
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ); 

END PKG_CHP_DET;

/
--------------------------------------------------------
--  DDL for Package PKG_EMP_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_EMP_MAS" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
type ref_cur is REF CURSOR;
  
  procedure prc_emp_ins(p_branch EMP_MAS.BRANCH%type,
                        p_gr_no EMP_MAS.GR_NO%type,
                        p_f_name EMP_MAS.F_NAME%type,
                        p_m_name EMP_MAS.M_NAME%type,
                        p_l_name EMP_MAS.L_NAME%type,
                        p_dob EMP_MAS.DOB%type,
                        p_doj EMP_MAS.DOJ%type,
                        p_leave_date EMP_MAS.LEAVE_DATE%type,
                        p_sex EMP_MAS.SEX%type,
                        p_blood_grp EMP_MAS.BLOOD_GRP%type,
                        p_phone1 EMP_MAS.PHONE1%type,
                        p_phone2 EMP_MAS.PHONE2%type,
                        p_photo EMP_MAS.PHOTO%type,
                        p_add1 EMP_MAS.ADD1%type,
                        p_add2 EMP_MAS.ADD2%type,
                        p_city EMP_MAS.CITY%type,
                        p_state EMP_MAS.STATE%type,
                        p_pincode EMP_MAS.PINCODE%type,
                        p_email_id EMP_MAS.EMAIL_ID%type,
                        p_ent_user EMP_MAS.ENT_USER%type,
                        p_ent_term EMP_MAS.ENT_TERM%type,
                        p_time_stamp in out EMP_MAS.TIME_STAMP%type,
                        p_entity_id out EMP_MAS.ENTITY_ID%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                      );
  
  procedure prc_emp_upd(p_branch EMP_MAS.BRANCH%type,
                        p_entity_id EMP_MAS.ENTITY_ID%type,
                        p_gr_no EMP_MAS.GR_NO%type,
                        p_f_name EMP_MAS.F_NAME%type,
                        p_m_name EMP_MAS.M_NAME%type,
                        p_l_name EMP_MAS.L_NAME%type,
                        p_dob EMP_MAS.DOB%type,
                        p_doj EMP_MAS.DOJ%type,
                        p_leave_date EMP_MAS.LEAVE_DATE%type,
                        p_sex EMP_MAS.SEX%type,
                        p_blood_grp EMP_MAS.BLOOD_GRP%type,
                        p_phone1 EMP_MAS.PHONE1%type,
                        p_phone2 EMP_MAS.PHONE2%type,
                        p_photo EMP_MAS.PHOTO%type,
                        p_add1 EMP_MAS.ADD1%type,
                        p_add2 EMP_MAS.ADD2%type,
                        p_city EMP_MAS.CITY%type,
                        p_state EMP_MAS.STATE%type,
                        p_pincode EMP_MAS.PINCODE%type,
                        p_email_id EMP_MAS.EMAIL_ID%type,
                        p_upd_user EMP_MAS.UPD_USER%type,
                        p_upd_term EMP_MAS.UPD_TERM%type,
                        p_time_stamp in out EMP_MAS.TIME_STAMP%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                      );
  
  procedure prc_emp_del(p_branch EMP_MAS.BRANCH%type,
                        p_entity_id EMP_MAS.ENTITY_ID%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );
                       
  procedure prc_emp_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            );
  
END PKG_EMP_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_ENTITY_TYPE_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_ENTITY_TYPE_MAS" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
type ref_cur is REF CURSOR;

procedure prc_fetch_data(p_criteria varchar2, p_data out ref_cur);

END PKG_ENTITY_TYPE_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_STUDENT_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_STUDENT_MAS" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
type ref_cur is REF CURSOR;
  
  procedure prc_stud_ins(p_data out ref_cur);
  
  procedure prc_stud_upd(p_data out ref_cur);
  
  procedure prc_stud_del(p_data out ref_cur);
  
END PKG_STUDENT_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_STUDY_LEVEL_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_STUDY_LEVEL_MAS" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
type ref_cur is REF CURSOR;
procedure prc_mas_ins(p_branch_id  STUDY_LEVEL_MAS.branch%type,
                      p_std_id STUDY_LEVEL_MAS.STD_ID%type,
                      p_std_level STUDY_LEVEL_MAS.STD_LEVEL%type,
                      p_std_med STUDY_LEVEL_MAS.STD_MEDIUM%type,
                      p_std_type STUDY_LEVEL_MAS.STD_TYPE%type,
                      p_std_name STUDY_LEVEL_MAS.STD_NAME%type,
                      p_is_active STUDY_LEVEL_MAS.IS_ACTIVE%type,
                      p_ent_user STUDY_LEVEL_MAS.ENT_USER%type,
                      p_ent_term STUDY_LEVEL_MAS.ENT_TERM%type,
                      p_time_stamp in out STUDY_LEVEL_MAS.TIME_STAMP%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                    );
                    
procedure prc_mas_upd(p_branch_id  STUDY_LEVEL_MAS.branch%type,
                      p_std_id STUDY_LEVEL_MAS.STD_ID%type,
                      p_std_level STUDY_LEVEL_MAS.STD_LEVEL%type,
                      p_std_med STUDY_LEVEL_MAS.STD_MEDIUM%type,
                      p_std_type STUDY_LEVEL_MAS.STD_TYPE%type,
                      p_std_name STUDY_LEVEL_MAS.STD_NAME%type,
                      p_is_active STUDY_LEVEL_MAS.IS_ACTIVE%type,
                      p_upd_user STUDY_LEVEL_MAS.UPD_USER%type,
                      p_upd_term STUDY_LEVEL_MAS.UPD_TERM%type,
                      p_time_stamp in out STUDY_LEVEL_MAS.TIME_STAMP%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                    );
                    
procedure prc_mas_del(p_branch_id STUDY_LEVEL_MAS.branch%type,
                      p_std_id STUDY_LEVEL_MAS.STD_ID%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                     );
                     
procedure prc_get_data(p_criteria varchar2,
                       p_data out ref_cur
                      );

                      
END PKG_STUDY_LEVEL_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_SUB_ALLOCATION
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_SUB_ALLOCATION" AS 

  type ref_cur is REF CURSOR;

  procedure prc_mas_ins( p_branch sub_allocation.branch%type,
                         p_allocation_id out sub_allocation.allocation_id%type,
                         p_batch_id sub_allocation.batch_id%type,
                         p_entity_id sub_allocation.entity_id%type,
                         p_entity_type_id sub_allocation.entity_type_id%type,
                         p_ref_sub_id sub_allocation.ref_sub_id%type,
                         p_is_active sub_allocation.is_active%type,
                         p_remark sub_allocation.remark%type,
                         p_ent_date sub_allocation.ent_date%type,
                         p_ent_term sub_allocation.ent_term%type,
                         p_ent_user sub_allocation.ent_user%type,
                         p_time_stamp out sub_allocation.time_stamp%type,
                         p_flg out varchar2,
                         p_msg out varchar2
                       ) ;
  ---------------------------------------
  procedure prc_mas_upd( p_branch sub_allocation.branch%type,
                         p_allocation_id sub_allocation.allocation_id%type,
                         p_batch_id sub_allocation.batch_id%type,
                         p_entity_id sub_allocation.entity_id%type,
                         p_entity_type_id sub_allocation.entity_type_id%type,
                         p_ref_sub_id sub_allocation.ref_sub_id%type,
                         p_is_active sub_allocation.is_active%type,
                         p_remark sub_allocation.remark%type,
                         p_upd_date sub_allocation.ent_date%type,
                         p_upd_term sub_allocation.ent_term%type,
                         p_upd_user sub_allocation.ent_user%type,
                         p_time_stamp in out sub_allocation.time_stamp%type,
                         p_flg out varchar2,
                         p_msg out varchar2
                       );

  ---------------------------------------------------
  procedure prc_mas_del(p_allocation_id sub_allocation.allocation_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );
  ---------------------------------------------------
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ); 

END PKG_SUB_ALLOCATION;

/
--------------------------------------------------------
--  DDL for Package PKG_SUB_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_SUB_MAS" AS 

  type ref_cur is REF CURSOR;
  
  procedure prc_mas_ins( 
                          p_branch sub_mas.branch%type,
                          p_ref_std_id sub_mas.ref_std_id%type,
                          p_sub_id sub_mas.sub_id%type, 
                          p_sub_name sub_mas.sub_name%type, 
                          p_have_exam sub_mas.have_exam%type,
                          p_is_active sub_mas.is_active%type,
                          p_ent_date sub_mas.ent_date%type,
                          p_ent_term sub_mas.ent_term%type,
                          p_ent_user sub_mas.ent_user%type,
                          p_time_stamp out sub_mas.time_stamp%type,
                          p_flg out varchar2,
                          p_msg out varchar2
                       );
   
  
   procedure prc_mas_upd( 
                          p_branch sub_mas.branch%type,
                          p_ref_std_id sub_mas.ref_std_id%type,
                          p_sub_id sub_mas.sub_id%type, 
                          p_sub_name sub_mas.sub_name%type, 
                          p_have_exam sub_mas.have_exam%type,
                          p_is_active sub_mas.is_active%type,
                          p_upd_date sub_mas.ent_date%type,
                          p_upd_term sub_mas.ent_term%type,
                          p_upd_user sub_mas.ent_user%type,
                          p_time_stamp in out sub_mas.time_stamp%type,
                          p_flg out varchar2,
                          p_msg out varchar2
                       );
  
  procedure prc_mas_del(p_branch sub_mas.branch%type,
                        p_sub_id sub_mas.sub_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );
  
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_sub_data out ref_cur,
                             p_chp_data out ref_cur
                            );

END PKG_SUB_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_TUITION_BASE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_TUITION_BASE" 
AS
type ref_cur
IS
  ref
  CURSOR;
    --
    -- Get Grid fields details
    --
    PROCEDURE prc_fetch_grid_fields(
        p_menu_name VARCHAR2,
        p_ctrl_name VARCHAR2,
        p_data OUT ref_cur);
    --
    -- Get Sub List
    --
    PROCEDURE prc_get_sub_list(
        p_std_id         VARCHAR2,
        p_subject_status VARCHAR2,
        p_data OUT ref_cur);
    --
    -- Get Chapter details
    --
    PROCEDURE prc_get_chp_list(
        p_sub_id VARCHAR2,
        p_data OUT ref_cur);
    --
    -- Get Std Type
    --
    PROCEDURE prc_get_std_type(
        p_data OUT ref_cur);
    --
    -- Get Std Combo Active/InActive
    --
    PROCEDURE prc_get_std_list(
        p_branch       VARCHAR2,
        p_std_status VARCHAR2,
        p_std_list OUT ref_cur );
        
    PROCEDURE prc_get_std_medium(p_data out ref_cur);    
  END PKG_TUiTION_BASE;

/
--------------------------------------------------------
--  DDL for Package Body PKG_BATCH_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_BATCH_MAS" AS

  procedure prc_mas_ins(
                          p_branch batch_mas.branch%type, 
                          p_batch_id batch_mas.batch_id%type, 
                          p_batch_name batch_mas.batch_name%type, 
                          p_ref_sub_id batch_mas.ref_sub_id%type, 
                          p_ref_t_entity_id batch_mas.ref_t_entity_id%type,
                          p_fr_time batch_mas.fr_time%type, 
                          p_to_time batch_mas.to_time%type, 
                          p_ent_date batch_mas.ent_date%type, 
                          p_ent_term batch_mas.ent_term%type, 
                          p_ent_user batch_mas.ent_user%type, 
                          p_time_stamp out sub_mas.time_stamp%type,
                          p_flg out varchar2,
                          p_msg out varchar2
                        ) as
begin
    begin
        insert into batch_mas
                  (
                    branch,     batch_id,        batch_name, 
                    ref_sub_id, ref_t_entity_id, fr_time, 
                    to_time,    ent_date,        ent_user,   
                    ent_term,   time_stamp
                  )
                  values
                  (p_branch,      p_batch_id,          p_batch_name,
                   p_ref_sub_id,  p_ref_t_entity_id,   p_fr_time,
                   p_to_time,      sysdate,             p_ent_user,
                   p_ent_term,    systimestamp
                 );
        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           p_time_stamp := systimestamp;
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
end;
---------------------
procedure prc_mas_upd(
                      p_branch batch_mas.branch%type, 
                      p_batch_id batch_mas.batch_id%type, 
                      p_batch_name batch_mas.batch_name%type, 
                      p_ref_sub_id batch_mas.ref_sub_id%type, 
                      p_ref_t_entity_id batch_mas.ref_t_entity_id%type,
                      p_fr_time batch_mas.fr_time%type, 
                      p_to_time batch_mas.to_time%type, 
                      p_upd_date batch_mas.ent_date%type, 
                      p_upd_term batch_mas.ent_term%type, 
                      p_upd_user batch_mas.ent_user%type, 
                      p_time_stamp in out sub_mas.time_stamp%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                     ) as
    
v_cnt number(3);
begin
     
     update batch_mas set 
                        batch_name = p_batch_name,
                        ref_sub_id = p_ref_sub_id,
                        ref_t_entity_id = p_ref_t_entity_id,
                        fr_time = p_fr_time,
                        to_time = p_to_time,
                        upd_date   = sysdate,
                        upd_user   = p_upd_user,
                        upd_term   = p_upd_term,
                        time_stamp = systimestamp
                  where branch = p_branch
                        and batch_id = p_batch_id
                        and time_stamp = p_time_stamp;
    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   batch_mas a
       where  a.branch = p_branch
              and batch_id = p_batch_id
              and a.time_stamp = p_time_stamp;
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
end;
---------------------------------------
procedure prc_mas_del(p_branch batch_mas.branch%type,
                      p_batch_id batch_mas.batch_id%type, 
                      p_flg out varchar2,
                      p_msg out varchar2
                     ) as
begin
  -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
  delete from batch_mas a
        where a.branch = p_branch
              and a.batch_id = p_batch_id;

  if sql%rowcount > 0 then
     p_flg:= 'Y';
     p_msg:= sql%rowcount || ' record(s) deleted successfully!';
  else
     p_flg := 'T';
     p_msg := 'Please refresh once. As some contain change by another user!';
     return;
  end if;
END prc_mas_del;
---------------------------------------------------
procedure prc_mas_get_data(p_criteria varchar2,
                           p_data out ref_cur
                          ) as
v_str varchar2(1000);
begin
   v_str := 'select *
             from   batch_mas a
             where  1 = 1
                    and ' ||p_criteria;
   open p_data for v_str;
end;

END PKG_BATCH_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_CHP_DET
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_CHP_DET" AS

  procedure prc_mas_ins( p_ref_sub_id chp_det.ref_sub_id%type,
                         p_chp_id out chp_det.chp_id%type,
                         p_chp_name chp_det.chp_name%type,
                         p_description chp_det.description%type,
                         p_remark chp_det.remark%type,
                         p_ent_date chp_det.ent_date%type,
                         p_ent_term chp_det.ent_term%type,
                         p_ent_user chp_det.ent_user%type,
                         p_time_stamp out chp_det.time_stamp%type,
                         p_flg out varchar2,
                         p_msg out varchar2
                       ) as
  begin
    begin

        insert into chp_det
          (ref_sub_id,   chp_id,    chp_name,
           description,  remark,    ent_date,
           ent_term,     ent_user,  time_stamp
          )
        values
          (p_ref_sub_id, p_chp_id,  p_chp_name,
           p_description,p_remark,  p_ent_date,
           p_ent_term,   p_ent_user,systimestamp);

        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           p_time_stamp := systimestamp;
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
  end;
  ---------------------------------------
  procedure prc_mas_upd( p_ref_sub_id chp_det.ref_sub_id%type,
                         p_chp_id out chp_det.chp_id%type,
                         p_chp_name chp_det.chp_name%type,
                         p_description chp_det.description%type,
                         p_remark chp_det.remark%type,
                         p_upd_date chp_det.ent_date%type,
                         p_upd_term chp_det.ent_term%type,
                         p_upd_user chp_det.ent_user%type,
                         p_time_stamp in out chp_det.time_stamp%type,
                         p_flg out varchar2,
                         p_msg out varchar2
                       ) as
  v_cnt number(3);
  begin
     
     update chp_det
        set ref_sub_id = p_ref_sub_id,
            chp_id = p_chp_id,
            chp_name = p_chp_name,
            description = p_description,
            remark = p_remark,
            upd_date = p_upd_date,
            upd_user = p_upd_user,
            upd_term = p_upd_term
      where 2=2 /*primary key related where clause pending.*/
            and time_stamp = p_time_stamp;

    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   chp_det a
       where  2=2 /*primary key related where clause pending.*/
              and a.time_stamp = p_time_stamp;
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
  end;


  ---------------------------------------------------
  procedure prc_mas_del(p_uniq_id chp_det.chp_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       ) as
  begin
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
    delete from chp_det a
          where  1 = p_uniq_id;

    if sql%rowcount > 0 then
       p_flg:= 'Y';
       p_msg:= sql%rowcount || ' record(s) deleted successfully!';
    else
       p_flg := 'T';
       p_msg := 'Please refresh once. As some contain change by another user!';
       return;
    end if;
  END prc_mas_del;
  ---------------------------------------------------
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ) as
  v_str varchar2(1000);
  begin
     v_str := 'select *
               from   chp_det a
               where  1 = 1
                      and ' ||p_criteria;
     open p_data for v_str;
  end;

END PKG_CHP_DET;

/
--------------------------------------------------------
--  DDL for Package Body PKG_EMP_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_EMP_MAS" AS

  procedure prc_emp_ins(p_branch EMP_MAS.BRANCH%type,
                        p_gr_no EMP_MAS.GR_NO%type,
                        p_f_name EMP_MAS.F_NAME%type,
                        p_m_name EMP_MAS.M_NAME%type,
                        p_l_name EMP_MAS.L_NAME%type,
                        p_dob EMP_MAS.DOB%type,
                        p_doj EMP_MAS.DOJ%type,
                        p_leave_date EMP_MAS.LEAVE_DATE%type,
                        p_sex EMP_MAS.SEX%type,
                        p_blood_grp EMP_MAS.BLOOD_GRP%type,
                        p_phone1 EMP_MAS.PHONE1%type,
                        p_phone2 EMP_MAS.PHONE2%type,
                        p_photo EMP_MAS.PHOTO%type,
                        p_add1 EMP_MAS.ADD1%type,
                        p_add2 EMP_MAS.ADD2%type,
                        p_city EMP_MAS.CITY%type,
                        p_state EMP_MAS.STATE%type,
                        p_pincode EMP_MAS.PINCODE%type,
                        p_email_id EMP_MAS.EMAIL_ID%type,
                        p_ent_user EMP_MAS.ENT_USER%type,
                        p_ent_term EMP_MAS.ENT_TERM%type,
                        p_time_stamp in out EMP_MAS.TIME_STAMP%type,
                        p_entity_id out EMP_MAS.ENTITY_ID%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                      ) AS
    --v_date date;
    --v_time_stamp EMP_MAS.TIME_STAMP%type;
    --v_entity_id EMP_MAS.ENTITY_ID%type;
  BEGIN
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_ins
    --v_date = sysdate;
    --v_time_stamp= timestamp;
    begin
        select seq_entity_id.NEXTVAL
               into p_entity_id
        from   dual;
        --p_entity_id := v_entity_id;
        INSERT INTO EMP_MAS
                  (
                    BRANCH,   ENTITY_ID,  GR_NO,
                    F_NAME,   M_NAME,     L_NAME,
                    DOB,      DOJ,        LEAVE_DATE,
                    SEX,      BLOOD_GRP,  PHONE1,
                    PHONE2,   PHOTO,      ADD1,
                    ADD2,     CITY,       STATE,
                    PINCODE,  EMAIL_ID,   ENT_DATE, 
                    ENT_USER, ENT_TERM,   TIME_STAMP
                  )
                  VALUES
                  (p_branch,  p_entity_id,  p_gr_no,
                   p_f_name,  p_m_name,     p_l_name,
                   p_dob,     p_doj,        p_leave_date,
                   p_sex,     p_blood_grp,  p_phone1,
                   p_phone2,  p_photo,      p_add1,
                   p_add2,    p_city,       p_state,
                   p_pincode, p_email_id,   sysdate,
                   p_ent_user,p_ent_term,   systimestamp
                  );
        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           p_time_stamp := systimestamp;
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
  END prc_emp_ins;
   
  ---------------------------------------------------
  procedure prc_emp_upd(p_branch EMP_MAS.BRANCH%type,
                        p_entity_id EMP_MAS.ENTITY_ID%type,
                        p_gr_no EMP_MAS.GR_NO%type,
                        p_f_name EMP_MAS.F_NAME%type,
                        p_m_name EMP_MAS.M_NAME%type,
                        p_l_name EMP_MAS.L_NAME%type,
                        p_dob EMP_MAS.DOB%type,
                        p_doj EMP_MAS.DOJ%type,
                        p_leave_date EMP_MAS.LEAVE_DATE%type,
                        p_sex EMP_MAS.SEX%type,
                        p_blood_grp EMP_MAS.BLOOD_GRP%type,
                        p_phone1 EMP_MAS.PHONE1%type,
                        p_phone2 EMP_MAS.PHONE2%type,
                        p_photo EMP_MAS.PHOTO%type,
                        p_add1 EMP_MAS.ADD1%type,
                        p_add2 EMP_MAS.ADD2%type,
                        p_city EMP_MAS.CITY%type,
                        p_state EMP_MAS.STATE%type,
                        p_pincode EMP_MAS.PINCODE%type,
                        p_email_id EMP_MAS.EMAIL_ID%type,
                        p_upd_user EMP_MAS.UPD_USER%type,
                        p_upd_term EMP_MAS.UPD_TERM%type,
                        p_time_stamp in out EMP_MAS.TIME_STAMP%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                      ) AS
  v_cnt number(2);
  BEGIN
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_upd
    UPDATE EMP_MAS  SET GR_NO      = p_gr_no, 
                        F_NAME     = p_f_name, 
                        M_NAME     = p_m_name, 
                        L_NAME     = p_l_name, 
                        DOB        = p_dob, 
                        DOJ        = p_doj, 
                        LEAVE_DATE = p_leave_date, 
                        SEX        = p_sex,
                        BLOOD_GRP  = p_blood_grp, 
                        PHONE1     = p_phone1, 
                        PHONE2     = p_phone2, 
                        PHOTO      = p_photo,
                        ADD1       = p_add1,
                        ADD2       = p_add2,
                        CITY       = p_city,
                        STATE      = p_state,
                        PINCODE    = p_pincode,
                        EMAIL_ID   = p_email_id,
                        UPD_DATE   = sysdate,
                        UPD_USER   = p_upd_user,
                        UPD_TERM   = p_upd_term,
                        TIME_STAMP = SYSTIMESTAMP
                  where branch = p_branch
                        and ENTITY_ID = p_entity_id
                        and TIME_STAMP = p_time_stamp;
    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   emp_mas a
       where  a.branch = p_branch
              and a.entity_id = p_entity_id
              and a.time_stamp = p_time_stamp;
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
  END prc_emp_upd;

  ---------------------------------------------------
  procedure prc_emp_del(p_branch EMP_MAS.BRANCH%type,
                        p_entity_id EMP_MAS.ENTITY_ID%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       ) AS
  BEGIN
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
    delete from emp_mas a
          where a.branch = p_branch
                and a.entity_id = p_entity_id;

    if sql%rowcount > 0 then
       p_flg:= 'Y';
       p_msg:= sql%rowcount || ' record(s) deleted successfully!';
    else
       p_flg := 'T';
       p_msg := 'Please refresh once. As some contain change by another user!';
       return;
    end if;
  END prc_emp_del;
  ---------------------------------------------------
  procedure prc_emp_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ) as
  v_str varchar2(1000);
  begin
     v_str := 'select *
               from   emp_mas a
               where  1 = 1
                      and ' ||p_criteria;
     open p_data for v_str;
  end;
END PKG_EMP_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_ENTITY_TYPE_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_ENTITY_TYPE_MAS" AS

  procedure prc_fetch_data(p_criteria varchar2, p_data out ref_cur) AS
  BEGIN
    -- TODO: Implementation required for procedure PKG_ENTITY_TYPE_MAS.prc_fetch_data
    open p_data for 
         select * from ENTITY_TYPE_MAS a;

    exception when others then
      RAISE_APPLICATION_ERROR(-20001, 'Problem in Fetching Entity Type Master');
  END prc_fetch_data;

END PKG_ENTITY_TYPE_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_STUDENT_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_STUDENT_MAS" AS

  procedure prc_stud_ins(p_data out ref_cur) AS
  BEGIN
    -- TODO: Implementation required for procedure PKG_STUDENT_MAS.prc_stud_ins
    NULL;
  END prc_stud_ins;

  procedure prc_stud_upd(p_data out ref_cur) AS
  BEGIN
    -- TODO: Implementation required for procedure PKG_STUDENT_MAS.prc_stud_upd
    NULL;
  END prc_stud_upd;

  procedure prc_stud_del(p_data out ref_cur) AS
  BEGIN
    -- TODO: Implementation required for procedure PKG_STUDENT_MAS.prc_stud_del
    NULL;
  END prc_stud_del;

END PKG_STUDENT_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_STUDY_LEVEL_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_STUDY_LEVEL_MAS" AS

  procedure prc_mas_ins(p_branch_id  STUDY_LEVEL_MAS.branch%type,
                        p_std_id STUDY_LEVEL_MAS.STD_ID%type,
                        p_std_level STUDY_LEVEL_MAS.STD_LEVEL%type,
                        p_std_med STUDY_LEVEL_MAS.STD_MEDIUM%type,
                        p_std_type STUDY_LEVEL_MAS.STD_TYPE%type,
                        p_std_name STUDY_LEVEL_MAS.STD_NAME%type,
                        p_is_active STUDY_LEVEL_MAS.IS_ACTIVE%type,
                        p_ent_user STUDY_LEVEL_MAS.ENT_USER%type,
                        p_ent_term STUDY_LEVEL_MAS.ENT_TERM%type,
                        p_time_stamp in out STUDY_LEVEL_MAS.TIME_STAMP%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                      ) AS
  BEGIN
    -- TODO: Implementation required for procedure PKG_STUDY_LEVEL_MAS.prc_mas_ins
    begin
        INSERT INTO STUDY_LEVEL_MAS
                  (
                    BRANCH,  STD_ID,   STD_LEVEL, STD_MEDIUM,
                    STD_TYPE,   STD_NAME, IS_ACTIVE,
                    ENT_DATE,   ENT_USER, ENT_TERM,
                    TIME_STAMP
                  )
                  VALUES
                  (p_branch_id, p_std_id,   p_std_level,p_std_med,
                   p_std_type,  p_std_name, p_is_active,
                   sysdate,     p_ent_user, p_ent_term,
                   systimestamp
                  );
        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           p_time_stamp := systimestamp;
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
  END prc_mas_ins;

  procedure prc_mas_upd(p_branch_id  STUDY_LEVEL_MAS.branch%type,
                      p_std_id STUDY_LEVEL_MAS.STD_ID%type,
                      p_std_level STUDY_LEVEL_MAS.STD_LEVEL%type,
                      p_std_med STUDY_LEVEL_MAS.STD_MEDIUM%type,
                      p_std_type STUDY_LEVEL_MAS.STD_TYPE%type,
                      p_std_name STUDY_LEVEL_MAS.STD_NAME%type,
                      p_is_active STUDY_LEVEL_MAS.IS_ACTIVE%type,
                      p_upd_user STUDY_LEVEL_MAS.UPD_USER%type,
                      p_upd_term STUDY_LEVEL_MAS.UPD_TERM%type,
                      p_time_stamp in out STUDY_LEVEL_MAS.TIME_STAMP%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                    ) AS
  v_cnt number(2);
  BEGIN
    -- TODO: Implementation required for procedure PKG_STUDY_LEVEL_MAS.prc_mas_upd
    UPDATE STUDY_LEVEL_MAS
      SET 
           BRANCH = p_branch_id, 
           STD_LEVEL   = p_std_level,
           STD_MEDIUM = p_std_med,
           STD_TYPE    = p_std_type,
           STD_NAME    = p_std_name,
           IS_ACTIVE   = p_is_active,
           UPD_DATE    = sysdate,
           UPD_USER    = p_upd_user,
           UPD_TERM    = p_upd_term,
           TIME_STAMP  = SYSTIMESTAMP
    where  branch = p_branch_id
           and std_id = p_std_id
           and TIME_STAMP = p_time_stamp;
           
    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   STUDY_LEVEL_MAS a
       where  a.branch = p_branch_id
              and a.std_id = p_std_id
              and a.time_stamp = p_time_stamp;
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
  END prc_mas_upd;

  procedure prc_mas_del(p_branch_id STUDY_LEVEL_MAS.branch%type,
                      p_std_id STUDY_LEVEL_MAS.STD_ID%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                     ) AS
  BEGIN
    -- TODO: Implementation required for procedure PKG_STUDY_LEVEL_MAS.prc_mas_del
    delete from STUDY_LEVEL_MAS a
          where a.branch = p_branch_id
                and a.std_id = p_std_id;

    if sql%rowcount > 0 then
       p_flg:= 'Y';
       p_msg:= sql%rowcount || ' record(s) deleted successfully!';
    else
       p_flg := 'T';
       p_msg := 'Please refresh once. As some contain change by another user!';
       return;
    end if;
  END prc_mas_del;

  procedure prc_get_data(p_criteria varchar2,
                       p_data out ref_cur
                      ) AS
  v_str varchar2(1000);
  begin
     v_str := 'select *
               from   STUDY_LEVEL_MAS a
               where  1 = 1
                      and ' ||p_criteria;
     open p_data for v_str;
  end;

END PKG_STUDY_LEVEL_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_SUB_ALLOCATION
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_SUB_ALLOCATION" AS

  procedure prc_mas_ins( p_branch sub_allocation.branch%type,
                         p_allocation_id out sub_allocation.allocation_id%type,
                         p_batch_id sub_allocation.batch_id%type,
                         p_entity_id sub_allocation.entity_id%type,
                         p_entity_type_id sub_allocation.entity_type_id%type,
                         p_ref_sub_id sub_allocation.ref_sub_id%type,
                         p_is_active sub_allocation.is_active%type,
                         p_remark sub_allocation.remark%type,
                         p_ent_date sub_allocation.ent_date%type,
                         p_ent_term sub_allocation.ent_term%type,
                         p_ent_user sub_allocation.ent_user%type,
                         p_time_stamp out sub_allocation.time_stamp%type,
                         p_flg out varchar2,
                         p_msg out varchar2
                       ) as
  begin
    begin
      insert into sub_allocation
          (branch,         batch_id,   entity_id,
           entity_type_id, ref_sub_id, is_active,
           remark,         ent_date,   ent_term,
           ent_user,       time_stamp, allocation_id
          )
        values
          (p_branch,         p_batch_id,   p_entity_id,
           p_entity_type_id, p_ref_sub_id, p_is_active,
           p_remark,         p_ent_date,   p_ent_term,
           p_ent_user,       systimestamp, 1/*p_allocation_id*/
          );

        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           p_time_stamp := systimestamp;
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
  end;
  ---------------------------------------
  procedure prc_mas_upd( p_branch sub_allocation.branch%type,
                         p_allocation_id sub_allocation.allocation_id%type,
                         p_batch_id sub_allocation.batch_id%type,
                         p_entity_id sub_allocation.entity_id%type,
                         p_entity_type_id sub_allocation.entity_type_id%type,
                         p_ref_sub_id sub_allocation.ref_sub_id%type,
                         p_is_active sub_allocation.is_active%type,
                         p_remark sub_allocation.remark%type,
                         p_upd_date sub_allocation.ent_date%type,
                         p_upd_term sub_allocation.ent_term%type,
                         p_upd_user sub_allocation.ent_user%type,
                         p_time_stamp in out sub_allocation.time_stamp%type,
                         p_flg out varchar2,
                         p_msg out varchar2
                       ) as
  v_cnt number(3);
  begin

     update sub_allocation
        set branch = p_branch,
            batch_id = p_batch_id,
            entity_id = p_entity_id,
            entity_type_id = p_entity_type_id,
            ref_sub_id = p_ref_sub_id,
            is_active = p_is_active,
            remark = p_remark,
            upd_date = p_upd_date,
            upd_user = p_upd_user,
            upd_term = p_upd_term,
            time_stamp = systimestamp
      where allocation_id = p_allocation_id
            and time_stamp = p_time_stamp;


    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   sub_allocation a
       where  allocation_id = p_allocation_id
              and a.time_stamp = p_time_stamp;
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
  end;


  ---------------------------------------------------
  procedure prc_mas_del(p_allocation_id sub_allocation.allocation_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       ) as
  begin
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
    delete from sub_allocation a
          where  allocation_id = p_allocation_id;

    if sql%rowcount > 0 then
       p_flg:= 'Y';
       p_msg:= sql%rowcount || ' record(s) deleted successfully!';
    else
       p_flg := 'T';
       p_msg := 'Please refresh once. As some contain change by another user!';
       return;
    end if;
  END prc_mas_del;
  ---------------------------------------------------
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ) as
  v_str varchar2(1000);
  begin
     v_str := 'select *
               from   sub_allocation a
               where  1 = 1
                      and ' ||p_criteria;
     open p_data for v_str;
  end;

END PKG_SUB_ALLOCATION;

/
--------------------------------------------------------
--  DDL for Package Body PKG_SUB_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_SUB_MAS" AS

  procedure prc_mas_ins( 
                          p_branch sub_mas.branch%type,
                          p_ref_std_id sub_mas.ref_std_id%type,
                          p_sub_id sub_mas.sub_id%type, 
                          p_sub_name sub_mas.sub_name%type, 
                          p_have_exam sub_mas.have_exam%type,
                          p_is_active sub_mas.is_active%type,
                          p_ent_date sub_mas.ent_date%type,
                          p_ent_term sub_mas.ent_term%type,
                          p_ent_user sub_mas.ent_user%type,
                          p_time_stamp out sub_mas.time_stamp%type,
                          p_flg out varchar2,
                          p_msg out varchar2
                       ) as
  begin
    begin
        insert into sub_mas
                  (
                    branch,   ref_std_id, sub_id, 
                    sub_name, have_exam,  is_active, 
                    ent_date, ent_user,   ent_term,   
                    time_stamp
                  )
                  values
                  (p_branch,    p_ref_std_id,  1/*p_sub_id*/,
                   p_sub_name,  p_have_exam,   p_is_active,
                   sysdate,     p_ent_user,    p_ent_term,   
                   systimestamp
                 );
        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           p_time_stamp := systimestamp;
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
  end;
  ---------------------------------------
  procedure prc_mas_upd( 
                          p_branch sub_mas.branch%type,
                          p_ref_std_id sub_mas.ref_std_id%type,
                          p_sub_id sub_mas.sub_id%type, 
                          p_sub_name sub_mas.sub_name%type, 
                          p_have_exam sub_mas.have_exam%type,
                          p_is_active sub_mas.is_active%type,
                          p_upd_date sub_mas.ent_date%type,
                          p_upd_term sub_mas.ent_term%type,
                          p_upd_user sub_mas.ent_user%type,
                          p_time_stamp in out sub_mas.time_stamp%type,
                          p_flg out varchar2,
                          p_msg out varchar2
                       ) as
  v_cnt number(3);
  begin
    
     update sub_mas set ref_std_id = p_ref_std_id,
                        sub_name = p_sub_name,
                        have_exam = p_have_exam,
                        is_active = p_is_active,
                        upd_date   = sysdate,
                        upd_user   = p_upd_user,
                        upd_term   = p_upd_term,
                        time_stamp = systimestamp
                  where branch = p_branch
                        and sub_id = p_sub_id
                        and time_stamp = p_time_stamp;
    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   sub_mas a
       where  a.branch = p_branch
              and sub_id = p_sub_id
              and a.time_stamp = p_time_stamp;
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
  end;
  
  
  ---------------------------------------------------
  procedure prc_mas_del(p_branch sub_mas.branch%type,
                        p_sub_id sub_mas.sub_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       ) as
  begin
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
    delete from sub_mas a
          where a.branch = p_branch
                and a.sub_id = p_sub_id;

    if sql%rowcount > 0 then
       p_flg:= 'Y';
       p_msg:= sql%rowcount || ' record(s) deleted successfully!';
    else
       p_flg := 'T';
       p_msg := 'Please refresh once. As some contain change by another user!';
       return;
    end if;
  END prc_mas_del;
  ---------------------------------------------------
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_sub_data out ref_cur,
                             p_chp_data out ref_cur
                            ) as
  v_str varchar2(1000);
  begin
     v_str := 'select *
               from   sub_mas a
               where  1 = 1
                      and ' ||p_criteria;
     open p_sub_data for v_str;
     
     v_str := 'select *
                 from chp_det c
                where ' || p_criteria;
    open p_chp_data for v_str;            
  end;

END PKG_SUB_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_TUITION_BASE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_TUITION_BASE" 
AS
  --
  --
  --Get Grid fields
  --
  --
  PROCEDURE prc_fetch_grid_fields(
      p_menu_name VARCHAR2,
      p_ctrl_name VARCHAR2,
      p_data OUT ref_cur)
  AS
  BEGIN
    -- TODO: Implementation required for procedure
    -- PKG_TUTIION_BASE.prc_fetch_grid_fields
    OPEN p_data FOR SELECT a.MENU_NAME , a.CTRL_NAME , a.DATA_FIELD_NAME , a.FIELD_SIZE , a.DISP_NAME , a.COL_TYPE , a.COMBO_FLG , a.COMBO_BIND_ID , a.EXCEL_FIELD_NAME , a.REMARK , a.EXTRA_REMARK , a.ORD FROM GRID_FIEDLS a WHERE a.MENU_NAME = p_menu_name AND a.CTRL_NAME = p_ctrl_name;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, 'Problem in Fetching Grid Fields Data');
  END prc_fetch_grid_fields;
--
--
--Get Active Subjects
--
--
  PROCEDURE prc_get_sub_list(
      p_std_id         VARCHAR2,
      p_subject_status VARCHAR2,
      p_data OUT ref_cur)
  AS
  BEGIN
    OPEN p_data FOR SELECT s.REF_STD_ID, s.SUB_ID, s.SUB_NAME FROM SUB_MAS S WHERE S.REF_STD_ID = NVL(to_number(P_STD_ID),S.REF_STD_ID) AND S.IS_ACTIVE = p_subject_status;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching Subject Details');
  END;
--
--
-- Get Chapter Details with Subject
--
--
  PROCEDURE prc_get_chp_list(
      p_sub_id VARCHAR2,
      p_data OUT ref_cur)
  AS
  BEGIN
    OPEN p_data FOR SELECT C.SEQNO , C.REF_SUB_ID , C.CHP_ID, C.CHP_NAME, C.DESCRIPTION, C.REMARK, C.TIME_STAMP FROM CHP_DET C WHERE c.ref_sub_id = TO_NUMBER(p_sub_id);
  EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching Chapter Details');
  END;
--
--
-- Get Std Type
--
--
  PROCEDURE prc_get_std_type(
      p_data OUT ref_cur)
  AS
  BEGIN
    OPEN P_DATA FOR SELECT 'Gujarati'
  AS
    DISP_OPTION , 1
  AS
    value_member , 1 ord FROM dual
    UNION ALL
    SELECT 'English' , 2 , 2 FROM dual ORDER BY ord;
  END;
--
-- Get Std Combo Active/InActive
--
  PROCEDURE prc_get_std_list(
      p_branch     VARCHAR2,
      p_std_status VARCHAR2,
      p_std_list OUT ref_cur )
  AS
  BEGIN
    OPEN p_std_list FOR SELECT a.STD_ID,
    a.STD_LEVEL || ' - ' || a.STD_NAME || ' - ' || a.STD_TYPE
  AS
    STD_NAME FROM study_level_mas a WHERE a.BRANCH = nvl(p_branch,a.BRANCH) AND a.is_active = p_std_status;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching Std List');
  END;
  
  PROCEDURE prc_get_std_medium(
    p_data OUT ref_cur)
AS
BEGIN
  OPEN P_DATA FOR SELECT 'GBSE' AS DISP_OPTION , 1 AS value_member , 1 ord FROM dual
  UNION ALL
  SELECT 'CBSE' , 2 , 2 FROM dual
  UNION ALL
  SELECT 'ICSE' , 3 , 3 FROM dual ORDER BY 3;
EXCEPTION
WHEN OTHERS THEN
  RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching Std Medium');
  end;
END PKG_TUiTION_BASE;

/
--------------------------------------------------------
--  DDL for Procedure ADD_JOB_HISTORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "HR"."ADD_JOB_HISTORY" 
  (  p_emp_id          job_history.employee_id%type
   , p_start_date      job_history.start_date%type
   , p_end_date        job_history.end_date%type
   , p_job_id          job_history.job_id%type
   , p_department_id   job_history.department_id%type
   )
IS
BEGIN
  INSERT INTO job_history (employee_id, start_date, end_date,
                           job_id, department_id)
    VALUES(p_emp_id, p_start_date, p_end_date, p_job_id, p_department_id);
END add_job_history;

/
--------------------------------------------------------
--  DDL for Procedure SECURE_DML
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "HR"."SECURE_DML" 
IS
BEGIN
  IF TO_CHAR (SYSDATE, 'HH24:MI') NOT BETWEEN '08:00' AND '18:00'
        OR TO_CHAR (SYSDATE, 'DY') IN ('SAT', 'SUN') THEN
	RAISE_APPLICATION_ERROR (-20205,
		'You may only make changes during normal office hours');
  END IF;
END secure_dml;

/
