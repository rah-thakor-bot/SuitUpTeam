--------------------------------------------------------
--  File created - Friday-August-21-2015   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence DEPARTMENTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."DEPARTMENTS_SEQ"  MINVALUE 1 MAXVALUE 9990 INCREMENT BY 10 START WITH 280 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence EMPLOYEES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."EMPLOYEES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 207 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence LOCATIONS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."LOCATIONS_SEQ"  MINVALUE 1 MAXVALUE 9900 INCREMENT BY 100 START WITH 3300 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ENTITY_ID
--------------------------------------------------------

   CREATE SEQUENCE  "HR"."SEQ_ENTITY_ID"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 33 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table BATCH_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."BATCH_MAS" 
   (	"BRANCH" VARCHAR2(20 BYTE), 
	"BATCH_ID" NUMBER, 
	"BATCH_NAME" VARCHAR2(50 BYTE), 
	"REF_SUB_ID" NUMBER, 
	"REF_T_ENTITY_ID" NUMBER, 
	"FR_TIME" NUMBER, 
	"TO_TIME" NUMBER, 
	"ENT_DATE" DATE, 
	"ENT_TERM" VARCHAR2(20 BYTE), 
	"ENT_USER" VARCHAR2(20 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(20 BYTE), 
	"UPD_TERM" VARCHAR2(20 BYTE), 
	"TIME_STAMP" TIMESTAMP (6), 
	"IS_ACTIVE" VARCHAR2(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BRANCH_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."BRANCH_MAS" 
   (	"BRANCH_ID" VARCHAR2(30 BYTE), 
	"BRANCH_NAME" VARCHAR2(100 BYTE), 
	"BRANCH_ADR" VARCHAR2(200 BYTE), 
	"REMARK" VARCHAR2(200 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 1048576 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CHP_DET
--------------------------------------------------------

  CREATE TABLE "HR"."CHP_DET" 
   (	"SEQNO" NUMBER(5,0), 
	"REF_SUB_ID" NUMBER, 
	"CHP_ID" NUMBER, 
	"CHP_NAME" VARCHAR2(50 BYTE), 
	"DESCRIPTION" VARCHAR2(100 BYTE), 
	"REMARK" VARCHAR2(100 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(20 BYTE), 
	"ENT_TERM" VARCHAR2(20 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(20 BYTE), 
	"UPD_TERM" VARCHAR2(20 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table COUNTRIES
--------------------------------------------------------

  CREATE TABLE "HR"."COUNTRIES" 
   (	"COUNTRY_ID" CHAR(2 BYTE), 
	"COUNTRY_NAME" VARCHAR2(40 BYTE), 
	"REGION_ID" NUMBER, 
	 CONSTRAINT "COUNTRY_C_ID_PK" PRIMARY KEY ("COUNTRY_ID") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" 
 PCTTHRESHOLD 50;
 

   COMMENT ON COLUMN "HR"."COUNTRIES"."COUNTRY_ID" IS 'Primary key of countries table.';
 
   COMMENT ON COLUMN "HR"."COUNTRIES"."COUNTRY_NAME" IS 'Country name';
 
   COMMENT ON COLUMN "HR"."COUNTRIES"."REGION_ID" IS 'Region ID for the country. Foreign key to region_id column in the departments table.';
 
   COMMENT ON TABLE "HR"."COUNTRIES"  IS 'country table. Contains 25 rows. References with locations table.';
--------------------------------------------------------
--  DDL for Table DEPARTMENTS
--------------------------------------------------------

  CREATE TABLE "HR"."DEPARTMENTS" 
   (	"DEPARTMENT_ID" NUMBER(4,0), 
	"DEPARTMENT_NAME" VARCHAR2(30 BYTE), 
	"MANAGER_ID" NUMBER(6,0), 
	"LOCATION_ID" NUMBER(4,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
 

   COMMENT ON COLUMN "HR"."DEPARTMENTS"."DEPARTMENT_ID" IS 'Primary key column of departments table.';
 
   COMMENT ON COLUMN "HR"."DEPARTMENTS"."DEPARTMENT_NAME" IS 'A not null column that shows name of a department. Administration,
Marketing, Purchasing, Human Resources, Shipping, IT, Executive, Public
Relations, Sales, Finance, and Accounting. ';
 
   COMMENT ON COLUMN "HR"."DEPARTMENTS"."MANAGER_ID" IS 'Manager_id of a department. Foreign key to employee_id column of employees table. The manager_id column of the employee table references this column.';
 
   COMMENT ON COLUMN "HR"."DEPARTMENTS"."LOCATION_ID" IS 'Location id where a department is located. Foreign key to location_id column of locations table.';
 
   COMMENT ON TABLE "HR"."DEPARTMENTS"  IS 'Departments table that shows details of departments where employees
work. Contains 27 rows; references with locations, employees, and job_history tables.';
--------------------------------------------------------
--  DDL for Table EMPLOYEES
--------------------------------------------------------

  CREATE TABLE "HR"."EMPLOYEES" 
   (	"EMPLOYEE_ID" NUMBER(6,0), 
	"FIRST_NAME" VARCHAR2(20 BYTE), 
	"LAST_NAME" VARCHAR2(25 BYTE), 
	"EMAIL" VARCHAR2(25 BYTE), 
	"PHONE_NUMBER" VARCHAR2(20 BYTE), 
	"HIRE_DATE" DATE, 
	"JOB_ID" VARCHAR2(10 BYTE), 
	"SALARY" NUMBER(8,2), 
	"COMMISSION_PCT" NUMBER(2,2), 
	"MANAGER_ID" NUMBER(6,0), 
	"DEPARTMENT_ID" NUMBER(4,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
 

   COMMENT ON COLUMN "HR"."EMPLOYEES"."EMPLOYEE_ID" IS 'Primary key of employees table.';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."FIRST_NAME" IS 'First name of the employee. A not null column.';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."LAST_NAME" IS 'Last name of the employee. A not null column.';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."EMAIL" IS 'Email id of the employee';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."PHONE_NUMBER" IS 'Phone number of the employee; includes country code and area code';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."HIRE_DATE" IS 'Date when the employee started on this job. A not null column.';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."JOB_ID" IS 'Current job of the employee; foreign key to job_id column of the
jobs table. A not null column.';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."SALARY" IS 'Monthly salary of the employee. Must be greater
than zero (enforced by constraint emp_salary_min)';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."COMMISSION_PCT" IS 'Commission percentage of the employee; Only employees in sales
department elgible for commission percentage';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."MANAGER_ID" IS 'Manager id of the employee; has same domain as manager_id in
departments table. Foreign key to employee_id column of employees table.
(useful for reflexive joins and CONNECT BY query)';
 
   COMMENT ON COLUMN "HR"."EMPLOYEES"."DEPARTMENT_ID" IS 'Department id where employee works; foreign key to department_id
column of the departments table';
 
   COMMENT ON TABLE "HR"."EMPLOYEES"  IS 'employees table. Contains 107 rows. References with departments,
jobs, job_history tables. Contains a self reference.';
--------------------------------------------------------
--  DDL for Table EMP_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."EMP_MAS" 
   (	"BRANCH" VARCHAR2(20 BYTE), 
	"ENTITY_ID" NUMBER(4,0), 
	"GR_NO" NUMBER(4,0), 
	"F_NAME" VARCHAR2(20 BYTE), 
	"M_NAME" VARCHAR2(20 BYTE), 
	"L_NAME" VARCHAR2(20 BYTE), 
	"DOB" DATE, 
	"DOJ" DATE, 
	"LEAVE_DATE" DATE, 
	"SEX" VARCHAR2(1 BYTE), 
	"BLOOD_GRP" VARCHAR2(10 BYTE), 
	"PHONE1" NUMBER(10,0), 
	"PHONE2" NUMBER(10,0), 
	"PHOTO" CLOB, 
	"ADD1" VARCHAR2(100 BYTE), 
	"ADD2" VARCHAR2(100 BYTE), 
	"CITY" VARCHAR2(20 BYTE), 
	"STATE" VARCHAR2(20 BYTE), 
	"PINCODE" NUMBER(10,0), 
	"EMAIL_ID" VARCHAR2(50 BYTE), 
	"ENT_DATE" VARCHAR2(30 BYTE), 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("PHOTO") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
 

   COMMENT ON COLUMN "HR"."EMP_MAS"."GR_NO" IS 'GENRAL NUMBER';
--------------------------------------------------------
--  DDL for Table ENTITY_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."ENTITY_MAS" 
   (	"ENTITY_ID" NUMBER, 
	"ENTITY_TYPE_ID" NUMBER, 
	"ENTITY_NAME" VARCHAR2(50 BYTE), 
	"IS_ACTIVE" VARCHAR2(1 BYTE), 
	"ENT_DATE" VARCHAR2(30 BYTE), 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ENTITY_TYPE_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."ENTITY_TYPE_MAS" 
   (	"ENTITY_TYPE_ID" NUMBER, 
	"ENTITY_TYPE_NAME" VARCHAR2(30 BYTE), 
	"IS_ACTIVE" VARCHAR2(1 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EXAM_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."EXAM_MAS" 
   (	"BRANCH" VARCHAR2(10 BYTE), 
	"BATCH_ID" NUMBER, 
	"EXAM_ID" NUMBER, 
	"REF_SUB_ID" NUMBER, 
	"TOTAL_MARK" NUMBER, 
	"EXAM_TYPE" VARCHAR2(10 BYTE), 
	"TYPE_DET" VARCHAR2(10 BYTE), 
	"PAPER_SET_BY" VARCHAR2(50 BYTE), 
	"EXAM_DATE" DATE, 
	"EXAM_TIME" VARCHAR2(20 BYTE), 
	"DURATION" VARCHAR2(50 BYTE), 
	"SUPERVISOR" VARCHAR2(50 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_TERM" VARCHAR2(20 BYTE), 
	"ENT_USER" VARCHAR2(20 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(20 BYTE), 
	"UPD_TERM" VARCHAR2(20 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "HR"."EXAM_MAS"."EXAM_TYPE" IS '(MCQ/THEORY)
';
 
   COMMENT ON COLUMN "HR"."EXAM_MAS"."TYPE_DET" IS '(CHAPTER/FULL)
';
--------------------------------------------------------
--  DDL for Table FLG_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."FLG_MAS" 
   (	"FLG_ID" NUMBER, 
	"FLG_SH_NAME" VARCHAR2(20 BYTE), 
	"FLG_NAME" VARCHAR2(20 BYTE), 
	"REMARK" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table GRID_FIELDS
--------------------------------------------------------

  CREATE TABLE "HR"."GRID_FIELDS" 
   (	"MENU_NAME" VARCHAR2(50 BYTE), 
	"CTRL_NAME" VARCHAR2(30 BYTE), 
	"DATA_FIELD_NAME" VARCHAR2(30 BYTE), 
	"FIELD_SIZE" NUMBER(3,0) DEFAULT 40, 
	"DISP_NAME" VARCHAR2(50 BYTE), 
	"COL_TYPE" VARCHAR2(75 BYTE), 
	"COMBO_FLG" VARCHAR2(20 BYTE), 
	"COMBO_BIND_ID" VARCHAR2(20 BYTE), 
	"EXCEL_FIELD_NAME" VARCHAR2(20 BYTE), 
	"REMARK" VARCHAR2(50 BYTE), 
	"EXTRA_REMARK" VARCHAR2(50 BYTE), 
	"ORD" NUMBER(4,0), 
	"SEQNO" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table JOBS
--------------------------------------------------------

  CREATE TABLE "HR"."JOBS" 
   (	"JOB_ID" VARCHAR2(10 BYTE), 
	"JOB_TITLE" VARCHAR2(35 BYTE), 
	"MIN_SALARY" NUMBER(6,0), 
	"MAX_SALARY" NUMBER(6,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
 

   COMMENT ON COLUMN "HR"."JOBS"."JOB_ID" IS 'Primary key of jobs table.';
 
   COMMENT ON COLUMN "HR"."JOBS"."JOB_TITLE" IS 'A not null column that shows job title, e.g. AD_VP, FI_ACCOUNTANT';
 
   COMMENT ON COLUMN "HR"."JOBS"."MIN_SALARY" IS 'Minimum salary for a job title.';
 
   COMMENT ON COLUMN "HR"."JOBS"."MAX_SALARY" IS 'Maximum salary for a job title';
 
   COMMENT ON TABLE "HR"."JOBS"  IS 'jobs table with job titles and salary ranges. Contains 19 rows.
References with employees and job_history table.';
--------------------------------------------------------
--  DDL for Table JOB_HISTORY
--------------------------------------------------------

  CREATE TABLE "HR"."JOB_HISTORY" 
   (	"EMPLOYEE_ID" NUMBER(6,0), 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"JOB_ID" VARCHAR2(10 BYTE), 
	"DEPARTMENT_ID" NUMBER(4,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
 

   COMMENT ON COLUMN "HR"."JOB_HISTORY"."EMPLOYEE_ID" IS 'A not null column in the complex primary key employee_id+start_date.
Foreign key to employee_id column of the employee table';
 
   COMMENT ON COLUMN "HR"."JOB_HISTORY"."START_DATE" IS 'A not null column in the complex primary key employee_id+start_date.
Must be less than the end_date of the job_history table. (enforced by
constraint jhist_date_interval)';
 
   COMMENT ON COLUMN "HR"."JOB_HISTORY"."END_DATE" IS 'Last day of the employee in this job role. A not null column. Must be
greater than the start_date of the job_history table.
(enforced by constraint jhist_date_interval)';
 
   COMMENT ON COLUMN "HR"."JOB_HISTORY"."JOB_ID" IS 'Job role in which the employee worked in the past; foreign key to
job_id column in the jobs table. A not null column.';
 
   COMMENT ON COLUMN "HR"."JOB_HISTORY"."DEPARTMENT_ID" IS 'Department id in which the employee worked in the past; foreign key to deparment_id column in the departments table';
 
   COMMENT ON TABLE "HR"."JOB_HISTORY"  IS 'Table that stores job history of the employees. If an employee
changes departments within the job or changes jobs within the department,
new rows get inserted into this table with old job information of the
employee. Contains a complex primary key: employee_id+start_date.
Contains 25 rows. References with jobs, employees, and departments tables.';
--------------------------------------------------------
--  DDL for Table LOCATIONS
--------------------------------------------------------

  CREATE TABLE "HR"."LOCATIONS" 
   (	"LOCATION_ID" NUMBER(4,0), 
	"STREET_ADDRESS" VARCHAR2(40 BYTE), 
	"POSTAL_CODE" VARCHAR2(12 BYTE), 
	"CITY" VARCHAR2(30 BYTE), 
	"STATE_PROVINCE" VARCHAR2(25 BYTE), 
	"COUNTRY_ID" CHAR(2 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
 

   COMMENT ON COLUMN "HR"."LOCATIONS"."LOCATION_ID" IS 'Primary key of locations table';
 
   COMMENT ON COLUMN "HR"."LOCATIONS"."STREET_ADDRESS" IS 'Street address of an office, warehouse, or production site of a company.
Contains building number and street name';
 
   COMMENT ON COLUMN "HR"."LOCATIONS"."POSTAL_CODE" IS 'Postal code of the location of an office, warehouse, or production site
of a company. ';
 
   COMMENT ON COLUMN "HR"."LOCATIONS"."CITY" IS 'A not null column that shows city where an office, warehouse, or
production site of a company is located. ';
 
   COMMENT ON COLUMN "HR"."LOCATIONS"."STATE_PROVINCE" IS 'State or Province where an office, warehouse, or production site of a
company is located.';
 
   COMMENT ON COLUMN "HR"."LOCATIONS"."COUNTRY_ID" IS 'Country where an office, warehouse, or production site of a company is
located. Foreign key to country_id column of the countries table.';
 
   COMMENT ON TABLE "HR"."LOCATIONS"  IS 'Locations table that contains specific address of a specific office,
warehouse, and/or production site of a company. Does not store addresses /
locations of customers. Contains 23 rows; references with the
departments and countries tables. ';
--------------------------------------------------------
--  DDL for Table MONEY_FLOW
--------------------------------------------------------

  CREATE TABLE "HR"."MONEY_FLOW" 
   (	"BRANCH" VARCHAR2(10 BYTE), 
	"TRN_ID" NUMBER, 
	"TRN_TYPE" VARCHAR2(1 BYTE), 
	"FROM_TYPE" NUMBER, 
	"FROM_ENTITY_ID" NUMBER, 
	"TO_TYPE" NUMBER, 
	"TO_ENTITY_ID" NUMBER, 
	"AMT" NUMBER(10,2), 
	"T_DATE" DATE, 
	"CONCERN_PRSN" VARCHAR2(50 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_TERM" VARCHAR2(20 BYTE), 
	"ENT_USER" VARCHAR2(20 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(20 BYTE), 
	"UPD_TERM" VARCHAR2(20 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REGIONS
--------------------------------------------------------

  CREATE TABLE "HR"."REGIONS" 
   (	"REGION_ID" NUMBER, 
	"REGION_NAME" VARCHAR2(25 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Table RESULT_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."RESULT_MAS" 
   (	"EXAM_ID" NUMBER, 
	"ENTITY_ID" NUMBER, 
	"ENTITY_TYPE_ID" NUMBER, 
	"SCORE" NUMBER, 
	"REMARK" VARCHAR2(100 BYTE), 
	"SRNO" NUMBER(10,0), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SCHL_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."SCHL_MAS" 
   (	"SCHL_ID" NUMBER, 
	"SCHL_NAME" VARCHAR2(50 BYTE), 
	"ADR" VARCHAR2(50 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table STATIC_COMBO
--------------------------------------------------------

  CREATE TABLE "HR"."STATIC_COMBO" 
   (	"SRNO" NUMBER, 
	"DISP_MEM" VARCHAR2(20 BYTE), 
	"VALUE_MEM" VARCHAR2(20 BYTE), 
	"REF_SRNO" NUMBER, 
	"ORD" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table STUDY_LEVEL_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."STUDY_LEVEL_MAS" 
   (	"BRANCH" VARCHAR2(30 BYTE), 
	"STD_ID" NUMBER, 
	"STD_LEVEL" NUMBER, 
	"STD_TYPE" VARCHAR2(6 BYTE), 
	"STD_NAME" VARCHAR2(40 BYTE), 
	"IS_ACTIVE" VARCHAR2(1 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6), 
	"STD_MEDIUM" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "HR"."STUDY_LEVEL_MAS"."STD_TYPE" IS 'GBSE\CBSE\ICSE';
--------------------------------------------------------
--  DDL for Table STUD_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."STUD_MAS" 
   (	"STUD_ID" NUMBER, 
	"S_ENTITY_ID" NUMBER, 
	"S_FNAME" VARCHAR2(30 BYTE), 
	"S_MNAME" VARCHAR2(30 BYTE), 
	"S_LNAME" VARCHAR2(30 BYTE), 
	"DOB" DATE, 
	"PHOTO" CLOB, 
	"PH1" NUMBER, 
	"PH2" NUMBER, 
	"SCHL_ID" NUMBER, 
	"PER" NUMBER, 
	"DOJ" DATE, 
	"BLD_GRP" VARCHAR2(10 BYTE), 
	"SEX" VARCHAR2(1 BYTE), 
	"REMARK" VARCHAR2(150 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "USERS" 
 LOB ("PHOTO") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING ) ;
--------------------------------------------------------
--  DDL for Table SUB_ALLOCATION
--------------------------------------------------------

  CREATE TABLE "HR"."SUB_ALLOCATION" 
   (	"BRANCH" VARCHAR2(10 BYTE), 
	"BATCH_ID" NUMBER, 
	"ENTITY_ID" NUMBER, 
	"ENTITY_TYPE_ID" NUMBER, 
	"REF_SUB_ID" NUMBER, 
	"IS_ACTIVE" VARCHAR2(1 BYTE) DEFAULT 'N', 
	"REMARK" VARCHAR2(50 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_TERM" VARCHAR2(20 BYTE), 
	"ENT_USER" VARCHAR2(20 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(20 BYTE), 
	"UPD_TERM" VARCHAR2(20 BYTE), 
	"TIME_STAMP" TIMESTAMP (6), 
	"ALLOCATION_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SUB_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."SUB_MAS" 
   (	"BRANCH" VARCHAR2(20 BYTE), 
	"REF_STD_ID" NUMBER, 
	"SUB_ID" NUMBER, 
	"SUB_NAME" VARCHAR2(50 BYTE), 
	"HAVE_EXAM" VARCHAR2(1 BYTE), 
	"IS_ACTIVE" VARCHAR2(1 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_TERM" VARCHAR2(20 BYTE), 
	"ENT_USER" VARCHAR2(20 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(20 BYTE), 
	"UPD_TERM" VARCHAR2(20 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TEACHER_MAS
--------------------------------------------------------

  CREATE TABLE "HR"."TEACHER_MAS" 
   (	"TEACHER_ID" NUMBER, 
	"T_ENTITY_ID" NUMBER, 
	"T_FNAME" VARCHAR2(30 BYTE), 
	"T_MNAME" VARCHAR2(30 BYTE), 
	"T_LNAME" VARCHAR2(30 BYTE), 
	"SCHL_ID" NUMBER, 
	"EXPE" NUMBER, 
	"PH1" NUMBER, 
	"PH2" NUMBER, 
	"ADR" VARCHAR2(100 BYTE), 
	"REMARK" VARCHAR2(100 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_USER" VARCHAR2(30 BYTE), 
	"ENT_TERM" VARCHAR2(30 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(30 BYTE), 
	"UPD_TERM" VARCHAR2(30 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TIMETABLE
--------------------------------------------------------

  CREATE TABLE "HR"."TIMETABLE" 
   (	"BRANCH" VARCHAR2(10 BYTE), 
	"BATCH_ID" NUMBER, 
	"T_DATE" DATE, 
	"FR_TIME" NUMBER, 
	"TO_TIME" NUMBER, 
	"REF_SUB_ID" NUMBER, 
	"REF_T_ENTITY_ID" NUMBER, 
	"ENT_DATE" DATE, 
	"ENT_TERM" VARCHAR2(20 BYTE), 
	"ENT_USER" VARCHAR2(20 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(20 BYTE), 
	"UPD_TERM" VARCHAR2(20 BYTE), 
	"TIME_STAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TRANSACTION_SETTING
--------------------------------------------------------

  CREATE TABLE "HR"."TRANSACTION_SETTING" 
   (	"BATCH_ID" NUMBER, 
	"REF_ENTITY_TYPE_ID" NUMBER, 
	"AMOUNT" NUMBER, 
	"CASH_CHQ_RATIO" NUMBER, 
	"ALLOW_EMI" VARCHAR2(1 BYTE), 
	"ALLOW_ADVANCE" VARCHAR2(1 BYTE), 
	"NO_OF_EMI" NUMBER, 
	"DISCOUNT" NUMBER, 
	"REMARK" VARCHAR2(50 BYTE), 
	"ENT_DATE" DATE, 
	"ENT_TERM" VARCHAR2(20 BYTE), 
	"ENT_USER" VARCHAR2(20 BYTE), 
	"UPD_DATE" DATE, 
	"UPD_USER" VARCHAR2(20 BYTE), 
	"UPD_TERM" VARCHAR2(20 BYTE), 
	"TIME_STAMP" TIMESTAMP (6), 
	"SEQNO" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View EMP_DETAILS_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "HR"."EMP_DETAILS_VIEW" ("EMPLOYEE_ID", "JOB_ID", "MANAGER_ID", "DEPARTMENT_ID", "LOCATION_ID", "COUNTRY_ID", "FIRST_NAME", "LAST_NAME", "SALARY", "COMMISSION_PCT", "DEPARTMENT_NAME", "JOB_TITLE", "CITY", "STATE_PROVINCE", "COUNTRY_NAME", "REGION_NAME") AS 
  SELECT
  e.employee_id,
  e.job_id,
  e.manager_id,
  e.department_id,
  d.location_id,
  l.country_id,
  e.first_name,
  e.last_name,
  e.salary,
  e.commission_pct,
  d.department_name,
  j.job_title,
  l.city,
  l.state_province,
  c.country_name,
  r.region_name
FROM
  employees e,
  departments d,
  jobs j,
  locations l,
  countries c,
  regions r
WHERE e.department_id = d.department_id
  AND d.location_id = l.location_id
  AND l.country_id = c.country_id
  AND c.region_id = r.region_id
  AND j.job_id = e.job_id
WITH READ ONLY;
REM INSERTING into HR.BATCH_MAS
SET DEFINE OFF;
Insert into HR.BATCH_MAS (BRANCH,BATCH_ID,BATCH_NAME,REF_SUB_ID,REF_T_ENTITY_ID,FR_TIME,TO_TIME,ENT_DATE,ENT_TERM,ENT_USER,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP,IS_ACTIVE) values ('NULL',1,'TEST01',null,null,800,1000,to_date('28-07-15','DD-MM-RR'),'RAHUL-PC','RLT',to_date('28-07-15','DD-MM-RR'),'RLT','RAHUL-PC',to_timestamp('28-07-15 02:23:27.503000000 AM','DD-MM-RR HH12:MI:SSXFF AM'),'Y');
Insert into HR.BATCH_MAS (BRANCH,BATCH_ID,BATCH_NAME,REF_SUB_ID,REF_T_ENTITY_ID,FR_TIME,TO_TIME,ENT_DATE,ENT_TERM,ENT_USER,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP,IS_ACTIVE) values ('NULL',3,'tes5',null,null,null,null,to_date('28-07-15','DD-MM-RR'),'RAHUL-PC','RLT',to_date('28-07-15','DD-MM-RR'),'RLT','RAHUL-PC',to_timestamp('28-07-15 03:15:15.970000000 PM','DD-MM-RR HH12:MI:SSXFF AM'),'Y');
Insert into HR.BATCH_MAS (BRANCH,BATCH_ID,BATCH_NAME,REF_SUB_ID,REF_T_ENTITY_ID,FR_TIME,TO_TIME,ENT_DATE,ENT_TERM,ENT_USER,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP,IS_ACTIVE) values ('NULL',2,'TEST02',null,null,600,730,to_date('28-07-15','DD-MM-RR'),'RAHUL-PC','RLT',to_date('28-07-15','DD-MM-RR'),'RLT','RAHUL-PC',to_timestamp('28-07-15 02:25:31.890000000 AM','DD-MM-RR HH12:MI:SSXFF AM'),'Y');
REM INSERTING into HR.BRANCH_MAS
SET DEFINE OFF;
Insert into HR.BRANCH_MAS (BRANCH_ID,BRANCH_NAME,BRANCH_ADR,REMARK,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('T001','UDHNA','VIVEK CLASSES',null,to_date('05-07-15','DD-MM-RR'),'RLT','RAHUL-PC',null,null,null,to_timestamp('05-07-15 07:19:36.071000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
REM INSERTING into HR.CHP_DET
SET DEFINE OFF;
Insert into HR.CHP_DET (SEQNO,REF_SUB_ID,CHP_ID,CHP_NAME,DESCRIPTION,REMARK,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values (1,1,1,'INTRO','INTRO','INTRO',to_date('07-08-15','DD-MM-RR'),'TestUser','RAHUL-PC',null,null,null,to_timestamp('07-08-15 01:31:51.115000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.CHP_DET (SEQNO,REF_SUB_ID,CHP_ID,CHP_NAME,DESCRIPTION,REMARK,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values (2,1,2,'TEST','TEST','TEST',to_date('07-08-15','DD-MM-RR'),'TestUser','RAHUL-PC',null,null,null,to_timestamp('07-08-15 01:31:51.115000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.CHP_DET (SEQNO,REF_SUB_ID,CHP_ID,CHP_NAME,DESCRIPTION,REMARK,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values (3,2,1,'CHEM','TEST','TEST',to_date('07-08-15','DD-MM-RR'),'TestUser','RAHUL-PC',null,null,null,to_timestamp('07-08-15 01:36:01.441000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
REM INSERTING into HR.COUNTRIES
SET DEFINE OFF;
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('AR','Argentina',2);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('AU','Australia',3);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('BE','Belgium',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('BR','Brazil',2);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('CA','Canada',2);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('CH','Switzerland',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('CN','China',3);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('DE','Germany',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('DK','Denmark',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('EG','Egypt',4);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('FR','France',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('IL','Israel',4);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('IN','India',3);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('IT','Italy',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('JP','Japan',3);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('KW','Kuwait',4);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('ML','Malaysia',3);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('MX','Mexico',2);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('NG','Nigeria',4);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('NL','Netherlands',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('SG','Singapore',3);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('UK','United Kingdom',1);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('US','United States of America',2);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('ZM','Zambia',4);
Insert into HR.COUNTRIES (COUNTRY_ID,COUNTRY_NAME,REGION_ID) values ('ZW','Zimbabwe',4);
REM INSERTING into HR.DEPARTMENTS
SET DEFINE OFF;
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (10,'Administration',200,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (20,'Marketing',201,1800);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (30,'Purchasing',114,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (40,'Human Resources',203,2400);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (50,'Shipping',121,1500);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (60,'IT',103,1400);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (70,'Public Relations',204,2700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (80,'Sales',145,2500);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (90,'Executive',100,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (100,'Finance',108,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (110,'Accounting',205,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (120,'Treasury',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (130,'Corporate Tax',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (140,'Control And Credit',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (150,'Shareholder Services',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (160,'Benefits',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (170,'Manufacturing',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (180,'Construction',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (190,'Contracting',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (200,'Operations',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (210,'IT Support',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (220,'NOC',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (230,'IT Helpdesk',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (240,'Government Sales',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (250,'Retail Sales',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (260,'Recruiting',null,1700);
Insert into HR.DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) values (270,'Payroll',null,1700);
REM INSERTING into HR.EMPLOYEES
SET DEFINE OFF;
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (100,'Steven','King','SKING','515.123.4567',to_date('17-06-03','DD-MM-RR'),'AD_PRES',24000,null,null,90);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (101,'Neena','Kochhar','NKOCHHAR','515.123.4568',to_date('21-09-05','DD-MM-RR'),'AD_VP',17000,null,100,90);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (102,'Lex','De Haan','LDEHAAN','515.123.4569',to_date('13-01-01','DD-MM-RR'),'AD_VP',17000,null,100,90);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (103,'Alexander','Hunold','AHUNOLD','590.423.4567',to_date('03-01-06','DD-MM-RR'),'IT_PROG',9000,null,102,60);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (104,'Bruce','Ernst','BERNST','590.423.4568',to_date('21-05-07','DD-MM-RR'),'IT_PROG',6000,null,103,60);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (105,'David','Austin','DAUSTIN','590.423.4569',to_date('25-06-05','DD-MM-RR'),'IT_PROG',4800,null,103,60);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (106,'Valli','Pataballa','VPATABAL','590.423.4560',to_date('05-02-06','DD-MM-RR'),'IT_PROG',4800,null,103,60);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (107,'Diana','Lorentz','DLORENTZ','590.423.5567',to_date('07-02-07','DD-MM-RR'),'IT_PROG',4200,null,103,60);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (108,'Nancy','Greenberg','NGREENBE','515.124.4569',to_date('17-08-02','DD-MM-RR'),'FI_MGR',12008,null,101,100);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (109,'Daniel','Faviet','DFAVIET','515.124.4169',to_date('16-08-02','DD-MM-RR'),'FI_ACCOUNT',9000,null,108,100);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (110,'John','Chen','JCHEN','515.124.4269',to_date('28-09-05','DD-MM-RR'),'FI_ACCOUNT',8200,null,108,100);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (111,'Ismael','Sciarra','ISCIARRA','515.124.4369',to_date('30-09-05','DD-MM-RR'),'FI_ACCOUNT',7700,null,108,100);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (112,'Jose Manuel','Urman','JMURMAN','515.124.4469',to_date('07-03-06','DD-MM-RR'),'FI_ACCOUNT',7800,null,108,100);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (113,'Luis','Popp','LPOPP','515.124.4567',to_date('07-12-07','DD-MM-RR'),'FI_ACCOUNT',6900,null,108,100);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (114,'Den','Raphaely','DRAPHEAL','515.127.4561',to_date('07-12-02','DD-MM-RR'),'PU_MAN',11000,null,100,30);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (115,'Alexander','Khoo','AKHOO','515.127.4562',to_date('18-05-03','DD-MM-RR'),'PU_CLERK',3100,null,114,30);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (116,'Shelli','Baida','SBAIDA','515.127.4563',to_date('24-12-05','DD-MM-RR'),'PU_CLERK',2900,null,114,30);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (117,'Sigal','Tobias','STOBIAS','515.127.4564',to_date('24-07-05','DD-MM-RR'),'PU_CLERK',2800,null,114,30);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (118,'Guy','Himuro','GHIMURO','515.127.4565',to_date('15-11-06','DD-MM-RR'),'PU_CLERK',2600,null,114,30);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (119,'Karen','Colmenares','KCOLMENA','515.127.4566',to_date('10-08-07','DD-MM-RR'),'PU_CLERK',2500,null,114,30);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (120,'Matthew','Weiss','MWEISS','650.123.1234',to_date('18-07-04','DD-MM-RR'),'ST_MAN',8000,null,100,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (121,'Adam','Fripp','AFRIPP','650.123.2234',to_date('10-04-05','DD-MM-RR'),'ST_MAN',8200,null,100,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (122,'Payam','Kaufling','PKAUFLIN','650.123.3234',to_date('01-05-03','DD-MM-RR'),'ST_MAN',7900,null,100,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (123,'Shanta','Vollman','SVOLLMAN','650.123.4234',to_date('10-10-05','DD-MM-RR'),'ST_MAN',6500,null,100,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (124,'Kevin','Mourgos','KMOURGOS','650.123.5234',to_date('16-11-07','DD-MM-RR'),'ST_MAN',5800,null,100,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (125,'Julia','Nayer','JNAYER','650.124.1214',to_date('16-07-05','DD-MM-RR'),'ST_CLERK',3200,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (126,'Irene','Mikkilineni','IMIKKILI','650.124.1224',to_date('28-09-06','DD-MM-RR'),'ST_CLERK',2700,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (127,'James','Landry','JLANDRY','650.124.1334',to_date('14-01-07','DD-MM-RR'),'ST_CLERK',2400,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (128,'Steven','Markle','SMARKLE','650.124.1434',to_date('08-03-08','DD-MM-RR'),'ST_CLERK',2200,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (129,'Laura','Bissot','LBISSOT','650.124.5234',to_date('20-08-05','DD-MM-RR'),'ST_CLERK',3300,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (130,'Mozhe','Atkinson','MATKINSO','650.124.6234',to_date('30-10-05','DD-MM-RR'),'ST_CLERK',2800,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (131,'James','Marlow','JAMRLOW','650.124.7234',to_date('16-02-05','DD-MM-RR'),'ST_CLERK',2500,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (132,'TJ','Olson','TJOLSON','650.124.8234',to_date('10-04-07','DD-MM-RR'),'ST_CLERK',2100,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (133,'Jason','Mallin','JMALLIN','650.127.1934',to_date('14-06-04','DD-MM-RR'),'ST_CLERK',3300,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (134,'Michael','Rogers','MROGERS','650.127.1834',to_date('26-08-06','DD-MM-RR'),'ST_CLERK',2900,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (135,'Ki','Gee','KGEE','650.127.1734',to_date('12-12-07','DD-MM-RR'),'ST_CLERK',2400,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (136,'Hazel','Philtanker','HPHILTAN','650.127.1634',to_date('06-02-08','DD-MM-RR'),'ST_CLERK',2200,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (137,'Renske','Ladwig','RLADWIG','650.121.1234',to_date('14-07-03','DD-MM-RR'),'ST_CLERK',3600,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (138,'Stephen','Stiles','SSTILES','650.121.2034',to_date('26-10-05','DD-MM-RR'),'ST_CLERK',3200,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (139,'John','Seo','JSEO','650.121.2019',to_date('12-02-06','DD-MM-RR'),'ST_CLERK',2700,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (140,'Joshua','Patel','JPATEL','650.121.1834',to_date('06-04-06','DD-MM-RR'),'ST_CLERK',2500,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (141,'Trenna','Rajs','TRAJS','650.121.8009',to_date('17-10-03','DD-MM-RR'),'ST_CLERK',3500,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (142,'Curtis','Davies','CDAVIES','650.121.2994',to_date('29-01-05','DD-MM-RR'),'ST_CLERK',3100,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (143,'Randall','Matos','RMATOS','650.121.2874',to_date('15-03-06','DD-MM-RR'),'ST_CLERK',2600,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (144,'Peter','Vargas','PVARGAS','650.121.2004',to_date('09-07-06','DD-MM-RR'),'ST_CLERK',2500,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (145,'John','Russell','JRUSSEL','011.44.1344.429268',to_date('01-10-04','DD-MM-RR'),'SA_MAN',14000,0.4,100,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (146,'Karen','Partners','KPARTNER','011.44.1344.467268',to_date('05-01-05','DD-MM-RR'),'SA_MAN',13500,0.3,100,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (147,'Alberto','Errazuriz','AERRAZUR','011.44.1344.429278',to_date('10-03-05','DD-MM-RR'),'SA_MAN',12000,0.3,100,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (148,'Gerald','Cambrault','GCAMBRAU','011.44.1344.619268',to_date('15-10-07','DD-MM-RR'),'SA_MAN',11000,0.3,100,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (149,'Eleni','Zlotkey','EZLOTKEY','011.44.1344.429018',to_date('29-01-08','DD-MM-RR'),'SA_MAN',10500,0.2,100,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (150,'Peter','Tucker','PTUCKER','011.44.1344.129268',to_date('30-01-05','DD-MM-RR'),'SA_REP',10000,0.3,145,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (151,'David','Bernstein','DBERNSTE','011.44.1344.345268',to_date('24-03-05','DD-MM-RR'),'SA_REP',9500,0.25,145,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (152,'Peter','Hall','PHALL','011.44.1344.478968',to_date('20-08-05','DD-MM-RR'),'SA_REP',9000,0.25,145,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (153,'Christopher','Olsen','COLSEN','011.44.1344.498718',to_date('30-03-06','DD-MM-RR'),'SA_REP',8000,0.2,145,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (154,'Nanette','Cambrault','NCAMBRAU','011.44.1344.987668',to_date('09-12-06','DD-MM-RR'),'SA_REP',7500,0.2,145,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (155,'Oliver','Tuvault','OTUVAULT','011.44.1344.486508',to_date('23-11-07','DD-MM-RR'),'SA_REP',7000,0.15,145,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (156,'Janette','King','JKING','011.44.1345.429268',to_date('30-01-04','DD-MM-RR'),'SA_REP',10000,0.35,146,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (157,'Patrick','Sully','PSULLY','011.44.1345.929268',to_date('04-03-04','DD-MM-RR'),'SA_REP',9500,0.35,146,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (158,'Allan','McEwen','AMCEWEN','011.44.1345.829268',to_date('01-08-04','DD-MM-RR'),'SA_REP',9000,0.35,146,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (159,'Lindsey','Smith','LSMITH','011.44.1345.729268',to_date('10-03-05','DD-MM-RR'),'SA_REP',8000,0.3,146,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (160,'Louise','Doran','LDORAN','011.44.1345.629268',to_date('15-12-05','DD-MM-RR'),'SA_REP',7500,0.3,146,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (161,'Sarath','Sewall','SSEWALL','011.44.1345.529268',to_date('03-11-06','DD-MM-RR'),'SA_REP',7000,0.25,146,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (162,'Clara','Vishney','CVISHNEY','011.44.1346.129268',to_date('11-11-05','DD-MM-RR'),'SA_REP',10500,0.25,147,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (163,'Danielle','Greene','DGREENE','011.44.1346.229268',to_date('19-03-07','DD-MM-RR'),'SA_REP',9500,0.15,147,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (164,'Mattea','Marvins','MMARVINS','011.44.1346.329268',to_date('24-01-08','DD-MM-RR'),'SA_REP',7200,0.1,147,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (165,'David','Lee','DLEE','011.44.1346.529268',to_date('23-02-08','DD-MM-RR'),'SA_REP',6800,0.1,147,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (166,'Sundar','Ande','SANDE','011.44.1346.629268',to_date('24-03-08','DD-MM-RR'),'SA_REP',6400,0.1,147,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (167,'Amit','Banda','ABANDA','011.44.1346.729268',to_date('21-04-08','DD-MM-RR'),'SA_REP',6200,0.1,147,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (168,'Lisa','Ozer','LOZER','011.44.1343.929268',to_date('11-03-05','DD-MM-RR'),'SA_REP',11500,0.25,148,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (169,'Harrison','Bloom','HBLOOM','011.44.1343.829268',to_date('23-03-06','DD-MM-RR'),'SA_REP',10000,0.2,148,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (170,'Tayler','Fox','TFOX','011.44.1343.729268',to_date('24-01-06','DD-MM-RR'),'SA_REP',9600,0.2,148,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (171,'William','Smith','WSMITH','011.44.1343.629268',to_date('23-02-07','DD-MM-RR'),'SA_REP',7400,0.15,148,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (172,'Elizabeth','Bates','EBATES','011.44.1343.529268',to_date('24-03-07','DD-MM-RR'),'SA_REP',7300,0.15,148,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (173,'Sundita','Kumar','SKUMAR','011.44.1343.329268',to_date('21-04-08','DD-MM-RR'),'SA_REP',6100,0.1,148,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (174,'Ellen','Abel','EABEL','011.44.1644.429267',to_date('11-05-04','DD-MM-RR'),'SA_REP',11000,0.3,149,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (175,'Alyssa','Hutton','AHUTTON','011.44.1644.429266',to_date('19-03-05','DD-MM-RR'),'SA_REP',8800,0.25,149,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (176,'Jonathon','Taylor','JTAYLOR','011.44.1644.429265',to_date('24-03-06','DD-MM-RR'),'SA_REP',8600,0.2,149,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (177,'Jack','Livingston','JLIVINGS','011.44.1644.429264',to_date('23-04-06','DD-MM-RR'),'SA_REP',8400,0.2,149,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (178,'Kimberely','Grant','KGRANT','011.44.1644.429263',to_date('24-05-07','DD-MM-RR'),'SA_REP',7000,0.15,149,null);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (179,'Charles','Johnson','CJOHNSON','011.44.1644.429262',to_date('04-01-08','DD-MM-RR'),'SA_REP',6200,0.1,149,80);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (180,'Winston','Taylor','WTAYLOR','650.507.9876',to_date('24-01-06','DD-MM-RR'),'SH_CLERK',3200,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (181,'Jean','Fleaur','JFLEAUR','650.507.9877',to_date('23-02-06','DD-MM-RR'),'SH_CLERK',3100,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (182,'Martha','Sullivan','MSULLIVA','650.507.9878',to_date('21-06-07','DD-MM-RR'),'SH_CLERK',2500,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (183,'Girard','Geoni','GGEONI','650.507.9879',to_date('03-02-08','DD-MM-RR'),'SH_CLERK',2800,null,120,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (184,'Nandita','Sarchand','NSARCHAN','650.509.1876',to_date('27-01-04','DD-MM-RR'),'SH_CLERK',4200,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (185,'Alexis','Bull','ABULL','650.509.2876',to_date('20-02-05','DD-MM-RR'),'SH_CLERK',4100,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (186,'Julia','Dellinger','JDELLING','650.509.3876',to_date('24-06-06','DD-MM-RR'),'SH_CLERK',3400,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (187,'Anthony','Cabrio','ACABRIO','650.509.4876',to_date('07-02-07','DD-MM-RR'),'SH_CLERK',3000,null,121,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (188,'Kelly','Chung','KCHUNG','650.505.1876',to_date('14-06-05','DD-MM-RR'),'SH_CLERK',3800,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (189,'Jennifer','Dilly','JDILLY','650.505.2876',to_date('13-08-05','DD-MM-RR'),'SH_CLERK',3600,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (190,'Timothy','Gates','TGATES','650.505.3876',to_date('11-07-06','DD-MM-RR'),'SH_CLERK',2900,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (191,'Randall','Perkins','RPERKINS','650.505.4876',to_date('19-12-07','DD-MM-RR'),'SH_CLERK',2500,null,122,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (192,'Sarah','Bell','SBELL','650.501.1876',to_date('04-02-04','DD-MM-RR'),'SH_CLERK',4000,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (193,'Britney','Everett','BEVERETT','650.501.2876',to_date('03-03-05','DD-MM-RR'),'SH_CLERK',3900,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (194,'Samuel','McCain','SMCCAIN','650.501.3876',to_date('01-07-06','DD-MM-RR'),'SH_CLERK',3200,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (195,'Vance','Jones','VJONES','650.501.4876',to_date('17-03-07','DD-MM-RR'),'SH_CLERK',2800,null,123,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (196,'Alana','Walsh','AWALSH','650.507.9811',to_date('24-04-06','DD-MM-RR'),'SH_CLERK',3100,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (197,'Kevin','Feeney','KFEENEY','650.507.9822',to_date('23-05-06','DD-MM-RR'),'SH_CLERK',3000,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (198,'Donald','OConnell','DOCONNEL','650.507.9833',to_date('21-06-07','DD-MM-RR'),'SH_CLERK',2600,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (199,'Douglas','Grant','DGRANT','650.507.9844',to_date('13-01-08','DD-MM-RR'),'SH_CLERK',2600,null,124,50);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (200,'Jennifer','Whalen','JWHALEN','515.123.4444',to_date('17-09-03','DD-MM-RR'),'AD_ASST',4400,null,101,10);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (201,'Michael','Hartstein','MHARTSTE','515.123.5555',to_date('17-02-04','DD-MM-RR'),'MK_MAN',13000,null,100,20);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (202,'Pat','Fay','PFAY','603.123.6666',to_date('17-08-05','DD-MM-RR'),'MK_REP',6000,null,201,20);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (203,'Susan','Mavris','SMAVRIS','515.123.7777',to_date('07-06-02','DD-MM-RR'),'HR_REP',6500,null,101,40);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (204,'Hermann','Baer','HBAER','515.123.8888',to_date('07-06-02','DD-MM-RR'),'PR_REP',10000,null,101,70);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (205,'Shelley','Higgins','SHIGGINS','515.123.8080',to_date('07-06-02','DD-MM-RR'),'AC_MGR',12008,null,101,110);
Insert into HR.EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) values (206,'William','Gietz','WGIETZ','515.123.8181',to_date('07-06-02','DD-MM-RR'),'AC_ACCOUNT',8300,null,205,110);
REM INSERTING into HR.EMP_MAS
SET DEFINE OFF;
Insert into HR.EMP_MAS (BRANCH,ENTITY_ID,GR_NO,F_NAME,M_NAME,L_NAME,DOB,DOJ,LEAVE_DATE,SEX,BLOOD_GRP,PHONE1,PHONE2,ADD1,ADD2,CITY,STATE,PINCODE,EMAIL_ID,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('BR_TEST',27,null,'r','r','r',null,null,null,'M','r',1,1,'r','r','r','r',1,'r','30-JUL-15','RLT','RAHUL-PC',null,null,null,to_timestamp('30-07-15 02:49:40.069000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.EMP_MAS (BRANCH,ENTITY_ID,GR_NO,F_NAME,M_NAME,L_NAME,DOB,DOJ,LEAVE_DATE,SEX,BLOOD_GRP,PHONE1,PHONE2,ADD1,ADD2,CITY,STATE,PINCODE,EMAIL_ID,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('BR_TEST',28,null,'E','rR','R',null,null,null,'F','R',1,2,'31','31','SRT','SRT',235,'FSD','30-JUL-15','RLT','RAHUL-PC',null,null,null,to_timestamp('30-07-15 02:58:31.594000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.EMP_MAS (BRANCH,ENTITY_ID,GR_NO,F_NAME,M_NAME,L_NAME,DOB,DOJ,LEAVE_DATE,SEX,BLOOD_GRP,PHONE1,PHONE2,ADD1,ADD2,CITY,STATE,PINCODE,EMAIL_ID,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('BR_TEST',29,null,'Rahul','L','Thakor',null,null,null,'M','B+',9979711065,2,'SURAT','SURAT','SURT','GUJ',395003,'RAHTHAKOT@GMAIL.COM','30-JUL-15','RLT','RAHUL-PC',null,null,null,to_timestamp('30-07-15 03:00:05.819000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.EMP_MAS (BRANCH,ENTITY_ID,GR_NO,F_NAME,M_NAME,L_NAME,DOB,DOJ,LEAVE_DATE,SEX,BLOOD_GRP,PHONE1,PHONE2,ADD1,ADD2,CITY,STATE,PINCODE,EMAIL_ID,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('TestBranch',32,null,'RAHUL','LAX','THA',null,null,null,'M','A+',99797,11065,'ABC','ABC','ABC','ABC',395003,'RAHTHAKOR@GMAIL.COM','07-AUG-15','TestUser','RAHUL-PC',null,null,null,to_timestamp('07-08-15 02:04:58.757000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.EMP_MAS (BRANCH,ENTITY_ID,GR_NO,F_NAME,M_NAME,L_NAME,DOB,DOJ,LEAVE_DATE,SEX,BLOOD_GRP,PHONE1,PHONE2,ADD1,ADD2,CITY,STATE,PINCODE,EMAIL_ID,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('BR_TEST',30,null,'RAH','LAX','THA',null,null,null,'M','A+',99797,11065,'ABC','ABC','ABC','ABC',395003,'RAHTHAKOR@GMAIL.COM','07-AUG-15','RLT','RAHUL-PC',null,null,null,to_timestamp('07-08-15 01:58:21.405000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.EMP_MAS (BRANCH,ENTITY_ID,GR_NO,F_NAME,M_NAME,L_NAME,DOB,DOJ,LEAVE_DATE,SEX,BLOOD_GRP,PHONE1,PHONE2,ADD1,ADD2,CITY,STATE,PINCODE,EMAIL_ID,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('BR_TEST',31,null,'RAHUL','LAX','THA',null,null,null,'M','A+',99797,11065,'ABC','ABC','ABC','ABC',395003,'RAHTHAKOR@GMAIL.COM','07-AUG-15','RLT','RAHUL-PC',null,null,null,to_timestamp('07-08-15 01:59:00.406000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.EMP_MAS (BRANCH,ENTITY_ID,GR_NO,F_NAME,M_NAME,L_NAME,DOB,DOJ,LEAVE_DATE,SEX,BLOOD_GRP,PHONE1,PHONE2,ADD1,ADD2,CITY,STATE,PINCODE,EMAIL_ID,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('H',2,1,'HIREN','S','PATEL',to_date('18-03-89','DD-MM-RR'),to_date('25-07-15','DD-MM-RR'),null,'M','O+',9033717428,0,'RANDER',null,'SURAT','GUJARAT',395005,'PHIREN53@GMAIL.COM','11-07-15','HIREN','MYPC',null,null,null,to_timestamp('11-07-15 06:51:19.262000000 PM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.EMP_MAS (BRANCH,ENTITY_ID,GR_NO,F_NAME,M_NAME,L_NAME,DOB,DOJ,LEAVE_DATE,SEX,BLOOD_GRP,PHONE1,PHONE2,ADD1,ADD2,CITY,STATE,PINCODE,EMAIL_ID,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('H',4,1,'Hiren','S','Patel',to_date('18-03-89','DD-MM-RR'),to_date('25-05-15','DD-MM-RR'),null,'M','O+',1,1,'Rander','Surat','Surat','GUJ',1,null,'11-07-15','Hiren','MYPC',null,null,null,to_timestamp('11-07-15 07:09:51.705000000 PM','DD-MM-RR HH12:MI:SSXFF AM'));
REM INSERTING into HR.ENTITY_MAS
SET DEFINE OFF;
Insert into HR.ENTITY_MAS (ENTITY_ID,ENTITY_TYPE_ID,ENTITY_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values (27,2,'r','Y','30-JUL-15','RLT','RAHUL-PC',null,null,null,to_timestamp('30-07-15 02:49:40.069000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.ENTITY_MAS (ENTITY_ID,ENTITY_TYPE_ID,ENTITY_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values (29,1,'Rahul','Y','30-JUL-15','RLT','RAHUL-PC',null,null,null,to_timestamp('30-07-15 03:00:05.819000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.ENTITY_MAS (ENTITY_ID,ENTITY_TYPE_ID,ENTITY_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values (30,2,'RAH','Y','07-AUG-15','RLT','RAHUL-PC',null,null,null,to_timestamp('07-08-15 01:58:21.435000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.ENTITY_MAS (ENTITY_ID,ENTITY_TYPE_ID,ENTITY_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values (31,2,'RAHUL','Y','07-AUG-15','RLT','RAHUL-PC',null,null,null,to_timestamp('07-08-15 01:59:00.406000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.ENTITY_MAS (ENTITY_ID,ENTITY_TYPE_ID,ENTITY_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values (32,2,'RAHUL','Y','07-AUG-15','TestUser','RAHUL-PC',null,null,null,to_timestamp('07-08-15 02:04:58.757000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
REM INSERTING into HR.ENTITY_TYPE_MAS
SET DEFINE OFF;
Insert into HR.ENTITY_TYPE_MAS (ENTITY_TYPE_ID,ENTITY_TYPE_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values (1,'STUDENT','Y',to_date('11-07-15','DD-MM-RR'),'RLT','RAHUL-PC',null,null,null,to_timestamp('11-07-15 08:03:09.049000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.ENTITY_TYPE_MAS (ENTITY_TYPE_ID,ENTITY_TYPE_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values (2,'TEACHER','Y',to_date('11-07-15','DD-MM-RR'),'RLT','RAHUL-PC',null,null,null,to_timestamp('11-07-15 08:03:38.185000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
REM INSERTING into HR.EXAM_MAS
SET DEFINE OFF;
Insert into HR.EXAM_MAS (BRANCH,BATCH_ID,EXAM_ID,REF_SUB_ID,TOTAL_MARK,EXAM_TYPE,TYPE_DET,PAPER_SET_BY,EXAM_DATE,EXAM_TIME,DURATION,SUPERVISOR,ENT_DATE,ENT_TERM,ENT_USER,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('TestBranch',3,1,1,100,'2','1','PKM',to_date('16-08-15','DD-MM-RR'),'0800','90','MukeshKhamkar',to_date('16-08-15','DD-MM-RR'),'RAHUL-PC','TestUser',to_date('16-08-15','DD-MM-RR'),'TestUser','RAHUL-PC',to_timestamp('16-08-15 04:09:24.204000000 PM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.EXAM_MAS (BRANCH,BATCH_ID,EXAM_ID,REF_SUB_ID,TOTAL_MARK,EXAM_TYPE,TYPE_DET,PAPER_SET_BY,EXAM_DATE,EXAM_TIME,DURATION,SUPERVISOR,ENT_DATE,ENT_TERM,ENT_USER,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('TestBranch',1,2,1,100,'1','2','MAP',to_date('23-08-15','DD-MM-RR'),'1000','180','Khamkar',to_date('16-08-15','DD-MM-RR'),'RAHUL-PC','TestUser',to_date('16-08-15','DD-MM-RR'),'TestUser','RAHUL-PC',to_timestamp('16-08-15 04:10:22.219000000 PM','DD-MM-RR HH12:MI:SSXFF AM'));
REM INSERTING into HR.FLG_MAS
SET DEFINE OFF;
Insert into HR.FLG_MAS (FLG_ID,FLG_SH_NAME,FLG_NAME,REMARK) values (3,'STDTYPE','Standard Type','GBSE |CBSE | ICSE ');
Insert into HR.FLG_MAS (FLG_ID,FLG_SH_NAME,FLG_NAME,REMARK) values (4,'STDMED','Standard Medium ','ENGLISH | GUJARATI');
Insert into HR.FLG_MAS (FLG_ID,FLG_SH_NAME,FLG_NAME,REMARK) values (1,'ACTSTD','Active Standard','Get Active Standard');
Insert into HR.FLG_MAS (FLG_ID,FLG_SH_NAME,FLG_NAME,REMARK) values (2,'NRML','Normal','Normal Column Type');
REM INSERTING into HR.GRID_FIELDS
SET DEFINE OFF;
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('EntityTypeMas','grdMas','ENTITY_TYPE_ID',90,'Seqno','NRML','N',null,null,null,null,1,9);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('EntityTypeMas','grdMas','ENTITY_TYPE_NAME',90,'Type Name','NRML','N',null,null,null,null,2,10);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('EntityTypeMas','grdMas','IS_ACTIVE',90,'Is Active','CHKBX','N',null,null,null,null,3,11);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('StudyLevelMas','grdStudyLevelMas','BRANCH',90,'Branch ID','HIDECOL','N',null,null,null,null,1,12);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('StudyLevelMas','grdStudyLevelMas','STD_ID',90,'Std ID','READONLY','N',null,null,null,null,2,13);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('StudyLevelMas','grdStudyLevelMas','STD_MEDIUM',90,'Std Medium','CMBBX','STATIC',null,null,'STDMED',null,3,14);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('StudyLevelMas','grdStudyLevelMas','STD_LEVEL',90,'Standard ','NRML','N',null,null,null,null,5,16);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('StudyLevelMas','grdStudyLevelMas','STD_TYPE',90,'Std Type','CMBBX','STATIC',null,null,'STDTYP',null,4,15);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('StudyLevelMas','grdStudyLevelMas','STD_NAME',150,'Std Name','REQUIRED','N',null,null,null,null,6,17);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('StudyLevelMas','grdStudyLevelMas','IS_ACTIVE',90,'Is Active','CHKBX','N',null,null,null,null,7,18);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('StudyLevelMas','grdStudyLevelMas','TIME_STAMP',90,'Timstamp','HIDECOL','N',null,null,null,null,8,19);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','MENU_NAME',90,'Menu name','NRML','N',null,null,null,null,2,34);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','CTRL_NAME',90,'Contrl Name','NRML','N',null,null,null,null,3,35);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','DATA_FIELD_NAME',90,'DataFieldName','NRML','N',null,null,null,null,4,36);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','FIELD_SIZE',90,'FieldSize','NRML','N',null,null,null,null,5,37);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','DISP_NAME',90,'DispName','NRML','N',null,null,null,null,6,38);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','COL_TYPE',90,'Col Type','NRML','N',null,null,null,null,7,39);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','COMBO_FLG',90,'ComboFlg','NRML','N',null,null,null,null,8,40);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','COMBO_BIND_ID',90,'ComboBindID','NRML','N',null,null,null,null,9,41);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','EXCEL_FIELD_NAME',90,'ExcelFieldName','NRML','N',null,null,null,null,10,42);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','REMARK',90,'Remark','NRML','N',null,null,null,null,11,43);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','EXTRA_REMARK',90,'XtraRemark','NRML','N',null,null,null,null,12,44);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','ORD',90,'Order','NRML','N',null,null,null,null,13,45);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('GridFields','grdGridMas','SEQNO',90,'Seqno','READONLY','N',null,null,null,null,1,46);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdSubMas','BRANCH',90,'Branch Name','HIDECOL,READONLY','N',null,null,null,null,1,27);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdSubMas','REF_STD_ID',180,'Standard','CMBBX','ACTSTD',null,null,null,null,3,29);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdSubMas','SUB_ID',90,'Subject ID','NRML','N',null,null,null,null,2,28);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdSubMas','SUB_NAME',90,'Subject Name','NRML','N',null,null,null,null,4,30);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdSubMas','HAVE_EXAM',90,'Have Exam','CHKBX','N',null,null,null,null,5,31);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdSubMas','IS_ACTIVE',90,'Is Active','CHKBX','N',null,null,null,null,6,32);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('BatchMaster','grdBatchMaster','BRANCH',90,'Branch Name','HIDECOL,','N',null,null,null,null,1,1);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('BatchMaster','grdBatchMaster','BATCH_ID',90,'Batch ID','READONLY','N',null,null,null,null,2,2);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('BatchMaster','grdBatchMaster','BATCH_NAME',90,'Batch Name','NRML','N',null,null,null,null,3,3);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('BatchMaster','grdBatchMaster','REF_SUB_ID',90,'Subject Name','CMBBX','ACTSUB',null,null,null,null,4,4);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('BatchMaster','grdBatchMaster','REF_T_ENTITY_ID',90,'Teacher','CMBBX','TEACHER',null,null,null,null,5,5);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('BatchMaster','grdBatchMaster','FR_TIME',90,'From Time','NRML','N',null,null,null,null,6,6);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdSubMas','TIME_STAMP',90,'TimeStamp','HIDECOL','N',null,null,null,null,7,33);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdChpDet','SEQNO',90,'Seqno','READONLY','N',null,null,null,null,1,20);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdChpDet','REF_SUB_ID',90,'Subject ID','NRML','N',null,null,null,null,2,21);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdChpDet','CHP_ID',90,'Chapter No','NRML','N',null,null,null,null,3,22);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdChpDet','CHP_NAME',90,'Chapter Name','NRML','N',null,null,null,null,4,23);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdChpDet','DESCRIPTION',90,'Description','NRML','N',null,null,null,null,5,24);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdChpDet','REMARK',90,'Remark','NRML','N',null,null,null,null,6,25);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubjectMas','grdChpDet','TIME_STAMP',90,'Timestamp','HIDECOL','N',null,null,null,null,7,26);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('BatchMaster','grdBatchMaster','TO_TIME',90,'To Time','NRML','N',null,null,null,null,7,7);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('BatchMaster','grdBatchMaster','TIME_STAMP',90,'TimeStamp','READONLY,HIDECOL','N',null,null,null,null,8,8);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ResultMas','grdResultMas','SRNO',90,'Srno','NRML','N',null,null,null,null,1,91);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ResultMas','grdResultMas','EXAM_ID',90,'Exam ID','CMBBX','EXAM',null,null,null,null,2,92);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ResultMas','grdResultMas','ENTITY_ID',90,'Student Name','CMBBX','ACTEMP',null,null,null,null,3,93);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ResultMas','grdResultMas','ENTITY_TYPE_ID',90,'Student type','CMBBX','EMPTYPE',null,null,null,null,4,94);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ResultMas','grdResultMas','SCORE',90,'Score','NRML','N',null,null,null,null,5,95);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ResultMas','grdResultMas','REMARK',90,'Remark','NRML','N',null,null,null,null,6,96);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ResultMas','grdResultMas','TIMESTAMP',90,'Timestamp','HIDECOL','N',null,null,null,null,7,97);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubAllocation','grdSubAlloc','BRANCH',90,'Branch','HIDECOL','N',null,null,null,null,1,47);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubAllocation','grdSubAlloc','ALLOCATION_ID',90,'Allocation ID','NRML','N',null,null,null,null,2,48);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubAllocation','grdSubAlloc','BATCH_ID',90,'Batch ID','CMBBX','BATCH',null,null,null,null,3,49);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubAllocation','grdSubAlloc','ENTITY_ID',90,'Teacher Name','CMBBX','TEACHER',null,null,null,null,4,50);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubAllocation','grdSubAlloc','ENTITY_TYPE_ID',90,'Teacher Type','CMBBX','EMPTYPE',null,null,null,null,5,51);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubAllocation','grdSubAlloc','REF_SUB_ID',90,'Subject Name','CMBBX','ACTSUB',null,null,null,null,6,52);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubAllocation','grdSubAlloc','IS_ACTIVE',90,'Is Active','CHKBX','N',null,null,null,null,7,53);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubAllocation','grdSubAlloc','REMARK',90,'Remark','NRML','N',null,null,null,null,8,54);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('SubAllocation','grdSubAlloc','TIME_STAMP',90,'TimeStamp','NRML','N',null,null,null,null,9,55);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('PaymentMas','grdPaymentMas','BRANCH',90,'Branch','HIDECOL','N',null,null,null,null,1,56);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('PaymentMas','grdPaymentMas','TRN_ID',90,'Transaction ID','READONLY','N',null,null,null,null,2,57);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('PaymentMas','grdPaymentMas','TRN_TYPE',90,'Transaction Type','CMBBX','STATIC',null,null,null,null,3,58);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('PaymentMas','grdPaymentMas','FROM_TYPE',90,'From Category','CMBBX','EMPTYPE',null,null,null,null,4,59);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('PaymentMas','grdPaymentMas','FROM_ENTITY_ID',90,'From Emp Name','CMBBX','ACTEMP',null,null,null,null,5,60);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('PaymentMas','grdPaymentMas','TO_TYPE',90,'To Category','CMBBX','EMPTYPE',null,null,null,null,6,61);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('PaymentMas','grdPaymentMas','TO_ENTITY_ID',90,'To Whom','CMBBX','ACTEMP',null,null,null,null,7,62);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('PaymentMas','grdPaymentMas','AMT',90,'Amt','NRML','N',null,null,null,null,8,63);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('PaymentMas','grdPaymentMas','T_DATE',90,'Transaction Date','NRML','N',null,null,null,null,9,64);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('PaymentMas','grdPaymentMas','CONCERN_PRSN',90,'Concern Person','NRML','N',null,null,null,null,10,65);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('PaymentMas','grdPaymentMas','TIME_STAMP',90,'Timestamp','HIDECOL','N',null,null,null,null,11,66);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('TranSettings','grdTrnMas','SEQNO',90,'Seqno','READONLY','N',null,null,null,null,1,67);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('TranSettings','grdTrnMas','BATCH_ID',90,'BatchName','BATCH','N',null,null,null,null,2,68);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('TranSettings','grdTrnMas','REF_ENTITY_TYPE_ID',90,'Emp Type','CMBBX','N',null,null,null,null,3,69);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('TranSettings','grdTrnMas','AMOUNT',90,'Amount','NRML','N',null,null,null,null,4,70);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('TranSettings','grdTrnMas','CASH_CHQ_RATIO',90,'Chk Cash Ratio','NRML','N',null,null,null,null,5,71);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('TranSettings','grdTrnMas','ALLOW_EMI',90,'Allow EMI','CHKBX','N',null,null,null,null,6,72);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('TranSettings','grdTrnMas','ALLOW_ADVANCE',90,'Allow Advance','CHKBX','N',null,null,null,null,7,73);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('TranSettings','grdTrnMas','NO_OF_EMI',90,'No of Emi','NRML','N',null,null,null,null,8,74);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('TranSettings','grdTrnMas','DISCOUNT',90,'Discount','NRML','N',null,null,null,null,9,75);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('TranSettings','grdTrnMas','REMARK',90,'Remark','NRML','N',null,null,null,null,10,76);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('TranSettings','grdTrnMas','TIME_STAMP',90,'Timestamp','HIDECOL','N',null,null,null,null,11,77);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','BRANCH',90,'Branch','HIDECOL','N',null,null,null,null,1,78);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','BATCH_ID',90,'Batch ID','CMBBX','BATCH',null,null,null,null,2,79);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','EXAM_ID',90,'Exam ID','NRML','N',null,null,null,null,3,80);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','REF_SUB_ID',90,'Subject Name','CMBBX','ACTSUB',null,null,null,null,4,81);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','TOTAL_MARK',90,'Total Mark','NRML','N',null,null,null,null,5,82);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','EXAM_TYPE',90,'Exam Type','CMBBX','STATIC',null,null,'EXAMTYPE',null,6,83);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','TYPE_DET',90,'Sub Type','CMBBX','STATIC',null,null,'EXAMTYPEDET',null,7,84);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','PAPER_SET_BY',90,'Paper Setter','NRML','N',null,null,null,null,8,85);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','EXAM_DATE',90,'Exam Date','NRML','N',null,null,null,null,9,86);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','EXAM_TIME',90,'Exam Time','NRML','N',null,null,null,null,10,87);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','DURATION',90,'Duration','NRML','N',null,null,null,null,11,88);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','SUPERVISOR',90,'Supervisor','NRML','N',null,null,null,null,12,89);
Insert into HR.GRID_FIELDS (MENU_NAME,CTRL_NAME,DATA_FIELD_NAME,FIELD_SIZE,DISP_NAME,COL_TYPE,COMBO_FLG,COMBO_BIND_ID,EXCEL_FIELD_NAME,REMARK,EXTRA_REMARK,ORD,SEQNO) values ('ExamMas','grdExamMas','TIMESTAMP',90,'Timestamp','HIDECOL','N',null,null,null,null,13,90);
REM INSERTING into HR.JOBS
SET DEFINE OFF;
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('AD_PRES','President',20080,40000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('AD_VP','Administration Vice President',15000,30000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('AD_ASST','Administration Assistant',3000,6000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('FI_MGR','Finance Manager',8200,16000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('FI_ACCOUNT','Accountant',4200,9000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('AC_MGR','Accounting Manager',8200,16000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('AC_ACCOUNT','Public Accountant',4200,9000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('SA_MAN','Sales Manager',10000,20080);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('SA_REP','Sales Representative',6000,12008);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('PU_MAN','Purchasing Manager',8000,15000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('PU_CLERK','Purchasing Clerk',2500,5500);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('ST_MAN','Stock Manager',5500,8500);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('ST_CLERK','Stock Clerk',2008,5000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('SH_CLERK','Shipping Clerk',2500,5500);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('IT_PROG','Programmer',4000,10000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('MK_MAN','Marketing Manager',9000,15000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('MK_REP','Marketing Representative',4000,9000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('HR_REP','Human Resources Representative',4000,9000);
Insert into HR.JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) values ('PR_REP','Public Relations Representative',4500,10500);
REM INSERTING into HR.JOB_HISTORY
SET DEFINE OFF;
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (102,to_date('13-01-01','DD-MM-RR'),to_date('24-07-06','DD-MM-RR'),'IT_PROG',60);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (101,to_date('21-09-97','DD-MM-RR'),to_date('27-10-01','DD-MM-RR'),'AC_ACCOUNT',110);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (101,to_date('28-10-01','DD-MM-RR'),to_date('15-03-05','DD-MM-RR'),'AC_MGR',110);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (201,to_date('17-02-04','DD-MM-RR'),to_date('19-12-07','DD-MM-RR'),'MK_REP',20);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (114,to_date('24-03-06','DD-MM-RR'),to_date('31-12-07','DD-MM-RR'),'ST_CLERK',50);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (122,to_date('01-01-07','DD-MM-RR'),to_date('31-12-07','DD-MM-RR'),'ST_CLERK',50);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (200,to_date('17-09-95','DD-MM-RR'),to_date('17-06-01','DD-MM-RR'),'AD_ASST',90);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (176,to_date('24-03-06','DD-MM-RR'),to_date('31-12-06','DD-MM-RR'),'SA_REP',80);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (176,to_date('01-01-07','DD-MM-RR'),to_date('31-12-07','DD-MM-RR'),'SA_MAN',80);
Insert into HR.JOB_HISTORY (EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) values (200,to_date('01-07-02','DD-MM-RR'),to_date('31-12-06','DD-MM-RR'),'AC_ACCOUNT',90);
REM INSERTING into HR.LOCATIONS
SET DEFINE OFF;
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1000,'1297 Via Cola di Rie','00989','Roma',null,'IT');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1100,'93091 Calle della Testa','10934','Venice',null,'IT');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1200,'2017 Shinjuku-ku','1689','Tokyo','Tokyo Prefecture','JP');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1300,'9450 Kamiya-cho','6823','Hiroshima',null,'JP');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1400,'2014 Jabberwocky Rd','26192','Southlake','Texas','US');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1500,'2011 Interiors Blvd','99236','South San Francisco','California','US');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1600,'2007 Zagora St','50090','South Brunswick','New Jersey','US');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1700,'2004 Charade Rd','98199','Seattle','Washington','US');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1800,'147 Spadina Ave','M5V 2L7','Toronto','Ontario','CA');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (1900,'6092 Boxwood St','YSW 9T2','Whitehorse','Yukon','CA');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2000,'40-5-12 Laogianggen','190518','Beijing',null,'CN');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2100,'1298 Vileparle (E)','490231','Bombay','Maharashtra','IN');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2200,'12-98 Victoria Street','2901','Sydney','New South Wales','AU');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2300,'198 Clementi North','540198','Singapore',null,'SG');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2400,'8204 Arthur St',null,'London',null,'UK');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2500,'Magdalen Centre, The Oxford Science Park','OX9 9ZB','Oxford','Oxford','UK');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2600,'9702 Chester Road','09629850293','Stretford','Manchester','UK');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2700,'Schwanthalerstr. 7031','80925','Munich','Bavaria','DE');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2800,'Rua Frei Caneca 1360 ','01307-002','Sao Paulo','Sao Paulo','BR');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (2900,'20 Rue des Corps-Saints','1730','Geneva','Geneve','CH');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (3000,'Murtenstrasse 921','3095','Bern','BE','CH');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (3100,'Pieter Breughelstraat 837','3029SK','Utrecht','Utrecht','NL');
Insert into HR.LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PROVINCE,COUNTRY_ID) values (3200,'Mariano Escobedo 9991','11932','Mexico City','Distrito Federal,','MX');
REM INSERTING into HR.MONEY_FLOW
SET DEFINE OFF;
REM INSERTING into HR.REGIONS
SET DEFINE OFF;
Insert into HR.REGIONS (REGION_ID,REGION_NAME) values (1,'Europe');
Insert into HR.REGIONS (REGION_ID,REGION_NAME) values (2,'Americas');
Insert into HR.REGIONS (REGION_ID,REGION_NAME) values (3,'Asia');
Insert into HR.REGIONS (REGION_ID,REGION_NAME) values (4,'Middle East and Africa');
REM INSERTING into HR.RESULT_MAS
SET DEFINE OFF;
REM INSERTING into HR.SCHL_MAS
SET DEFINE OFF;
REM INSERTING into HR.STATIC_COMBO
SET DEFINE OFF;
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (1,'STDTYP',null,-1,null);
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (2,'GUJARATI','1',1,'1');
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (3,'ENGLISH','2',1,'2');
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (4,'STDMED',null,-1,null);
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (5,'GSEB','1',4,'1');
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (6,'CBSE','2',4,'2');
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (7,'ICSE','3',4,'3');
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (8,'EXAMTYPE',null,-1,null);
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (9,'MCQ','1',8,'1');
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (10,'THEORY','2',8,'2');
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (11,'INOUT',null,-1,null);
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (12,'IN','1',11,'1');
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (13,'OUT','2',11,'2');
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (14,'EXAMTYPEDET',null,-1,null);
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (15,'CHAPTER','1',14,'1');
Insert into HR.STATIC_COMBO (SRNO,DISP_MEM,VALUE_MEM,REF_SRNO,ORD) values (16,'FULL','2',14,'2');
REM INSERTING into HR.STUDY_LEVEL_MAS
SET DEFINE OFF;
Insert into HR.STUDY_LEVEL_MAS (BRANCH,STD_ID,STD_LEVEL,STD_TYPE,STD_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP,STD_MEDIUM) values ('NULL',2,11,'1','11TH PHY SEM-2','Y',to_date('06-08-15','DD-MM-RR'),'RLT','RAHUL-PC',null,null,null,to_timestamp('06-08-15 11:32:44.329000000 PM','DD-MM-RR HH12:MI:SSXFF AM'),1);
Insert into HR.STUDY_LEVEL_MAS (BRANCH,STD_ID,STD_LEVEL,STD_TYPE,STD_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP,STD_MEDIUM) values ('NULL',3,12,'1','12TH CHEM SEM-1','Y',to_date('06-08-15','DD-MM-RR'),'RLT','RAHUL-PC',null,null,null,to_timestamp('06-08-15 11:32:44.329000000 PM','DD-MM-RR HH12:MI:SSXFF AM'),1);
Insert into HR.STUDY_LEVEL_MAS (BRANCH,STD_ID,STD_LEVEL,STD_TYPE,STD_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP,STD_MEDIUM) values ('NULL',1,11,'1','11TH PHY SEM-1','Y',to_date('06-08-15','DD-MM-RR'),'RLT','RAHUL-PC',null,null,null,to_timestamp('06-08-15 11:32:44.298000000 PM','DD-MM-RR HH12:MI:SSXFF AM'),1);
Insert into HR.STUDY_LEVEL_MAS (BRANCH,STD_ID,STD_LEVEL,STD_TYPE,STD_NAME,IS_ACTIVE,ENT_DATE,ENT_USER,ENT_TERM,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP,STD_MEDIUM) values ('NULL',4,12,'1','12TH CHEM SEM-2','Y',to_date('06-08-15','DD-MM-RR'),'RLT','RAHUL-PC',null,null,null,to_timestamp('06-08-15 11:32:44.329000000 PM','DD-MM-RR HH12:MI:SSXFF AM'),1);
REM INSERTING into HR.STUD_MAS
SET DEFINE OFF;
REM INSERTING into HR.SUB_ALLOCATION
SET DEFINE OFF;
Insert into HR.SUB_ALLOCATION (BRANCH,BATCH_ID,ENTITY_ID,ENTITY_TYPE_ID,REF_SUB_ID,IS_ACTIVE,REMARK,ENT_DATE,ENT_TERM,ENT_USER,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP,ALLOCATION_ID) values ('TestBranch',3,2,2,2,'Y',null,to_date('08-08-15','DD-MM-RR'),'RAHUL-PC','TestUser',null,null,null,to_timestamp('08-08-15 03:01:58.353000000 AM','DD-MM-RR HH12:MI:SSXFF AM'),1);
Insert into HR.SUB_ALLOCATION (BRANCH,BATCH_ID,ENTITY_ID,ENTITY_TYPE_ID,REF_SUB_ID,IS_ACTIVE,REMARK,ENT_DATE,ENT_TERM,ENT_USER,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP,ALLOCATION_ID) values ('TestBranch',2,30,2,1,'N',null,to_date('08-08-15','DD-MM-RR'),'RAHUL-PC','TestUser',to_date('08-08-15','DD-MM-RR'),'RAHUL-PC','TestUser',to_timestamp('08-08-15 03:02:23.858000000 AM','DD-MM-RR HH12:MI:SSXFF AM'),2);
REM INSERTING into HR.SUB_MAS
SET DEFINE OFF;
Insert into HR.SUB_MAS (BRANCH,REF_STD_ID,SUB_ID,SUB_NAME,HAVE_EXAM,IS_ACTIVE,ENT_DATE,ENT_TERM,ENT_USER,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('TestBranch',1,1,'PHY','Y','Y',to_date('07-08-15','DD-MM-RR'),'RAHUL-PC','TestUser',null,null,null,to_timestamp('07-08-15 01:31:48.645000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
Insert into HR.SUB_MAS (BRANCH,REF_STD_ID,SUB_ID,SUB_NAME,HAVE_EXAM,IS_ACTIVE,ENT_DATE,ENT_TERM,ENT_USER,UPD_DATE,UPD_USER,UPD_TERM,TIME_STAMP) values ('TestBranch',3,2,'CHEM','Y','Y',to_date('07-08-15','DD-MM-RR'),'RAHUL-PC','TestUser',null,null,null,to_timestamp('07-08-15 01:35:59.392000000 AM','DD-MM-RR HH12:MI:SSXFF AM'));
REM INSERTING into HR.TEACHER_MAS
SET DEFINE OFF;
REM INSERTING into HR.TIMETABLE
SET DEFINE OFF;
REM INSERTING into HR.TRANSACTION_SETTING
SET DEFINE OFF;
--------------------------------------------------------
--  DDL for Index UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."UK1" ON "HR"."EXAM_MAS" ("BATCH_ID", "REF_SUB_ID", "EXAM_DATE", "EXAM_TIME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LOC_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."LOC_ID_PK" ON "HR"."LOCATIONS" ("LOCATION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index EMP_MANAGER_IX
--------------------------------------------------------

  CREATE INDEX "HR"."EMP_MANAGER_IX" ON "HR"."EMPLOYEES" ("MANAGER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index DEPT_LOCATION_IX
--------------------------------------------------------

  CREATE INDEX "HR"."DEPT_LOCATION_IX" ON "HR"."DEPARTMENTS" ("LOCATION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index JHIST_EMP_ID_ST_DATE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."JHIST_EMP_ID_ST_DATE_PK" ON "HR"."JOB_HISTORY" ("EMPLOYEE_ID", "START_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index JHIST_DEPARTMENT_IX
--------------------------------------------------------

  CREATE INDEX "HR"."JHIST_DEPARTMENT_IX" ON "HR"."JOB_HISTORY" ("DEPARTMENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index ENTITY_MAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."ENTITY_MAS_PK" ON "HR"."ENTITY_MAS" ("ENTITY_ID", "ENTITY_TYPE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index COUNTRY_C_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."COUNTRY_C_ID_PK" ON "HR"."COUNTRIES" ("COUNTRY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index JHIST_JOB_IX
--------------------------------------------------------

  CREATE INDEX "HR"."JHIST_JOB_IX" ON "HR"."JOB_HISTORY" ("JOB_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index JHIST_EMPLOYEE_IX
--------------------------------------------------------

  CREATE INDEX "HR"."JHIST_EMPLOYEE_IX" ON "HR"."JOB_HISTORY" ("EMPLOYEE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index RESULT_MAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."RESULT_MAS_PK" ON "HR"."RESULT_MAS" ("SRNO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index EMP_JOB_IX
--------------------------------------------------------

  CREATE INDEX "HR"."EMP_JOB_IX" ON "HR"."EMPLOYEES" ("JOB_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index LOC_CITY_IX
--------------------------------------------------------

  CREATE INDEX "HR"."LOC_CITY_IX" ON "HR"."LOCATIONS" ("CITY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index CHAP_DET_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."CHAP_DET_PK" ON "HR"."CHP_DET" ("REF_SUB_ID", "CHP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index JOB_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."JOB_ID_PK" ON "HR"."JOBS" ("JOB_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index ENTITY_TYPE_MAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."ENTITY_TYPE_MAS_PK" ON "HR"."ENTITY_TYPE_MAS" ("ENTITY_TYPE_ID", "ENTITY_TYPE_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LOC_STATE_PROVINCE_IX
--------------------------------------------------------

  CREATE INDEX "HR"."LOC_STATE_PROVINCE_IX" ON "HR"."LOCATIONS" ("STATE_PROVINCE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index EMP_DEPARTMENT_IX
--------------------------------------------------------

  CREATE INDEX "HR"."EMP_DEPARTMENT_IX" ON "HR"."EMPLOYEES" ("DEPARTMENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index EMP_EMAIL_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."EMP_EMAIL_UK" ON "HR"."EMPLOYEES" ("EMAIL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index EMP_MAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."EMP_MAS_PK" ON "HR"."EMP_MAS" ("ENTITY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index EMP_NAME_IX
--------------------------------------------------------

  CREATE INDEX "HR"."EMP_NAME_IX" ON "HR"."EMPLOYEES" ("LAST_NAME", "FIRST_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index STATIC_COMBO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."STATIC_COMBO_PK" ON "HR"."STATIC_COMBO" ("SRNO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FLG_MAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."FLG_MAS_PK" ON "HR"."FLG_MAS" ("FLG_ID", "FLG_SH_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index REG_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."REG_ID_PK" ON "HR"."REGIONS" ("REGION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index RESULT_MAS_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."RESULT_MAS_UK1" ON "HR"."RESULT_MAS" ("EXAM_ID", "ENTITY_ID", "ENTITY_TYPE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."PK1" ON "HR"."EXAM_MAS" ("EXAM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index EMP_EMP_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."EMP_EMP_ID_PK" ON "HR"."EMPLOYEES" ("EMPLOYEE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index DEPT_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "HR"."DEPT_ID_PK" ON "HR"."DEPARTMENTS" ("DEPARTMENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  DDL for Index LOC_COUNTRY_IX
--------------------------------------------------------

  CREATE INDEX "HR"."LOC_COUNTRY_IX" ON "HR"."LOCATIONS" ("COUNTRY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE" ;
--------------------------------------------------------
--  Constraints for Table SCHL_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."SCHL_MAS" MODIFY ("SCHL_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SCHL_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SCHL_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SCHL_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SCHL_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LOCATIONS
--------------------------------------------------------

  ALTER TABLE "HR"."LOCATIONS" MODIFY ("CITY" CONSTRAINT "LOC_CITY_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."LOCATIONS" ADD CONSTRAINT "LOC_ID_PK" PRIMARY KEY ("LOCATION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TEACHER_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("TEACHER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("T_ENTITY_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("PH1" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TEACHER_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table RESULT_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."RESULT_MAS" ADD CONSTRAINT "DUP_CONS_UK" UNIQUE ("EXAM_ID", "ENTITY_ID", "ENTITY_TYPE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."RESULT_MAS" ADD CONSTRAINT "RESULT_MAS_PK" PRIMARY KEY ("SRNO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOCOMPRESS LOGGING
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."RESULT_MAS" MODIFY ("EXAM_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."RESULT_MAS" MODIFY ("ENTITY_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."RESULT_MAS" MODIFY ("ENTITY_TYPE_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."RESULT_MAS" MODIFY ("SRNO" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."RESULT_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."RESULT_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."RESULT_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."RESULT_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MONEY_FLOW
--------------------------------------------------------

  ALTER TABLE "HR"."MONEY_FLOW" MODIFY ("BRANCH" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."MONEY_FLOW" MODIFY ("TRN_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."MONEY_FLOW" MODIFY ("AMT" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."MONEY_FLOW" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."MONEY_FLOW" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."MONEY_FLOW" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."MONEY_FLOW" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EXAM_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."EXAM_MAS" ADD CONSTRAINT "PK1" UNIQUE ("EXAM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("BRANCH" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("BATCH_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("EXAM_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("REF_SUB_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("TOTAL_MARK" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("EXAM_TYPE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("TYPE_DET" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("EXAM_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("EXAM_TIME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EXAM_MAS" ADD CONSTRAINT "UK1" PRIMARY KEY ("BATCH_ID", "REF_SUB_ID", "EXAM_DATE", "EXAM_TIME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table EMP_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."EMP_MAS" ADD CONSTRAINT "EMP_MAS_PK" PRIMARY KEY ("ENTITY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."EMP_MAS" ADD CONSTRAINT "EMP_MAS_VALIDATE_SEX" CHECK (SEX IN ('M','F')) ENABLE;
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("ENTITY_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("F_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("BRANCH" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMP_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CHP_DET
--------------------------------------------------------

  ALTER TABLE "HR"."CHP_DET" ADD CONSTRAINT "CHAP_DET_PK" PRIMARY KEY ("REF_SUB_ID", "CHP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("SEQNO" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("REF_SUB_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("CHP_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("CHP_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."CHP_DET" MODIFY ("ENT_TERM" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table GRID_FIELDS
--------------------------------------------------------

  ALTER TABLE "HR"."GRID_FIELDS" MODIFY ("MENU_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."GRID_FIELDS" MODIFY ("CTRL_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."GRID_FIELDS" MODIFY ("DATA_FIELD_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."GRID_FIELDS" MODIFY ("DISP_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table JOBS
--------------------------------------------------------

  ALTER TABLE "HR"."JOBS" ADD CONSTRAINT "JOB_ID_PK" PRIMARY KEY ("JOB_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
 
  ALTER TABLE "HR"."JOBS" MODIFY ("JOB_TITLE" CONSTRAINT "JOB_TITLE_NN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table REGIONS
--------------------------------------------------------

  ALTER TABLE "HR"."REGIONS" MODIFY ("REGION_ID" CONSTRAINT "REGION_ID_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."REGIONS" ADD CONSTRAINT "REG_ID_PK" PRIMARY KEY ("REGION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
--------------------------------------------------------
--  Constraints for Table FLG_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."FLG_MAS" ADD CONSTRAINT "FLG_MAS_PK" PRIMARY KEY ("FLG_ID", "FLG_SH_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."FLG_MAS" MODIFY ("FLG_SH_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."FLG_MAS" MODIFY ("FLG_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."FLG_MAS" MODIFY ("FLG_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ENTITY_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."ENTITY_MAS" ADD CONSTRAINT "ENTITY_MAS_PK" PRIMARY KEY ("ENTITY_ID", "ENTITY_TYPE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("ENTITY_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("ENTITY_TYPE_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("ENTITY_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TRANSACTION_SETTING
--------------------------------------------------------

  ALTER TABLE "HR"."TRANSACTION_SETTING" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TRANSACTION_SETTING" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TRANSACTION_SETTING" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TRANSACTION_SETTING" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TRANSACTION_SETTING" MODIFY ("SEQNO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BATCH_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."BATCH_MAS" MODIFY ("BATCH_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STUD_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."STUD_MAS" MODIFY ("STUD_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("S_ENTITY_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("S_FNAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("PH1" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUD_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table COUNTRIES
--------------------------------------------------------

  ALTER TABLE "HR"."COUNTRIES" ADD CONSTRAINT "COUNTRY_C_ID_PK" PRIMARY KEY ("COUNTRY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
 
  ALTER TABLE "HR"."COUNTRIES" MODIFY ("COUNTRY_ID" CONSTRAINT "COUNTRY_ID_NN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EMPLOYEES
--------------------------------------------------------

  ALTER TABLE "HR"."EMPLOYEES" MODIFY ("EMAIL" CONSTRAINT "EMP_EMAIL_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMPLOYEES" ADD CONSTRAINT "EMP_EMAIL_UK" UNIQUE ("EMAIL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
 
  ALTER TABLE "HR"."EMPLOYEES" ADD CONSTRAINT "EMP_EMP_ID_PK" PRIMARY KEY ("EMPLOYEE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
 
  ALTER TABLE "HR"."EMPLOYEES" MODIFY ("HIRE_DATE" CONSTRAINT "EMP_HIRE_DATE_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMPLOYEES" MODIFY ("JOB_ID" CONSTRAINT "EMP_JOB_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMPLOYEES" MODIFY ("LAST_NAME" CONSTRAINT "EMP_LAST_NAME_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."EMPLOYEES" ADD CONSTRAINT "EMP_SALARY_MIN" CHECK (salary > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table SUB_ALLOCATION
--------------------------------------------------------

  ALTER TABLE "HR"."SUB_ALLOCATION" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SUB_ALLOCATION" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SUB_ALLOCATION" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SUB_ALLOCATION" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."SUB_ALLOCATION" MODIFY ("ALLOCATION_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ENTITY_TYPE_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."ENTITY_TYPE_MAS" ADD CONSTRAINT "ENTITY_TYPE_MAS_PK" PRIMARY KEY ("ENTITY_TYPE_ID", "ENTITY_TYPE_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."ENTITY_TYPE_MAS" MODIFY ("ENTITY_TYPE_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_TYPE_MAS" MODIFY ("ENTITY_TYPE_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_TYPE_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_TYPE_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_TYPE_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."ENTITY_TYPE_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STATIC_COMBO
--------------------------------------------------------

  ALTER TABLE "HR"."STATIC_COMBO" ADD CONSTRAINT "STATIC_COMBO_PK" PRIMARY KEY ("SRNO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "HR"."STATIC_COMBO" MODIFY ("SRNO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TIMETABLE
--------------------------------------------------------

  ALTER TABLE "HR"."TIMETABLE" MODIFY ("BRANCH" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TIMETABLE" MODIFY ("BATCH_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TIMETABLE" MODIFY ("T_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TIMETABLE" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TIMETABLE" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TIMETABLE" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."TIMETABLE" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STUDY_LEVEL_MAS
--------------------------------------------------------

  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("BRANCH" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("STD_ID" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("STD_LEVEL" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("STD_TYPE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("ENT_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("ENT_USER" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("ENT_TERM" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."STUDY_LEVEL_MAS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DEPARTMENTS
--------------------------------------------------------

  ALTER TABLE "HR"."DEPARTMENTS" ADD CONSTRAINT "DEPT_ID_PK" PRIMARY KEY ("DEPARTMENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
 
  ALTER TABLE "HR"."DEPARTMENTS" MODIFY ("DEPARTMENT_NAME" CONSTRAINT "DEPT_NAME_NN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table JOB_HISTORY
--------------------------------------------------------

  ALTER TABLE "HR"."JOB_HISTORY" ADD CONSTRAINT "JHIST_DATE_INTERVAL" CHECK (end_date > start_date) ENABLE;
 
  ALTER TABLE "HR"."JOB_HISTORY" MODIFY ("EMPLOYEE_ID" CONSTRAINT "JHIST_EMPLOYEE_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."JOB_HISTORY" ADD CONSTRAINT "JHIST_EMP_ID_ST_DATE_PK" PRIMARY KEY ("EMPLOYEE_ID", "START_DATE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EXAMPLE"  ENABLE;
 
  ALTER TABLE "HR"."JOB_HISTORY" MODIFY ("END_DATE" CONSTRAINT "JHIST_END_DATE_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."JOB_HISTORY" MODIFY ("JOB_ID" CONSTRAINT "JHIST_JOB_NN" NOT NULL ENABLE);
 
  ALTER TABLE "HR"."JOB_HISTORY" MODIFY ("START_DATE" CONSTRAINT "JHIST_START_DATE_NN" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table COUNTRIES
--------------------------------------------------------

  ALTER TABLE "HR"."COUNTRIES" ADD CONSTRAINT "COUNTR_REG_FK" FOREIGN KEY ("REGION_ID")
	  REFERENCES "HR"."REGIONS" ("REGION_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DEPARTMENTS
--------------------------------------------------------

  ALTER TABLE "HR"."DEPARTMENTS" ADD CONSTRAINT "DEPT_LOC_FK" FOREIGN KEY ("LOCATION_ID")
	  REFERENCES "HR"."LOCATIONS" ("LOCATION_ID") ENABLE;
 
  ALTER TABLE "HR"."DEPARTMENTS" ADD CONSTRAINT "DEPT_MGR_FK" FOREIGN KEY ("MANAGER_ID")
	  REFERENCES "HR"."EMPLOYEES" ("EMPLOYEE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EMPLOYEES
--------------------------------------------------------

  ALTER TABLE "HR"."EMPLOYEES" ADD CONSTRAINT "EMP_DEPT_FK" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES "HR"."DEPARTMENTS" ("DEPARTMENT_ID") ENABLE;
 
  ALTER TABLE "HR"."EMPLOYEES" ADD CONSTRAINT "EMP_JOB_FK" FOREIGN KEY ("JOB_ID")
	  REFERENCES "HR"."JOBS" ("JOB_ID") ENABLE;
 
  ALTER TABLE "HR"."EMPLOYEES" ADD CONSTRAINT "EMP_MANAGER_FK" FOREIGN KEY ("MANAGER_ID")
	  REFERENCES "HR"."EMPLOYEES" ("EMPLOYEE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table JOB_HISTORY
--------------------------------------------------------

  ALTER TABLE "HR"."JOB_HISTORY" ADD CONSTRAINT "JHIST_DEPT_FK" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES "HR"."DEPARTMENTS" ("DEPARTMENT_ID") ENABLE;
 
  ALTER TABLE "HR"."JOB_HISTORY" ADD CONSTRAINT "JHIST_EMP_FK" FOREIGN KEY ("EMPLOYEE_ID")
	  REFERENCES "HR"."EMPLOYEES" ("EMPLOYEE_ID") ENABLE;
 
  ALTER TABLE "HR"."JOB_HISTORY" ADD CONSTRAINT "JHIST_JOB_FK" FOREIGN KEY ("JOB_ID")
	  REFERENCES "HR"."JOBS" ("JOB_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LOCATIONS
--------------------------------------------------------

  ALTER TABLE "HR"."LOCATIONS" ADD CONSTRAINT "LOC_C_ID_FK" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES "HR"."COUNTRIES" ("COUNTRY_ID") ENABLE;
--------------------------------------------------------
--  DDL for Trigger SECURE_EMPLOYEES
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "HR"."SECURE_EMPLOYEES" 
  BEFORE INSERT OR UPDATE OR DELETE ON employees
BEGIN
  secure_dml;
END secure_employees;
/
ALTER TRIGGER "HR"."SECURE_EMPLOYEES" DISABLE;
--------------------------------------------------------
--  DDL for Trigger UPDATE_JOB_HISTORY
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "HR"."UPDATE_JOB_HISTORY" 
  AFTER UPDATE OF job_id, department_id ON employees
  FOR EACH ROW
BEGIN
  add_job_history(:old.employee_id, :old.hire_date, sysdate,
                  :old.job_id, :old.department_id);
END;
/
ALTER TRIGGER "HR"."UPDATE_JOB_HISTORY" ENABLE;
--------------------------------------------------------
--  DDL for Package PKG_BATCH_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_BATCH_MAS" AS 

  type ref_cur is REF CURSOR;
  
  procedure prc_mas_ins(
                          p_branch batch_mas.branch%type, 
                          p_batch_id out batch_mas.batch_id%type, 
                          p_batch_name batch_mas.batch_name%type, 
                          p_ref_sub_id batch_mas.ref_sub_id%type, 
                          p_ref_t_entity_id batch_mas.ref_t_entity_id%type,
                          p_fr_time batch_mas.fr_time%type, 
                          p_to_time batch_mas.to_time%type,
                          p_is_active batch_mas.is_active%type,
                          p_ent_term batch_mas.ent_term%type, 
                          p_ent_user batch_mas.ent_user%type, 
                          --p_time_stamp out sub_mas.time_stamp%type,
                          p_flg out varchar2,
                          p_msg out varchar2
                         );
    
   procedure prc_mas_upd(
                          p_branch batch_mas.branch%type, 
                          p_batch_id batch_mas.batch_id%type, 
                          p_batch_name batch_mas.batch_name%type, 
                          p_ref_sub_id batch_mas.ref_sub_id%type, 
                          p_ref_t_entity_id batch_mas.ref_t_entity_id%type,
                          p_fr_time batch_mas.fr_time%type, 
                          p_to_time batch_mas.to_time%type, 
                          p_is_active batch_mas.is_active%type,
                          p_upd_term batch_mas.ent_term%type, 
                          p_upd_user batch_mas.ent_user%type, 
                          --p_time_stamp in out sub_mas.time_stamp%type,
                          p_flg out varchar2,
                          p_msg out varchar2
                         );

  procedure prc_mas_del(
                        p_batch_id batch_mas.batch_id%type, 
                        p_flg out varchar2,
                        p_msg out varchar2
                       );
  
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            );
END PKG_BATCH_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_CHP_DET
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_CHP_DET" AS 

  type ref_cur is REF CURSOR;
  
  procedure prc_mas_ins( p_ref_sub_id chp_det.ref_sub_id%type,
                         p_seqno out  chp_det.SEQNO%type,
                         p_chp_id in chp_det.chp_id%type,  
                         p_chp_name chp_det.chp_name%type, 
                         p_description chp_det.description%type,
                         p_remark chp_det.remark%type,  
                         p_ent_term chp_det.ent_term%type,
                         p_ent_user chp_det.ent_user%type,
                         /*p_time_stamp out chp_det.time_stamp%type,*/
                         p_flg out varchar2,
                         p_msg out varchar2
                       ) ;
  ---------------------------------------
  procedure prc_mas_upd( p_ref_sub_id chp_det.ref_sub_id%type,
                         p_seqno  chp_det.SEQNO%type,
                         p_chp_id chp_det.chp_id%type,
                         p_chp_name chp_det.chp_name%type,
                         p_description chp_det.description%type,
                         p_remark chp_det.remark%type,
                         p_upd_term chp_det.ent_term%type,
                         p_upd_user chp_det.ent_user%type,
                         /*p_time_stamp in out chp_det.time_stamp%type,*/
                         p_flg out varchar2,
                         p_msg out varchar2
                       );
  
  ---------------------------------------------------
  procedure prc_mas_del(p_seqno chp_det.seqno%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );
  ---------------------------------------------------
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ); 

END PKG_CHP_DET;

/
--------------------------------------------------------
--  DDL for Package PKG_EMP_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_EMP_MAS" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
type ref_cur is REF CURSOR;
  
  procedure prc_emp_ins(p_branch EMP_MAS.BRANCH%type,
                        p_emp_type varchar,
                        /*p_gr_no out EMP_MAS.GR_NO%type,*/
                        p_f_name EMP_MAS.F_NAME%type,
                        p_m_name EMP_MAS.M_NAME%type,
                        p_l_name EMP_MAS.L_NAME%type,
                        /*p_dob EMP_MAS.DOB%type,
                        p_doj EMP_MAS.DOJ%type,
                        p_leave_date EMP_MAS.LEAVE_DATE%type,*/
                        p_sex EMP_MAS.SEX%type,
                        p_blood_grp EMP_MAS.BLOOD_GRP%type,
                        p_phone1 EMP_MAS.PHONE1%type,
                        p_phone2 EMP_MAS.PHONE2%type,
                        /*p_photo EMP_MAS.PHOTO%type,*/
                        p_add1 EMP_MAS.ADD1%type,
                        p_add2 EMP_MAS.ADD2%type,
                        p_city EMP_MAS.CITY%type,
                        p_state EMP_MAS.STATE%type,
                        p_pincode EMP_MAS.PINCODE%type,
                        p_email_id EMP_MAS.EMAIL_ID%type,
                        p_ent_user EMP_MAS.ENT_USER%type,
                        p_ent_term EMP_MAS.ENT_TERM%type,
                        /*p_time_stamp in out EMP_MAS.TIME_STAMP%type,*/
                        p_entity_id out EMP_MAS.ENTITY_ID%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                      );
  
  procedure prc_emp_upd(p_branch EMP_MAS.BRANCH%type,
                        p_entity_id EMP_MAS.ENTITY_ID%type,
                        p_emp_type varchar,
                        /*p_gr_no EMP_MAS.GR_NO%type,*/
                        p_f_name EMP_MAS.F_NAME%type,
                        p_m_name EMP_MAS.M_NAME%type,
                        p_l_name EMP_MAS.L_NAME%type,
                        /*p_dob EMP_MAS.DOB%type,
                        p_doj EMP_MAS.DOJ%type,
                        p_leave_date EMP_MAS.LEAVE_DATE%type,*/
                        p_sex EMP_MAS.SEX%type,
                        p_blood_grp EMP_MAS.BLOOD_GRP%type,
                        p_phone1 EMP_MAS.PHONE1%type,
                        p_phone2 EMP_MAS.PHONE2%type,
                        /*p_photo EMP_MAS.PHOTO%type,*/
                        p_add1 EMP_MAS.ADD1%type,
                        p_add2 EMP_MAS.ADD2%type,
                        p_city EMP_MAS.CITY%type,
                        p_state EMP_MAS.STATE%type,
                        p_pincode EMP_MAS.PINCODE%type,
                        p_email_id EMP_MAS.EMAIL_ID%type,
                        p_upd_user EMP_MAS.UPD_USER%type,
                        p_upd_term EMP_MAS.UPD_TERM%type,
                        /*p_time_stamp in out EMP_MAS.TIME_STAMP%type,*/
                        p_flg out varchar2,
                        p_msg out varchar2
                      );
  
  procedure prc_emp_del(p_branch EMP_MAS.BRANCH%type,
                        p_entity_id EMP_MAS.ENTITY_ID%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );
                       
  procedure prc_emp_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            );
  
END PKG_EMP_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_ENTITY_TYPE_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_ENTITY_TYPE_MAS" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
type ref_cur is REF CURSOR;

procedure prc_fetch_data(p_criteria varchar2, p_data out ref_cur);

END PKG_ENTITY_TYPE_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_EXAM_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_EXAM_MAS" AS 

  type ref_cur is REF CURSOR;

  procedure prc_mas_ins(  p_branch       exam_mas.branch%type,
                          p_batch_id     exam_mas.batch_id%type,
                          p_exam_id      out exam_mas.exam_id %type,
                          p_ref_sub_id   exam_mas.ref_sub_id%type,
                          p_total_mark   exam_mas.total_mark%type,
                          p_exam_type    exam_mas.exam_type%type,
                          p_type_det     exam_mas.type_det%type,
                          p_paper_set_by exam_mas.paper_set_by%type,
                          p_exam_date    exam_mas.exam_date%type,
                          p_exam_time    exam_mas.exam_time%type,
                          p_duration     exam_mas.duration%type,
                          p_supervisor   exam_mas.supervisor%type,
                          p_ent_term exam_mas.ent_term%type,
                          p_ent_user exam_mas.ent_user%type,
                          /*p_time_stamp out exam_mas.time_stamp%type,*/
                          p_flg out varchar2,
                          p_msg out varchar2
                        );

   procedure prc_mas_upd(
                          p_branch       exam_mas.branch%type,
                          p_batch_id     exam_mas.batch_id%type,
                          p_exam_id      exam_mas.exam_id %type,
                          p_ref_sub_id   exam_mas.ref_sub_id%type,
                          p_total_mark   exam_mas.total_mark%type,
                          p_exam_type    exam_mas.exam_type%type,
                          p_type_det     exam_mas.type_det%type,
                          p_paper_set_by exam_mas.paper_set_by%type,
                          p_exam_date    exam_mas.exam_date%type,
                          p_exam_time    exam_mas.exam_time%type,
                          p_duration     exam_mas.duration%type,
                          p_supervisor   exam_mas.supervisor%type,
                          p_upd_term     exam_mas.ent_term%type,
                          p_upd_user     exam_mas.ent_user%type,
                          /*p_time_stamp   in out exam_mas.time_stamp%type,*/
                          p_flg          out varchar2,
                          p_msg          out varchar2
                        );

  procedure prc_mas_del(p_exam_id exam_mas.exam_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );

  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            );

END PKG_EXAM_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_GRIDFIELD_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_GRIDFIELD_MAS" 
AS
  type ref_cur is REF CURSOR;
  
  procedure prc_mas_ins(
                      P_SEQNO             out GRID_FIELDS.seqno%type,
                      P_MENU_NAME         GRID_FIELDS.MENU_NAME%type,
                      P_ORD               GRID_FIELDS.ORD%type,
                      P_CTRL_NAME         GRID_FIELDS.CTRL_NAME%type,
                      P_DATA_FIELD_NAME   GRID_FIELDS.DATA_FIELD_NAME%type,
                      P_FIELD_SIZE        GRID_FIELDS.FIELD_SIZE%type,
                      P_DISP_NAME         GRID_FIELDS.DISP_NAME%type,
                      P_COL_TYPE          GRID_FIELDS.COL_TYPE%type,
                      P_COMBO_FLG         GRID_FIELDS.COMBO_FLG%type,
                      P_COMBO_BIND_ID     GRID_FIELDS.COMBO_BIND_ID%type,
                      P_EXCEL_FIELD_NAME  GRID_FIELDS.EXCEL_FIELD_NAME%type,
                      P_REMARK            GRID_FIELDS.REMARK%type,
                      P_EXTRA_REMARK      GRID_FIELDS.EXTRA_REMARK%type,
                      p_flg OUT VARCHAR2,
                      p_msg OUT VARCHAR2 
        );
        
    procedure prc_mas_upd(
                          P_SEQNO GRID_FIELDS.SEQNO%type,
                          P_MENU_NAME GRID_FIELDS.MENU_NAME%type,
                          P_ORD GRID_FIELDS.ORD%type,
                          P_CTRL_NAME GRID_FIELDS.CTRL_NAME%type,
                          P_DATA_FIELD_NAME GRID_FIELDS.DATA_FIELD_NAME%type,
                          P_FIELD_SIZE GRID_FIELDS.FIELD_SIZE%type,
                          P_DISP_NAME GRID_FIELDS.DISP_NAME%type,
                          P_COL_TYPE GRID_FIELDS.COL_TYPE%type,
                          P_COMBO_FLG GRID_FIELDS.COMBO_FLG%type,
                          P_COMBO_BIND_ID GRID_FIELDS.COMBO_BIND_ID%type,
                          P_EXCEL_FIELD_NAME GRID_FIELDS.EXCEL_FIELD_NAME%type,
                          P_REMARK GRID_FIELDS.REMARK%type,
                          P_EXTRA_REMARK GRID_FIELDS.EXTRA_REMARK%type,
                          p_flg OUT VARCHAR2,
                          p_msg OUT VARCHAR2 
        );
        
        
  procedure prc_mas_del(
                        P_SEQNO GRID_FIELDS.SEQNO%type, 
                        p_flg out varchar2,
                        p_msg out varchar2
                       );
  
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            );        
  END PKG_GRIDFIELD_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_MONEY_FLOW
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_MONEY_FLOW" AS 

  type ref_cur is REF CURSOR;
  
  procedure prc_mas_ins(
                        p_branch          money_flow.branch%type,
                        p_trn_id          out money_flow.trn_id%type,
                        p_trn_type        money_flow.trn_type%type,
                        p_from_type       money_flow.from_type%type,
                        p_from_entity_id  money_flow.from_entity_id%type,
                        p_to_type         money_flow.to_type%type,
                        p_to_entity_id    money_flow.to_entity_id%type,
                        p_amt             money_flow.amt%type,
                        p_t_date          money_flow.t_date%type,
                        p_concern_prsn    money_flow.concern_prsn%type,
                        p_ent_term        money_flow.ent_term%type,
                        p_ent_user        money_flow.ent_user%type,
                        /*p_time_stamp      out money_flow.time_stamp%type,*/
                        p_flg             out varchar2,
                        p_msg             out  varchar2
                      );

   procedure prc_mas_upd(
                          p_branch          money_flow.branch%type,
                          p_trn_id          money_flow.trn_id%type,
                          p_trn_type        money_flow.trn_type%type,
                          p_from_type       money_flow.from_type%type,
                          p_from_entity_id  money_flow.from_entity_id%type,
                          p_to_type         money_flow.to_type%type,
                          p_to_entity_id    money_flow.to_entity_id%type,
                          p_amt             money_flow.amt%type,
                          p_t_date          money_flow.t_date%type,
                          p_concern_prsn    money_flow.concern_prsn%type,
                          p_upd_term        money_flow.upd_term%type,
                          p_upd_user        money_flow.upd_user%type,
                          /*p_time_stamp      in out money_flow.time_stamp%type,*/
                          p_flg             out varchar2,
                          p_msg             out varchar2
                       );

  procedure prc_mas_del(p_branch          money_flow.branch%type,
                        p_trn_id          money_flow.trn_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );

  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ); 

END PKG_MONEY_FLOW;

/
--------------------------------------------------------
--  DDL for Package PKG_RESULT_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_RESULT_MAS" AS 

 type ref_cur is REF CURSOR;

  procedure prc_mas_ins(  p_exam_id           RESULT_MAS.EXAM_ID%type,
                          p_entity_id         RESULT_MAS.ENTITY_ID%type,
                          p_entity_type_id    RESULT_MAS.ENTITY_TYPE_ID%type,
                          p_score             RESULT_MAS.SCORE%type,
                          p_remark            RESULT_MAS.REMARK%type,
                          p_srno          out RESULT_MAS.SRNO%type,
                          p_ent_term          RESULT_MAS.ent_term%type,
                          p_ent_user          RESULT_MAS.ent_user%type,
                          /*p_time_stamp  out RESULT_MAS.time_stamp%type,*/
                          p_flg           out varchar2,
                          p_msg           out varchar2
                        );

   procedure prc_mas_upd(
                          p_exam_id               RESULT_MAS.EXAM_ID%type,
                          p_entity_id             RESULT_MAS.ENTITY_ID%type,
                          p_entity_type_id        RESULT_MAS.ENTITY_TYPE_ID%type,
                          p_score                 RESULT_MAS.SCORE%type,
                          p_remark                RESULT_MAS.REMARK%type,
                          p_srno                  RESULT_MAS.SRNO%type,
                          p_upd_term              RESULT_MAS.UPD_TERM%type,
                          p_upd_user              RESULT_MAS.UPD_USER%type,
                          /*p_time_stamp   in out exam_mas.time_stamp%type,*/
                          p_flg               out varchar2,
                          p_msg               out varchar2
                        );

  procedure prc_mas_del(p_srno RESULT_MAS.SRNO%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );

  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            );

END PKG_RESULT_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_STUDENT_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_STUDENT_MAS" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
type ref_cur is REF CURSOR;
  
  procedure prc_stud_ins(p_data out ref_cur);
  
  procedure prc_stud_upd(p_data out ref_cur);
  
  procedure prc_stud_del(p_data out ref_cur);
  
END PKG_STUDENT_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_STUDY_LEVEL_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_STUDY_LEVEL_MAS" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
type ref_cur is REF CURSOR;
procedure prc_mas_ins(p_branch_id  STUDY_LEVEL_MAS.branch%type,
                      p_std_id OUT STUDY_LEVEL_MAS.STD_ID%type,
                      p_std_level STUDY_LEVEL_MAS.STD_LEVEL%type,
                      p_std_med STUDY_LEVEL_MAS.STD_MEDIUM%type,
                      p_std_type STUDY_LEVEL_MAS.STD_TYPE%type,
                      p_std_name STUDY_LEVEL_MAS.STD_NAME%type,
                      p_is_active STUDY_LEVEL_MAS.IS_ACTIVE%type,
                      p_ent_user STUDY_LEVEL_MAS.ENT_USER%type,
                      p_ent_term STUDY_LEVEL_MAS.ENT_TERM%type,
                      --p_time_stamp in out STUDY_LEVEL_MAS.TIME_STAMP%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                    );
                    
procedure prc_mas_upd(p_branch_id  STUDY_LEVEL_MAS.branch%type,
                      p_std_id STUDY_LEVEL_MAS.STD_ID%type,
                      p_std_level STUDY_LEVEL_MAS.STD_LEVEL%type,
                      p_std_med STUDY_LEVEL_MAS.STD_MEDIUM%type,
                      p_std_type STUDY_LEVEL_MAS.STD_TYPE%type,
                      p_std_name STUDY_LEVEL_MAS.STD_NAME%type,
                      p_is_active STUDY_LEVEL_MAS.IS_ACTIVE%type,
                      p_upd_user STUDY_LEVEL_MAS.UPD_USER%type,
                      p_upd_term STUDY_LEVEL_MAS.UPD_TERM%type,
                      --p_time_stamp in out STUDY_LEVEL_MAS.TIME_STAMP%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                    );
                    
procedure prc_mas_del(p_branch_id STUDY_LEVEL_MAS.branch%type,
                      p_std_id STUDY_LEVEL_MAS.STD_ID%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                     );
                     
procedure prc_get_data(p_criteria varchar2,
                       p_data out ref_cur
                      );

                      
END PKG_STUDY_LEVEL_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_SUB_ALLOCATION
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_SUB_ALLOCATION" AS 

  type ref_cur is REF CURSOR;

  procedure prc_mas_ins( p_branch sub_allocation.branch%type,
                         p_allocation_id out sub_allocation.allocation_id%type,
                         p_batch_id sub_allocation.batch_id%type,
                         p_entity_id sub_allocation.entity_id%type,
                         p_entity_type_id sub_allocation.entity_type_id%type,
                         p_ref_sub_id sub_allocation.ref_sub_id%type,
                         p_is_active sub_allocation.is_active%type,
                         p_remark sub_allocation.remark%type,
                         p_ent_term sub_allocation.ent_term%type,
                         p_ent_user sub_allocation.ent_user%type,
                         --p_time_stamp out sub_allocation.time_stamp%type,
                         p_flg out varchar2,
                         p_msg out varchar2
                       ) ;
  ---------------------------------------
  procedure prc_mas_upd( p_branch sub_allocation.branch%type,
                         p_allocation_id sub_allocation.allocation_id%type,
                         p_batch_id sub_allocation.batch_id%type,
                         p_entity_id sub_allocation.entity_id%type,
                         p_entity_type_id sub_allocation.entity_type_id%type,
                         p_ref_sub_id sub_allocation.ref_sub_id%type,
                         p_is_active sub_allocation.is_active%type,
                         p_remark sub_allocation.remark%type,
                         p_upd_term sub_allocation.ent_term%type,
                         p_upd_user sub_allocation.ent_user%type,
                         --p_time_stamp in out sub_allocation.time_stamp%type,
                         p_flg out varchar2,
                         p_msg out varchar2
                       );

  ---------------------------------------------------
  procedure prc_mas_del(p_allocation_id sub_allocation.allocation_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );
  ---------------------------------------------------
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ); 

END PKG_SUB_ALLOCATION;

/
--------------------------------------------------------
--  DDL for Package PKG_SUB_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_SUB_MAS" AS 

  type ref_cur is REF CURSOR;
  
  procedure prc_mas_ins( 
                          p_branch sub_mas.branch%type,
                          p_ref_std_id sub_mas.ref_std_id%type,
                          p_sub_id out sub_mas.sub_id%type, 
                          p_sub_name sub_mas.sub_name%type, 
                          p_have_exam sub_mas.have_exam%type,
                          p_is_active sub_mas.is_active%type,
                          p_ent_user sub_mas.ent_user%type,
                          p_ent_term sub_mas.ent_term%type,
                          /*p_time_stamp out sub_mas.time_stamp%type,*/
                          p_flg out varchar2,
                          p_msg out varchar2
                       );
   
  
   procedure prc_mas_upd( 
                          p_branch sub_mas.branch%type,
                          p_ref_std_id sub_mas.ref_std_id%type,
                          p_sub_id sub_mas.sub_id%type, 
                          p_sub_name sub_mas.sub_name%type, 
                          p_have_exam sub_mas.have_exam%type,
                          p_is_active sub_mas.is_active%type,
                          p_upd_term sub_mas.ent_term%type,
                          p_upd_user sub_mas.ent_user%type,
                          /*p_time_stamp in out sub_mas.time_stamp%type,*/
                          p_flg out varchar2,
                          p_msg out varchar2
                       );
  
  procedure prc_mas_del(p_branch sub_mas.branch%type,
                        p_sub_id sub_mas.sub_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );
  
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_sub_data out ref_cur,
                             p_chp_data out ref_cur
                            );

END PKG_SUB_MAS;

/
--------------------------------------------------------
--  DDL for Package PKG_TIMETABLE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_TIMETABLE" AS 
type ref_cur is REF CURSOR;

  procedure prc_mas_ins(
                          p_branch_id timetable.branch%type,
                          p_batch_id timetable.batch_id%type,
                          p_t_date timetable.t_date%type,
                          p_fr_time timetable.fr_time%type,
                          p_to_time timetable.to_time%type,
                          p_ref_sub_id timetable.ref_sub_id%type,
                          p_ref_t_entity_id timetable.ref_t_entity_id%type,
                          p_ent_term timetable.ent_term%type,
                          p_ent_user timetable.ent_user%type,
                          /*p_time_stamp out timetable.time_stamp%type,*/
                          p_flg out varchar2,
                          p_msg out varchar2
                      );

   procedure prc_mas_upd(
                        p_branch timetable.branch%type,
                        p_batch_id timetable.batch_id%type,
                        p_t_date timetable.t_date%type,
                        p_fr_time timetable.fr_time%type,
                        p_to_time timetable.to_time%type,
                        p_ref_sub_id timetable.ref_sub_id%type,
                        p_ref_t_entity_id timetable.ref_t_entity_id%type,
                        p_upd_term timetable.ent_term%type,
                        p_upd_user timetable.ent_user%type,
                        /*p_time_stamp in out timetable.time_stamp%type,*/
                        p_flg out varchar2,
                        p_msg out varchar2
                     );

  procedure prc_mas_del(p_uniqid timetable.batch_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );

  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ); 
END PKG_TIMETABLE;

/
--------------------------------------------------------
--  DDL for Package PKG_TRANSACTION_SETTING
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_TRANSACTION_SETTING" AS 
type ref_cur is REF CURSOR;

  procedure prc_mas_ins(
                          p_batch_id           transaction_setting.batch_id%type,
                          p_seqno              out transaction_setting.seqno%type,
                          p_ref_entity_type_id transaction_setting.ref_entity_type_id%type,
                          p_amount             transaction_setting.amount%type,
                          p_cash_chq_ratio     transaction_setting.cash_chq_ratio%type,
                          p_allow_emi          transaction_setting.allow_emi%type,
                          p_allow_advance      transaction_setting.allow_advance%type,
                          p_no_of_emi          transaction_setting.no_of_emi%type,
                          p_discount           transaction_setting.discount%type,
                          p_remark             transaction_setting.remark%type,
                          p_ent_term           transaction_setting.ent_term%type,
                          p_ent_user           transaction_setting.ent_user%type,
                          /*p_time_stamp out     transaction_setting.time_stamp%type,*/
                          p_flg out varchar2,
                          p_msg out varchar2
                       );


   procedure prc_mas_upd(
                          p_batch_id           transaction_setting.batch_id%type,
                          p_seqno              transaction_setting.seqno%type,
                          p_ref_entity_type_id transaction_setting.ref_entity_type_id%type,
                          p_amount             transaction_setting.amount%type,
                          p_cash_chq_ratio     transaction_setting.cash_chq_ratio%type,
                          p_allow_emi          transaction_setting.allow_emi%type,
                          p_allow_advance      transaction_setting.allow_advance%type,
                          p_no_of_emi          transaction_setting.no_of_emi%type,
                          p_discount           transaction_setting.discount%type,
                          p_remark             transaction_setting.remark%type,
                          p_upd_term transaction_setting.upd_term%type,
                          p_upd_user transaction_setting.upd_user%type,
                          /*p_time_stamp in out transaction_setting.time_stamp%type,*/
                          p_flg out varchar2,
                          p_msg out varchar2
                       );

  procedure prc_mas_del(
                        p_seqno    transaction_setting.seqno%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       );

  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            );
  

END PKG_TRANSACTION_SETTING;

/
--------------------------------------------------------
--  DDL for Package PKG_TUITION_BASE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "HR"."PKG_TUITION_BASE" 
AS
type ref_cur
IS
  ref
  CURSOR;
    --
    -- Get Grid fields details
    --
    PROCEDURE prc_fetch_grid_fields(
        p_menu_name VARCHAR2,
        p_ctrl_name VARCHAR2,
        p_data OUT ref_cur);
    --
    -- Get Sub List
    --
    PROCEDURE prc_get_sub_list(
        p_std_id         VARCHAR2,
        p_subject_status VARCHAR2,
        p_data OUT ref_cur);
    --
    -- Get Chapter details
    --
    PROCEDURE prc_get_chp_list(
        p_sub_id VARCHAR2,
        p_data OUT ref_cur);
    --
    -- Get Std Type
    --
    PROCEDURE prc_get_std_type(
        p_data OUT ref_cur);
    --
    -- Get Std Combo Active/InActive
    --
    PROCEDURE prc_get_std_list(
        p_branch       VARCHAR2,
        p_std_status VARCHAR2,
        p_std_list OUT ref_cur );
        
    PROCEDURE prc_get_std_medium(p_data out ref_cur);    
    
    PROCEDURE prc_get_teacher_list(flg varchar,p_data out ref_cur);
    
    PROCEDURE prc_get_batch_list(flg varchar,p_data out ref_cur);
    
    PROCEDURE prc_get_entity_type(flg varchar,p_data out ref_cur);
    
    PROCEDURE prc_get_static_combo(p_static_flg varchar2, p_data out ref_cur);
    
    PROCEDURE prc_get_exam_list(p_exam_flg varchar2, p_data out ref_cur);
    
    PROCEDURE prc_get_emp_list(p_entity_type varchar2,p_is_active varchar2, p_data out ref_cur);
    
  END PKG_TUiTION_BASE;

/
--------------------------------------------------------
--  DDL for Package Body PKG_BATCH_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_BATCH_MAS" AS

  procedure prc_mas_ins(
                          p_branch batch_mas.branch%type, 
                          p_batch_id out batch_mas.batch_id%type, 
                          p_batch_name batch_mas.batch_name%type, 
                          p_ref_sub_id batch_mas.ref_sub_id%type, 
                          p_ref_t_entity_id batch_mas.ref_t_entity_id%type,
                          p_fr_time batch_mas.fr_time%type, 
                          p_to_time batch_mas.to_time%type, 
                          p_is_active batch_mas.is_active%type,
                          p_ent_term batch_mas.ent_term%type, 
                          p_ent_user batch_mas.ent_user%type, 
                          --p_time_stamp out sub_mas.time_stamp%type,
                          p_flg out varchar2,
                          p_msg out varchar2
                        ) as
begin
    select max(nvl(batch_id,0))+1 
      into p_batch_id 
      from batch_mas;
      
    begin
        insert into batch_mas
                  (
                    branch,     batch_id,        batch_name, 
                    ref_sub_id, ref_t_entity_id, fr_time, 
                    to_time,    ent_date,        ent_user,   
                    ent_term,   time_stamp,      is_active
                  )
                  values
                  (p_branch,      p_batch_id,          p_batch_name,
                   p_ref_sub_id,  p_ref_t_entity_id,   p_fr_time,
                   p_to_time,     sysdate,             p_ent_user,
                   p_ent_term,    systimestamp ,       p_is_active
                 );
        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           --p_time_stamp := systimestamp;
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
end;
---------------------
procedure prc_mas_upd(
                      p_branch batch_mas.branch%type, 
                      p_batch_id batch_mas.batch_id%type, 
                      p_batch_name batch_mas.batch_name%type, 
                      p_ref_sub_id batch_mas.ref_sub_id%type, 
                      p_ref_t_entity_id batch_mas.ref_t_entity_id%type,
                      p_fr_time batch_mas.fr_time%type, 
                      p_to_time batch_mas.to_time%type, 
                      p_is_active batch_mas.is_active%type,
                      p_upd_term batch_mas.ent_term%type, 
                      p_upd_user batch_mas.ent_user%type, 
                      --p_time_stamp in out sub_mas.time_stamp%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                     ) as
    
v_cnt number(3);
begin
     
     update batch_mas set 
                        batch_name = p_batch_name,
                        ref_sub_id = p_ref_sub_id,
                        ref_t_entity_id = p_ref_t_entity_id,
                        fr_time = p_fr_time,
                        to_time = p_to_time,
                        is_active = p_is_active,
                        upd_date   = sysdate,
                        upd_user   = p_upd_user,
                        upd_term   = p_upd_term--,
                        --time_stamp = systimestamp
                  where branch = p_branch
                        and batch_id = p_batch_id;
                        --and time_stamp = p_time_stamp;
    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   batch_mas a
       where  a.branch = p_branch
              and batch_id = p_batch_id;
              --and a.time_stamp = p_time_stamp;
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
end;
---------------------------------------
procedure prc_mas_del(
                      p_batch_id batch_mas.batch_id%type, 
                      p_flg out varchar2,
                      p_msg out varchar2
                     ) as
begin
  -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
  delete from batch_mas a
        where a.batch_id = p_batch_id;

  if sql%rowcount > 0 then
     p_flg:= 'Y';
     p_msg:= sql%rowcount || ' record(s) deleted successfully!';
  else
     p_flg := 'T';
     p_msg := 'Please refresh once. As some contain change by another user!';
     return;
  end if;
END prc_mas_del;
---------------------------------------------------
procedure prc_mas_get_data(p_criteria varchar2,
                           p_data out ref_cur
                          ) as
v_str varchar2(1000);
begin
   v_str := 'SELECT BRANCH,
                    BATCH_ID,
                    BATCH_NAME,
                    REF_SUB_ID,
                    REF_T_ENTITY_ID,
                    FR_TIME,
                    TO_TIME,
                    TIME_STAMP
             from   batch_mas a
             where  1 = 1
                    and ' ||p_criteria;
   open p_data for v_str;
end;

END PKG_BATCH_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_CHP_DET
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_CHP_DET" AS

  procedure prc_mas_ins( p_ref_sub_id chp_det.ref_sub_id%type,
                         p_seqno out  chp_det.SEQNO%type,
                         p_chp_id in chp_det.chp_id%type,  
                         p_chp_name chp_det.chp_name%type, 
                         p_description chp_det.description%type,
                         p_remark chp_det.remark%type,  
                         p_ent_term chp_det.ent_term%type,
                         p_ent_user chp_det.ent_user%type,
                         /*p_time_stamp out chp_det.time_stamp%type,*/
                         p_flg out varchar2,
                         p_msg out varchar2
                       ) as
  begin
  SELECT nvl(MAX(SEQNO),0)+1 INTO p_seqno FROM CHP_DET;
    begin
        
        insert into chp_det
          (seqno,        ref_sub_id,   chp_id,    chp_name,
           description,  remark,       ent_date,
           ent_term,     ent_user,     time_stamp
          )
        values
          (p_seqno,      p_ref_sub_id, p_chp_id,  p_chp_name,
           p_description,p_remark,     sysdate,
           p_ent_term,   p_ent_user,   systimestamp);

        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           --p_time_stamp := systimestamp;
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
  end;
  ---------------------------------------
  procedure prc_mas_upd( p_ref_sub_id chp_det.ref_sub_id%type,
                         p_seqno  chp_det.SEQNO%type,
                         p_chp_id chp_det.chp_id%type,
                         p_chp_name chp_det.chp_name%type,
                         p_description chp_det.description%type,
                         p_remark chp_det.remark%type,
                         p_upd_term chp_det.ent_term%type,
                         p_upd_user chp_det.ent_user%type,
                         /*p_time_stamp in out chp_det.time_stamp%type,*/
                         p_flg out varchar2,
                         p_msg out varchar2
                       ) as
  v_cnt number(3);
  begin
     
     update chp_det a
        set a.ref_sub_id = p_ref_sub_id,
            a.chp_id = p_chp_id,
            a.chp_name = p_chp_name,
            a.description = p_description,
            a.remark = p_remark,
            a.upd_date = sysdate,
            a.upd_user = p_upd_user,
            a.upd_term = p_upd_term
      where a.seqno = p_seqno;
        --and time_stamp = p_time_stamp;

    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(*)
              into v_cnt
         from chp_det a
        where a.seqno = p_seqno;
          --and a.time_stamp = p_time_stamp;
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
  end;


  ---------------------------------------------------
  procedure prc_mas_del(p_seqno chp_det.seqno%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       ) as
  begin
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
    delete from chp_det a
          where  a.seqno = p_seqno;

    if sql%rowcount > 0 then
       p_flg:= 'Y';
       p_msg:= sql%rowcount || ' record(s) deleted successfully!';
    else
       p_flg := 'T';
       p_msg := 'Please refresh once. As some contain change by another user!';
       return;
    end if;
  END prc_mas_del;
  ---------------------------------------------------
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ) as
  v_str varchar2(1000);
  begin
     v_str := 'select *
               from   chp_det a
               where  1 = 1
                      and ' ||p_criteria;
     open p_data for v_str;
  end;

END PKG_CHP_DET;

/
--------------------------------------------------------
--  DDL for Package Body PKG_EMP_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_EMP_MAS" AS

  procedure prc_emp_ins(p_branch EMP_MAS.BRANCH%type,
                        p_emp_type varchar,
                        /*p_gr_no out EMP_MAS.GR_NO%type,*/
                        p_f_name EMP_MAS.F_NAME%type,
                        p_m_name EMP_MAS.M_NAME%type,
                        p_l_name EMP_MAS.L_NAME%type,
                        /*p_dob EMP_MAS.DOB%type,
                        p_doj EMP_MAS.DOJ%type,
                        p_leave_date EMP_MAS.LEAVE_DATE%type,*/
                        p_sex EMP_MAS.SEX%type,
                        p_blood_grp EMP_MAS.BLOOD_GRP%type,
                        p_phone1 EMP_MAS.PHONE1%type,
                        p_phone2 EMP_MAS.PHONE2%type,
                        /*p_photo EMP_MAS.PHOTO%type,*/
                        p_add1 EMP_MAS.ADD1%type,
                        p_add2 EMP_MAS.ADD2%type,
                        p_city EMP_MAS.CITY%type,
                        p_state EMP_MAS.STATE%type,
                        p_pincode EMP_MAS.PINCODE%type,
                        p_email_id EMP_MAS.EMAIL_ID%type,
                        p_ent_user EMP_MAS.ENT_USER%type,
                        p_ent_term EMP_MAS.ENT_TERM%type,
                        /*p_time_stamp in out EMP_MAS.TIME_STAMP%type,*/
                        p_entity_id out EMP_MAS.ENTITY_ID%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                      ) AS
    --v_date date;
    --v_time_stamp EMP_MAS.TIME_STAMP%type;
    --v_entity_id EMP_MAS.ENTITY_ID%type;
    v_entity_type_id number;
  BEGIN
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_ins
    --v_date = sysdate;
    --v_time_stamp= timestamp;
    begin
        select seq_entity_id.NEXTVAL
               into p_entity_id
        from   dual;
        --p_entity_id := v_entity_id;
        INSERT INTO EMP_MAS
                  (
                    BRANCH,   ENTITY_ID,  /*GR_NO,*/
                    F_NAME,   M_NAME,     L_NAME,
                    /*DOB,      DOJ,        LEAVE_DATE,*/
                    SEX,      BLOOD_GRP,  PHONE1,
                    PHONE2,   /*PHOTO,*/      ADD1,
                    ADD2,     CITY,       STATE,
                    PINCODE,  EMAIL_ID,   ENT_DATE, 
                    ENT_USER, ENT_TERM,   TIME_STAMP
                  )
                  VALUES
                  (p_branch,  p_entity_id,  /*p_gr_no,*/
                   p_f_name,  p_m_name,     p_l_name,
                   /*p_dob,     p_doj,        p_leave_date,*/
                   p_sex,     p_blood_grp,  p_phone1,
                   p_phone2,  /*p_photo,*/      p_add1,
                   p_add2,    p_city,       p_state,
                   p_pincode, p_email_id,   sysdate,
                   p_ent_user,p_ent_term,   systimestamp
                  );
        if sql%rowcount > 0 then
            BEGIN
                SELECT entity_type_id
                  INTO v_entity_type_id
                  FROM ENTITY_TYPE_MAS a
                 WHERE a.entity_type_name = upper(p_emp_type);
            EXCEPTION
              WHEN no_data_found THEN
                p_flg := 'N';
                p_msg := 'Type not found in type master';
                return;
            END;
        
              INSERT
              INTO ENTITY_MAS
                (
                  ENTITY_ID,
                  ENTITY_TYPE_ID,
                  ENTITY_NAME,
                  IS_ACTIVE,
                  ENT_DATE,
                  ENT_USER,
                  ENT_TERM,
                  TIME_STAMP
                )
                VALUES
                (
                  p_entity_id,
                  v_entity_type_id,
                  p_f_name,
                  'Y',
                  SYSDATE,
                  p_ent_user,
                  p_ent_term,
                  systimestamp
                );
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           /*p_time_stamp := systimestamp;*/
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
  END prc_emp_ins;
   
  ---------------------------------------------------
  procedure prc_emp_upd(p_branch EMP_MAS.BRANCH%type,
                        p_entity_id EMP_MAS.ENTITY_ID%type,
                        p_emp_type varchar,
                        /*p_gr_no EMP_MAS.GR_NO%type,*/
                        p_f_name EMP_MAS.F_NAME%type,
                        p_m_name EMP_MAS.M_NAME%type,
                        p_l_name EMP_MAS.L_NAME%type,
                        /*p_dob EMP_MAS.DOB%type,
                        p_doj EMP_MAS.DOJ%type,
                        p_leave_date EMP_MAS.LEAVE_DATE%type,*/
                        p_sex EMP_MAS.SEX%type,
                        p_blood_grp EMP_MAS.BLOOD_GRP%type,
                        p_phone1 EMP_MAS.PHONE1%type,
                        p_phone2 EMP_MAS.PHONE2%type,
                        /*p_photo EMP_MAS.PHOTO%type,*/
                        p_add1 EMP_MAS.ADD1%type,
                        p_add2 EMP_MAS.ADD2%type,
                        p_city EMP_MAS.CITY%type,
                        p_state EMP_MAS.STATE%type,
                        p_pincode EMP_MAS.PINCODE%type,
                        p_email_id EMP_MAS.EMAIL_ID%type,
                        p_upd_user EMP_MAS.UPD_USER%type,
                        p_upd_term EMP_MAS.UPD_TERM%type,
                        /*p_time_stamp in out EMP_MAS.TIME_STAMP%type,*/
                        p_flg out varchar2,
                        p_msg out varchar2
                      ) AS
  v_cnt number(2);
  v_entity_type_id number;
  BEGIN
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_upd
    UPDATE EMP_MAS  SET /*GR_NO      = p_gr_no,*/
                        F_NAME     = p_f_name, 
                        M_NAME     = p_m_name, 
                        L_NAME     = p_l_name, 
                        /*DOB        = p_dob, 
                        DOJ        = p_doj, 
                        LEAVE_DATE = p_leave_date,*/ 
                        SEX        = p_sex,
                        BLOOD_GRP  = p_blood_grp, 
                        PHONE1     = p_phone1, 
                        PHONE2     = p_phone2, 
                        /*PHOTO      = p_photo,*/
                        ADD1       = p_add1,
                        ADD2       = p_add2,
                        CITY       = p_city,
                        STATE      = p_state,
                        PINCODE    = p_pincode,
                        EMAIL_ID   = p_email_id,
                        UPD_DATE   = sysdate,
                        UPD_USER   = p_upd_user,
                        UPD_TERM   = p_upd_term/*
                        TIME_STAMP = SYSTIMESTAMP*/
                  where branch = p_branch
                        and ENTITY_ID = p_entity_id
                        /*and TIME_STAMP = p_time_stamp*/;
    if sql%rowcount > 0 then
       BEGIN
          SELECT entity_type_id
            INTO v_entity_type_id
            FROM ENTITY_TYPE_MAS a
           WHERE a.entity_type_name = upper(p_emp_type);
      EXCEPTION
        WHEN no_data_found THEN
          p_flg := 'N';
          p_msg := 'Type not found in type master';
          return;
       END;
       UPDATE ENTITY_MAS a
          SET a.ENTITY_TYPE_ID = p_emp_type,
              a.ENTITY_NAME    = p_f_name,
              a.IS_ACTIVE      = 'Y',
              a.UPD_DATE       = sysdate,
              a.UPD_USER       = p_upd_user,
              a.UPD_TERM       = p_upd_term,
              a.TIME_STAMP     = systimestamp
        WHERE a.ENTITY_ID      = p_entity_id;
        IF sql%rowcount > 0 THEN
          p_flg        := 'Y';
          p_msg        := sql%rowcount || ' record(s) updated successfully!';
          RETURN;
       END IF; 
    else
       select count(1)
              into v_cnt
       from   emp_mas a
       where  a.branch = p_branch
              and a.entity_id = p_entity_id/*
              and a.time_stamp = p_time_stamp*/;
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
  END prc_emp_upd;

  ---------------------------------------------------
  procedure prc_emp_del(p_branch EMP_MAS.BRANCH%type,
                        p_entity_id EMP_MAS.ENTITY_ID%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       ) AS
  BEGIN
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
    delete from emp_mas a
          where a.branch = p_branch
                and a.entity_id = p_entity_id;

    if sql%rowcount > 0 then
       p_flg:= 'Y';
       p_msg:= sql%rowcount || ' record(s) deleted successfully!';
    else
       p_flg := 'T';
       p_msg := 'Please refresh once. As some contain change by another user!';
       return;
    end if;
  END prc_emp_del;
  ---------------------------------------------------
  procedure prc_emp_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ) as
  v_str varchar2(1000);
  begin
     v_str := 'select (SELECT C.ENTITY_TYPE_NAME FROM ENTITY_TYPE_MAS C WHERE C.ENTITY_TYPE_ID = B.ENTITY_TYPE_ID) ENTITY_TYPE_ID,a.*
                 from emp_mas a,entity_mas b
                where a.entity_id = b.entity_id
                  and ' ||p_criteria;
     open p_data for v_str;
  end;
END PKG_EMP_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_ENTITY_TYPE_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_ENTITY_TYPE_MAS" AS

  procedure prc_fetch_data(p_criteria varchar2, p_data out ref_cur) AS
  BEGIN
    -- TODO: Implementation required for procedure PKG_ENTITY_TYPE_MAS.prc_fetch_data
    open p_data for 
         select * from ENTITY_TYPE_MAS a;

    exception when others then
      RAISE_APPLICATION_ERROR(-20001, 'Problem in Fetching Entity Type Master');
  END prc_fetch_data;

END PKG_ENTITY_TYPE_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_EXAM_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_EXAM_MAS" AS

  procedure prc_mas_ins(  p_branch       exam_mas.branch%type,
                          p_batch_id     exam_mas.batch_id%type,
                          p_exam_id      out exam_mas.exam_id %type,
                          p_ref_sub_id   exam_mas.ref_sub_id%type,
                          p_total_mark   exam_mas.total_mark%type,
                          p_exam_type    exam_mas.exam_type%type,
                          p_type_det     exam_mas.type_det%type,
                          p_paper_set_by exam_mas.paper_set_by%type,
                          p_exam_date    exam_mas.exam_date%type,
                          p_exam_time    exam_mas.exam_time%type,
                          p_duration     exam_mas.duration%type,
                          p_supervisor   exam_mas.supervisor%type,
                          p_ent_term exam_mas.ent_term%type,
                          p_ent_user exam_mas.ent_user%type,
                          /*p_time_stamp out exam_mas.time_stamp%type,*/
                          p_flg out varchar2,
                          p_msg out varchar2
                     ) as
begin
    begin
        select nvl(max(exam_id),0) + 1 into p_exam_id from exam_mas;
        insert into exam_mas
          (branch,     batch_id,     exam_id,
           ref_sub_id, total_mark,   exam_type,
           type_det,   paper_set_by, exam_date,
           exam_time,  duration,     supervisor,
           ent_date,   ent_term,     ent_user,
           time_stamp
          )
        values
          (p_branch,     p_batch_id,     p_exam_id,
           p_ref_sub_id, p_total_mark,   p_exam_type,
           p_type_det,   p_paper_set_by, p_exam_date,
           p_exam_time,  p_duration,     p_supervisor,
           sysdate,      p_ent_term,     p_ent_user,
           systimestamp);

        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           /*p_time_stamp := systimestamp;*/
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
end;
---------------------
procedure prc_mas_upd(
                        p_branch       exam_mas.branch%type,
                        p_batch_id     exam_mas.batch_id%type,
                        p_exam_id      exam_mas.exam_id %type,
                        p_ref_sub_id   exam_mas.ref_sub_id%type,
                        p_total_mark   exam_mas.total_mark%type,
                        p_exam_type    exam_mas.exam_type%type,
                        p_type_det     exam_mas.type_det%type,
                        p_paper_set_by exam_mas.paper_set_by%type,
                        p_exam_date    exam_mas.exam_date%type,
                        p_exam_time    exam_mas.exam_time%type,
                        p_duration     exam_mas.duration%type,
                        p_supervisor   exam_mas.supervisor%type,
                        p_upd_term     exam_mas.ent_term%type,
                        p_upd_user     exam_mas.ent_user%type,
                        /*p_time_stamp   in out exam_mas.time_stamp%type,*/
                        p_flg          out varchar2,
                        p_msg          out varchar2
                     ) as

v_cnt number(3);
begin
     update exam_mas a
        set a.branch = p_branch,
            a.batch_id = p_batch_id,
            a.ref_sub_id = p_ref_sub_id,
            a.total_mark = p_total_mark,
            a.exam_type = p_exam_type,
            a.type_det = p_type_det,
            a.paper_set_by = p_paper_set_by,
            a.exam_date = p_exam_date,
            a.exam_time = p_exam_time,
            a.duration = p_duration,
            a.supervisor = p_supervisor,
            a.upd_date = sysdate,
            a.upd_user = p_upd_user,
            a.upd_term = p_upd_term,
            a.time_stamp = systimestamp
      where a.exam_id = p_exam_id;
            /*and a.time_stamp = p_time_stamp;*/


    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   exam_mas a
       where  exam_id = p_exam_id;
              /*and time_stamp = p_time_stamp;*/
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
end;
---------------------------------------
procedure prc_mas_del(p_exam_id exam_mas.exam_id%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                     ) as
begin
  -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
  delete from exam_mas a
        where exam_id = p_exam_id;

  if sql%rowcount > 0 then
     p_flg:= 'Y';
     p_msg:= sql%rowcount || ' record(s) deleted successfully!';
  else
     p_flg := 'T';
     p_msg := 'Please refresh once. As some contain change by another user!';
     return;
  end if;
END prc_mas_del;
---------------------------------------------------
procedure prc_mas_get_data(p_criteria varchar2,
                           p_data out ref_cur
                          ) as
v_str varchar2(1000);
begin
   v_str := 'SELECT a.BRANCH,
                    a.EXAM_ID,
                    a.BATCH_ID,
                    a.REF_SUB_ID,
                    a.TOTAL_MARK,
                    a.EXAM_TYPE,
                    a.TYPE_DET,
                    a.PAPER_SET_BY,
                    a.EXAM_DATE,
                    a.EXAM_TIME,
                    a.DURATION,
                    a.SUPERVISOR,
                    a.TIME_STAMP TIMESTAMP
               FROM EXAM_MAS a
              where 1 = 1
                    and ' ||p_criteria;
   open p_data for v_str;
end;

END PKG_EXAM_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_GRIDFIELD_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_GRIDFIELD_MAS" AS

  procedure prc_mas_ins(
                      P_SEQNO             OUT GRID_FIELDS.seqno%type,
                      P_MENU_NAME         GRID_FIELDS.MENU_NAME%type,
                      P_ORD               GRID_FIELDS.ORD%type,
                      P_CTRL_NAME         GRID_FIELDS.CTRL_NAME%type,
                      P_DATA_FIELD_NAME   GRID_FIELDS.DATA_FIELD_NAME%type,
                      P_FIELD_SIZE        GRID_FIELDS.FIELD_SIZE%type,
                      P_DISP_NAME         GRID_FIELDS.DISP_NAME%type,
                      P_COL_TYPE          GRID_FIELDS.COL_TYPE%type,
                      P_COMBO_FLG         GRID_FIELDS.COMBO_FLG%type,
                      P_COMBO_BIND_ID     GRID_FIELDS.COMBO_BIND_ID%type,
                      P_EXCEL_FIELD_NAME  GRID_FIELDS.EXCEL_FIELD_NAME%type,
                      P_REMARK            GRID_FIELDS.REMARK%type,
                      P_EXTRA_REMARK      GRID_FIELDS.EXTRA_REMARK%type,
                      p_flg OUT VARCHAR2,
                      p_msg OUT VARCHAR2 
        ) AS
  BEGIN
    SELECT NVL(MAX(SEQNO),0)+1 INTO P_SEQNO FROM GRID_FIELDS;
    INSERT INTO GRID_FIELDS
                (
                  MENU_NAME,      CTRL_NAME,        DATA_FIELD_NAME,
                  FIELD_SIZE,     DISP_NAME,        COL_TYPE, 
                  COMBO_FLG,      COMBO_BIND_ID,    EXCEL_FIELD_NAME,
                  REMARK,         EXTRA_REMARK,     ORD,
                  SEQNO
                )
    VALUES
               (
                  P_MENU_NAME,    P_CTRL_NAME,              P_DATA_FIELD_NAME,
                  P_FIELD_SIZE,   P_DISP_NAME,              P_COL_TYPE,
                  P_COMBO_FLG,    P_COMBO_BIND_ID,          P_EXCEL_FIELD_NAME,
                  P_REMARK,       P_EXTRA_REMARK,           P_ORD,
                  P_SEQNO
               );
  if sql%rowcount > 0 then
     p_flg := 'Y';
     p_msg := sql%rowcount ||' record(s) successfully saved!';
     return;
  else
     p_flg := 'N';
     p_msg := 'Problem in inserting record!';
  end if;
  END prc_mas_ins;

  procedure prc_mas_upd(
                          P_SEQNO GRID_FIELDS.SEQNO%type,
                          P_MENU_NAME GRID_FIELDS.MENU_NAME%type,
                          P_ORD GRID_FIELDS.ORD%type,
                          P_CTRL_NAME GRID_FIELDS.CTRL_NAME%type,
                          P_DATA_FIELD_NAME GRID_FIELDS.DATA_FIELD_NAME%type,
                          P_FIELD_SIZE GRID_FIELDS.FIELD_SIZE%type,
                          P_DISP_NAME GRID_FIELDS.DISP_NAME%type,
                          P_COL_TYPE GRID_FIELDS.COL_TYPE%type,
                          P_COMBO_FLG GRID_FIELDS.COMBO_FLG%type,
                          P_COMBO_BIND_ID GRID_FIELDS.COMBO_BIND_ID%type,
                          P_EXCEL_FIELD_NAME GRID_FIELDS.EXCEL_FIELD_NAME%type,
                          P_REMARK GRID_FIELDS.REMARK%type,
                          P_EXTRA_REMARK GRID_FIELDS.EXTRA_REMARK%type,
                          p_flg OUT VARCHAR2,
                          p_msg OUT VARCHAR2 
        ) AS
  BEGIN
    UPDATE GRID_FIELDS
      SET MENU_NAME        = P_MENU_NAME,
          CTRL_NAME        = P_CTRL_NAME,
          DATA_FIELD_NAME  = P_DATA_FIELD_NAME,
          FIELD_SIZE       = P_FIELD_SIZE,
          DISP_NAME        = P_DISP_NAME,
          COL_TYPE         = P_COL_TYPE,
          COMBO_FLG        = P_COMBO_FLG,
          COMBO_BIND_ID    = P_COMBO_BIND_ID,
          EXCEL_FIELD_NAME = P_EXCEL_FIELD_NAME,
          REMARK           = P_REMARK,
          EXTRA_REMARK     = P_EXTRA_REMARK,
          ORD              = P_ORD
    WHERE SEQNO            = P_SEQNO;
    NULL;
  END prc_mas_upd;
  
procedure prc_mas_del(
                      P_SEQNO GRID_FIELDS.SEQNO%type, 
                      p_flg out varchar2,
                      p_msg out varchar2
                     ) as
begin
  -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
  delete from GRID_FIELDS a
        where a.seqno = p_seqno;

  if sql%rowcount > 0 then
     p_flg:= 'Y';
     p_msg:= sql%rowcount || ' record(s) deleted successfully!';
  else
     p_flg := 'T';
     p_msg := 'Please refresh once. As some contain change by another user!';
     return;
  end if;
END prc_mas_del;
---------------------------------------------------
procedure prc_mas_get_data(p_criteria varchar2,
                           p_data out ref_cur
                          ) as
v_str varchar2(1000);
begin
   v_str := 'SELECT SEQNO,
                    MENU_NAME,
                    CTRL_NAME,
                    DATA_FIELD_NAME,
                    FIELD_SIZE,
                    DISP_NAME,
                    COL_TYPE,
                    COMBO_FLG,
                    COMBO_BIND_ID,
                    EXCEL_FIELD_NAME,
                    REMARK,
                    EXTRA_REMARK,
                    ORD
               FROM GRID_FIELDS  a
             WHERE  1 = 1
                    and ' ||p_criteria||' ORDER BY SEQNO,CTRL_NAME,ORD';
   open p_data for v_str;
end;

END PKG_GRIDFIELD_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_MONEY_FLOW
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_MONEY_FLOW" AS

  procedure prc_mas_ins(
                        p_branch          money_flow.branch%type,
                        p_trn_id          out money_flow.trn_id%type,
                        p_trn_type        money_flow.trn_type%type,
                        p_from_type       money_flow.from_type%type,
                        p_from_entity_id  money_flow.from_entity_id%type,
                        p_to_type         money_flow.to_type%type,
                        p_to_entity_id    money_flow.to_entity_id%type,
                        p_amt             money_flow.amt%type,
                        p_t_date          money_flow.t_date%type,
                        p_concern_prsn    money_flow.concern_prsn%type,
                        p_ent_term        money_flow.ent_term%type,
                        p_ent_user        money_flow.ent_user%type,
                        /*p_time_stamp      out money_flow.time_stamp%type,*/
                        p_flg             out varchar2,
                        p_msg             out  varchar2
                    )as
begin
    begin
        select nvl(max(trn_id),0)+1 into p_trn_id from money_flow;
        insert into money_flow
          (branch,          trn_id,           trn_type,
           from_type,       from_entity_id,   to_type,
           to_entity_id,    amt,              t_date,
           concern_prsn,    ent_date,         ent_term,
           ent_user,        time_stamp)
        values
          (p_branch,        p_trn_id,         p_trn_type,
           p_from_type,     p_from_entity_id, p_to_type,
           p_to_entity_id,  p_amt,            p_t_date,
           p_concern_prsn,  sysdate,          p_ent_term,
           p_ent_user,      systimestamp);

        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           /*p_time_stamp := systimestamp;*/
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
end;
---------------------
procedure prc_mas_upd(    p_branch          money_flow.branch%type,
                          p_trn_id          money_flow.trn_id%type,
                          p_trn_type        money_flow.trn_type%type,
                          p_from_type       money_flow.from_type%type,
                          p_from_entity_id  money_flow.from_entity_id%type,
                          p_to_type         money_flow.to_type%type,
                          p_to_entity_id    money_flow.to_entity_id%type,
                          p_amt             money_flow.amt%type,
                          p_t_date          money_flow.t_date%type,
                          p_concern_prsn    money_flow.concern_prsn%type,
                          p_upd_term        money_flow.upd_term%type,
                          p_upd_user        money_flow.upd_user%type,
                          /*p_time_stamp      in out money_flow.time_stamp%type,*/
                          p_flg             out varchar2,
                          p_msg             out varchar2
                     ) as

v_cnt number(3);
begin
     update money_flow
        set branch          = p_branch,
            trn_type        = p_trn_type,
            from_type       = p_from_type,
            from_entity_id  = p_from_entity_id,
            to_type         = p_to_type,
            to_entity_id    = p_to_entity_id,
            amt             = p_amt,
            t_date          = p_t_date,
            concern_prsn    = p_concern_prsn,
            upd_date        = sysdate,
            upd_user        = p_upd_user,
            upd_term        = p_upd_term,
            time_stamp      = systimestamp
      where trn_id = p_trn_id;
            /*and time_stamp = p_time_stamp;*/

    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(*)
              into v_cnt
       from   money_flow a
       where trn_id = p_trn_id;
             /*and time_stamp = p_time_stamp;*/

       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
end;
---------------------------------------
procedure prc_mas_del(p_branch          money_flow.branch%type,
                      p_trn_id          money_flow.trn_id%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                     ) as
begin
  -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
  delete from money_flow a
        where branch = p_branch
          and trn_id = p_trn_id;

  if sql%rowcount > 0 then
     p_flg:= 'Y';
     p_msg:= sql%rowcount || ' record(s) deleted successfully!';
  else
     p_flg := 'T';
     p_msg := 'Please refresh once. As some contain change by another user!';
     return;
  end if;
END prc_mas_del;
---------------------------------------------------
procedure prc_mas_get_data(p_criteria varchar2,
                           p_data out ref_cur
                          ) as
v_str varchar2(3000);
begin
   v_str := 'SELECT BRANCH,
                    TRN_ID,
                    TRN_TYPE,
                    FROM_TYPE,
                    FROM_ENTITY_ID,
                    TO_TYPE,
                    TO_ENTITY_ID,
                    AMT,
                    T_DATE,
                    CONCERN_PRSN,
                    TIME_STAMP
               FROM MONEY_FLOW a
              WHERE 1 = 1
                AND ' ||p_criteria;
   open p_data for v_str;
end;

END PKG_MONEY_FLOW;

/
--------------------------------------------------------
--  DDL for Package Body PKG_RESULT_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_RESULT_MAS" AS

  procedure prc_mas_ins(  p_exam_id           RESULT_MAS.EXAM_ID%type,
                          p_entity_id         RESULT_MAS.ENTITY_ID%type,
                          p_entity_type_id    RESULT_MAS.ENTITY_TYPE_ID%type,
                          p_score             RESULT_MAS.SCORE%type,
                          p_remark            RESULT_MAS.REMARK%type,
                          p_srno          out RESULT_MAS.SRNO%type,
                          p_ent_term          RESULT_MAS.ent_term%type,
                          p_ent_user          RESULT_MAS.ent_user%type,
                          /*p_time_stamp  out RESULT_MAS.time_stamp%type,*/
                          p_flg           out varchar2,
                          p_msg           out varchar2
                        ) AS
  BEGIN
            BEGIN
        SELECT NVL(MAX(p_srno),0) + 1 INTO p_srno FROM RESULT_MAS;
        INSERT
        INTO RESULT_MAS
          (
            EXAM_ID,
            ENTITY_ID,
            ENTITY_TYPE_ID,
            SCORE,
            REMARK,
            SRNO,
            ENT_DATE,
            ENT_USER,
            ENT_TERM,
            TIME_STAMP
          )
          VALUES
          (
            p_exam_id,
            p_entity_id,
            p_entity_type_id,
            p_score,
            p_remark,
            p_srno,
            sysdate,
            p_ent_term,
            p_ent_user,
            systimestamp
          );
        IF sql%rowcount > 0 THEN
          p_flg        := 'Y';
          p_msg        := sql%rowcount ||' record(s) successfully saved!';
          /*p_time_stamp := systimestamp;*/
          RETURN;
        ELSE
          p_flg := 'N';
          p_msg := 'Problem in inserting record!';
        END IF;
      EXCEPTION
      WHEN dup_val_on_index THEN
        p_flg := 'N';
        p_msg := 'Already Exist!';
      END;

  END prc_mas_ins;

  procedure prc_mas_upd(
                          p_exam_id               RESULT_MAS.EXAM_ID%type,
                          p_entity_id             RESULT_MAS.ENTITY_ID%type,
                          p_entity_type_id        RESULT_MAS.ENTITY_TYPE_ID%type,
                          p_score                 RESULT_MAS.SCORE%type,
                          p_remark                RESULT_MAS.REMARK%type,
                          p_srno                  RESULT_MAS.SRNO%type,
                          p_upd_term              RESULT_MAS.UPD_TERM%type,
                          p_upd_user              RESULT_MAS.UPD_USER%type,
                          /*p_time_stamp   in out exam_mas.time_stamp%type,*/
                          p_flg               out varchar2,
                          p_msg               out varchar2
                        ) AS
  v_cnt number(3);
  BEGIN
        UPDATE RESULT_MAS
          SET EXAM_ID        = p_exam_id,
              ENTITY_ID      = p_entity_id,
              ENTITY_TYPE_ID = p_entity_type_id,
              SCORE          = p_score,
              REMARK         = p_remark,
              UPD_DATE       = sysdate,
              UPD_USER       = p_upd_user,
              UPD_TERM       = p_upd_term,
              TIME_STAMP     = systimestamp
         WHERE srno = p_srno;
        IF sql%rowcount > 0 THEN
          p_flg        := 'Y';
          p_msg        := sql%rowcount || ' record(s) updated successfully!';
          RETURN;
        ELSE
          SELECT COUNT(1) 
            INTO v_cnt 
            FROM RESULT_MAS a 
           WHERE srno = p_srno;
             /*and time_stamp = p_time_stamp;*/
          IF v_cnt = 0 THEN
            p_flg := 'T';
            p_msg := 'Please refresh once. As some contain change by another user!';
            RETURN;
          ELSE
            p_flg := 'N';
            p_msg := 'Problem in updating record!';
            RETURN;
          END IF;
        END IF;
  END prc_mas_upd;

  procedure prc_mas_del(p_srno RESULT_MAS.SRNO%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       ) AS
  BEGIN
    delete from RESULT_MAS a
        where p_srno = p_srno;

    if sql%rowcount > 0 then
       p_flg:= 'Y';
       p_msg:= sql%rowcount || ' record(s) deleted successfully!';
    else
       p_flg := 'T';
       p_msg := 'Please refresh once. As some contain change by another user!';
       return;
    end if;
  END prc_mas_del;

  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ) AS
  v_str varchar2(1000);
begin
   v_str := 'SELECT a.SRNO,
                    a.EXAM_ID,
                    a.ENTITY_ID,
                    a.ENTITY_TYPE_ID,
                    a.SCORE,
                    a.REMARK,
                    a.TIME_STAMP TIMESTAMP
               FROM RESULT_MAS a
              where 1 = 1
                    and ' ||p_criteria;
   open p_data for v_str;
END prc_mas_get_data;

END PKG_RESULT_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_STUDENT_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_STUDENT_MAS" AS

  procedure prc_stud_ins(p_data out ref_cur) AS
  BEGIN
    -- TODO: Implementation required for procedure PKG_STUDENT_MAS.prc_stud_ins
    NULL;
  END prc_stud_ins;

  procedure prc_stud_upd(p_data out ref_cur) AS
  BEGIN
    -- TODO: Implementation required for procedure PKG_STUDENT_MAS.prc_stud_upd
    NULL;
  END prc_stud_upd;

  procedure prc_stud_del(p_data out ref_cur) AS
  BEGIN
    -- TODO: Implementation required for procedure PKG_STUDENT_MAS.prc_stud_del
    NULL;
  END prc_stud_del;

END PKG_STUDENT_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_STUDY_LEVEL_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_STUDY_LEVEL_MAS" AS

  procedure prc_mas_ins(p_branch_id  STUDY_LEVEL_MAS.branch%type,
                        p_std_id OUT STUDY_LEVEL_MAS.STD_ID%type,
                        p_std_level STUDY_LEVEL_MAS.STD_LEVEL%type,
                        p_std_med STUDY_LEVEL_MAS.STD_MEDIUM%type,
                        p_std_type STUDY_LEVEL_MAS.STD_TYPE%type,
                        p_std_name STUDY_LEVEL_MAS.STD_NAME%type,
                        p_is_active STUDY_LEVEL_MAS.IS_ACTIVE%type,
                        p_ent_user STUDY_LEVEL_MAS.ENT_USER%type,
                        p_ent_term STUDY_LEVEL_MAS.ENT_TERM%type,
                        --p_time_stamp in out STUDY_LEVEL_MAS.TIME_STAMP%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                      ) AS
    BEGIN
    select nvl(max(std_id),0)+1 into p_std_id from study_level_mas;
    -- TODO: Implementation required for procedure PKG_STUDY_LEVEL_MAS.prc_mas_ins
    begin
        INSERT INTO STUDY_LEVEL_MAS
                  (
                    BRANCH,  STD_ID,   STD_LEVEL, STD_MEDIUM,
                    STD_TYPE,   STD_NAME, IS_ACTIVE,
                    ENT_DATE,   ENT_USER, ENT_TERM,
                    TIME_STAMP
                  )
                  VALUES
                  (p_branch_id, p_std_id,   p_std_level,p_std_med,
                   p_std_type,  p_std_name, p_is_active,
                   sysdate,     p_ent_user, p_ent_term,
                   systimestamp
                  );
        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           --p_time_stamp := systimestamp;
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
  END prc_mas_ins;

  procedure prc_mas_upd(p_branch_id  STUDY_LEVEL_MAS.branch%type,
                      p_std_id STUDY_LEVEL_MAS.STD_ID%type,
                      p_std_level STUDY_LEVEL_MAS.STD_LEVEL%type,
                      p_std_med STUDY_LEVEL_MAS.STD_MEDIUM%type,
                      p_std_type STUDY_LEVEL_MAS.STD_TYPE%type,
                      p_std_name STUDY_LEVEL_MAS.STD_NAME%type,
                      p_is_active STUDY_LEVEL_MAS.IS_ACTIVE%type,
                      p_upd_user STUDY_LEVEL_MAS.UPD_USER%type,
                      p_upd_term STUDY_LEVEL_MAS.UPD_TERM%type,
                      --p_time_stamp in out STUDY_LEVEL_MAS.TIME_STAMP%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                    ) AS
  v_cnt number(2);
  BEGIN
    -- TODO: Implementation required for procedure PKG_STUDY_LEVEL_MAS.prc_mas_upd
    UPDATE STUDY_LEVEL_MAS
      SET 
           BRANCH = p_branch_id, 
           STD_LEVEL   = p_std_level,
           STD_MEDIUM = p_std_med,
           STD_TYPE    = p_std_type,
           STD_NAME    = p_std_name,
           IS_ACTIVE   = p_is_active,
           UPD_DATE    = sysdate,
           UPD_USER    = p_upd_user,
           UPD_TERM    = p_upd_term
           --TIME_STAMP  = SYSTIMESTAMP
    where  branch = p_branch_id
           and std_id = p_std_id;
           --and TIME_STAMP = p_time_stamp;
           
    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   STUDY_LEVEL_MAS a
       where  a.branch = p_branch_id
              and a.std_id = p_std_id;
              --and a.time_stamp = p_time_stamp;
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
  END prc_mas_upd;

  procedure prc_mas_del(p_branch_id STUDY_LEVEL_MAS.branch%type,
                      p_std_id STUDY_LEVEL_MAS.STD_ID%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                     ) AS
  BEGIN
    -- TODO: Implementation required for procedure PKG_STUDY_LEVEL_MAS.prc_mas_del
    delete from STUDY_LEVEL_MAS a
          where a.branch = p_branch_id
                and a.std_id = p_std_id;

    if sql%rowcount > 0 then
       p_flg:= 'Y';
       p_msg:= sql%rowcount || ' record(s) deleted successfully!';
    else
       p_flg := 'T';
       p_msg := 'Please refresh once. As some contain change by another user!';
       return;
    end if;
  END prc_mas_del;

  procedure prc_get_data(p_criteria varchar2,
                       p_data out ref_cur
                      ) AS
  v_str varchar2(1000);
  begin
     v_str := 'select a.BRANCH,
                      a.STD_ID,
                      a.STD_MEDIUM,
                      a.STD_LEVEL,
                      a.STD_TYPE,
                      a.STD_NAME,
                      a.IS_ACTIVE,
                      a.TIME_STAMP
               from   STUDY_LEVEL_MAS a
               where  '||p_criteria||' 
               order by A.STD_ID';
     open p_data for v_str;
  end;

END PKG_STUDY_LEVEL_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_SUB_ALLOCATION
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_SUB_ALLOCATION" AS

  procedure prc_mas_ins( p_branch sub_allocation.branch%type,
                         p_allocation_id out sub_allocation.allocation_id%type,
                         p_batch_id sub_allocation.batch_id%type,
                         p_entity_id sub_allocation.entity_id%type,
                         p_entity_type_id sub_allocation.entity_type_id%type,
                         p_ref_sub_id sub_allocation.ref_sub_id%type,
                         p_is_active sub_allocation.is_active%type,
                         p_remark sub_allocation.remark%type,
                         p_ent_term sub_allocation.ent_term%type,
                         p_ent_user sub_allocation.ent_user%type,
                         --p_time_stamp out sub_allocation.time_stamp%type,
                         p_flg out varchar2,
                         p_msg out varchar2
                       ) as
  begin
    begin
      SELECT NVL(MAX(ALLOCATION_ID),0)+1 INTO P_ALLOCATION_ID FROM SUB_ALLOCATION;
      insert into sub_allocation
          (branch,         batch_id,   entity_id,
           entity_type_id, ref_sub_id, is_active,
           remark,         ent_date,   ent_term,
           ent_user,       time_stamp, allocation_id
          )
        values
          (p_branch,         p_batch_id,   p_entity_id,
           p_entity_type_id, p_ref_sub_id, p_is_active,
           p_remark,         sysdate,      p_ent_term,
           p_ent_user,       systimestamp, p_allocation_id
          );

        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           --p_time_stamp := systimestamp;
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
  end;
  ---------------------------------------
  procedure prc_mas_upd( p_branch sub_allocation.branch%type,
                         p_allocation_id sub_allocation.allocation_id%type,
                         p_batch_id sub_allocation.batch_id%type,
                         p_entity_id sub_allocation.entity_id%type,
                         p_entity_type_id sub_allocation.entity_type_id%type,
                         p_ref_sub_id sub_allocation.ref_sub_id%type,
                         p_is_active sub_allocation.is_active%type,
                         p_remark sub_allocation.remark%type,
                         p_upd_term sub_allocation.ent_term%type,
                         p_upd_user sub_allocation.ent_user%type,
                         --p_time_stamp in out sub_allocation.time_stamp%type,
                         p_flg out varchar2,
                         p_msg out varchar2
                       ) as
  v_cnt number(3);
  begin

     update sub_allocation
        set branch = p_branch,
            batch_id = p_batch_id,
            entity_id = p_entity_id,
            entity_type_id = p_entity_type_id,
            ref_sub_id = p_ref_sub_id,
            is_active = p_is_active,
            remark = p_remark,
            upd_date = sysdate,
            upd_user = p_upd_user,
            upd_term = p_upd_term--,
            --time_stamp = systimestamp
      where allocation_id = p_allocation_id;
            --and time_stamp = p_time_stamp;


    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   sub_allocation a
       where  allocation_id = p_allocation_id;
              --and a.time_stamp = p_time_stamp;
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
  end;


  ---------------------------------------------------
  procedure prc_mas_del(p_allocation_id sub_allocation.allocation_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       ) as
  begin
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
    delete from sub_allocation a
          where  allocation_id = p_allocation_id;

    if sql%rowcount > 0 then
       p_flg:= 'Y';
       p_msg:= sql%rowcount || ' record(s) deleted successfully!';
    else
       p_flg := 'T';
       p_msg := 'Please refresh once. As some contain change by another user!';
       return;
    end if;
  END prc_mas_del;
  ---------------------------------------------------
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ) as
  v_str varchar2(1000);
  begin
     v_str := 'SELECT BRANCH,
                      ALLOCATION_ID,
                      BATCH_ID,
                      ENTITY_ID,
                      ENTITY_TYPE_ID,
                      REF_SUB_ID,
                      IS_ACTIVE,
                      REMARK,
                      TIME_STAMP
                 FROM SUB_ALLOCATION a
                where 1 = 1
                      and ' ||p_criteria;
     open p_data for v_str;
  end;

END PKG_SUB_ALLOCATION;

/
--------------------------------------------------------
--  DDL for Package Body PKG_SUB_MAS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_SUB_MAS" AS

  procedure prc_mas_ins( 
                          p_branch sub_mas.branch%type,
                          p_ref_std_id sub_mas.ref_std_id%type,
                          p_sub_id out sub_mas.sub_id%type, 
                          p_sub_name sub_mas.sub_name%type, 
                          p_have_exam sub_mas.have_exam%type,
                          p_is_active sub_mas.is_active%type,
                          p_ent_user sub_mas.ent_user%type,
                          p_ent_term sub_mas.ent_term%type,
                          /*p_time_stamp out sub_mas.time_stamp%type,*/
                          p_flg out varchar2,
                          p_msg out varchar2
                       ) as
  begin
    begin
        select nvl(max(sub_id),0)+1 into p_sub_id from sub_mas;
        insert into sub_mas
                  (
                    branch,   ref_std_id, sub_id, 
                    sub_name, have_exam,  is_active, 
                    ent_date, ent_user,   ent_term,   
                    time_stamp
                  )
                  values
                  (p_branch,    p_ref_std_id,  p_sub_id,
                   p_sub_name,  p_have_exam,   p_is_active,
                   sysdate,     p_ent_user,    p_ent_term,   
                   systimestamp
                 );
        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           --p_time_stamp := systimestamp;
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
  end;
  ---------------------------------------
  procedure prc_mas_upd( 
                          p_branch sub_mas.branch%type,
                          p_ref_std_id sub_mas.ref_std_id%type,
                          p_sub_id sub_mas.sub_id%type, 
                          p_sub_name sub_mas.sub_name%type, 
                          p_have_exam sub_mas.have_exam%type,
                          p_is_active sub_mas.is_active%type,
                          p_upd_term sub_mas.ent_term%type,
                          p_upd_user sub_mas.ent_user%type,
                          /*p_time_stamp in out sub_mas.time_stamp%type,*/
                          p_flg out varchar2,
                          p_msg out varchar2
                       ) as
  v_cnt number(3);
  begin
    
     update sub_mas set ref_std_id = p_ref_std_id,
                        sub_name = p_sub_name,
                        have_exam = p_have_exam,
                        is_active = p_is_active,
                        upd_date   = sysdate,
                        upd_user   = p_upd_user,
                        upd_term   = p_upd_term,
                        time_stamp = systimestamp
                  where branch = p_branch
                        and sub_id = p_sub_id;
                        --and time_stamp = p_time_stamp;
    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   sub_mas a
       where  a.branch = p_branch
              and sub_id = p_sub_id;
              --and a.time_stamp = p_time_stamp;
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
  end;
  
  
  ---------------------------------------------------
  procedure prc_mas_del(p_branch sub_mas.branch%type,
                        p_sub_id sub_mas.sub_id%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       ) as
  begin
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
    delete from sub_mas a
          where a.branch = p_branch
                and a.sub_id = p_sub_id;

    if sql%rowcount > 0 then
       p_flg:= 'Y';
       p_msg:= sql%rowcount || ' record(s) deleted successfully!';
    else
       p_flg := 'T';
       p_msg := 'Please refresh once. As some contain change by another user!';
       return;
    end if;
  END prc_mas_del;
  ---------------------------------------------------
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_sub_data out ref_cur,
                             p_chp_data out ref_cur
                            ) as
  v_str varchar2(4000);
  begin
     v_str := 'select BRANCH,
                      SUB_ID,
                      REF_STD_ID,
                      SUB_NAME,
                      HAVE_EXAM,
                      IS_ACTIVE,
                      TIME_STAMP
               from   sub_mas a
               where  1 = 1
                      and ' ||p_criteria;
     open p_sub_data for v_str;
     
     v_str := 'select SEQNO,
                      REF_SUB_ID,
                      CHP_ID,
                      CHP_NAME,
                      DESCRIPTION,
                      REMARK,
                      TIME_STAMP
                 from chp_det c
                where ref_sub_id in (select sub_id from sub_mas where ' || p_criteria || '  )
                order by chp_id';
    open p_chp_data for v_str;            
  end;

END PKG_SUB_MAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_TIMETABLE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_TIMETABLE" AS

  procedure prc_mas_ins(
                          p_branch_id timetable.branch%type,
                          p_batch_id timetable.batch_id%type,
                          p_t_date timetable.t_date%type,
                          p_fr_time timetable.fr_time%type,
                          p_to_time timetable.to_time%type,
                          p_ref_sub_id timetable.ref_sub_id%type,
                          p_ref_t_entity_id timetable.ref_t_entity_id%type,
                          p_ent_term timetable.ent_term%type,
                          p_ent_user timetable.ent_user%type,
                          /*p_time_stamp out timetable.time_stamp%type,*/
                          p_flg out varchar2,
                          p_msg out varchar2
                      ) as
begin
    begin
        insert into timetable
          (branch,          batch_id, t_date,
           fr_time,         to_time,  ref_sub_id,
           ref_t_entity_id, ent_date, ent_term,
           ent_user,        time_stamp)
        values
          (p_branch_id,          p_batch_id, p_t_date,
           p_fr_time,         p_to_time,  p_ref_sub_id,
           p_ref_t_entity_id, sysdate, p_ent_term,
           p_ent_user,        systimestamp
          );

        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           /*p_time_stamp := systimestamp;*/
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
end;
---------------------
procedure prc_mas_upd(
                        p_branch timetable.branch%type,
                        p_batch_id timetable.batch_id%type,
                        p_t_date timetable.t_date%type,
                        p_fr_time timetable.fr_time%type,
                        p_to_time timetable.to_time%type,
                        p_ref_sub_id timetable.ref_sub_id%type,
                        p_ref_t_entity_id timetable.ref_t_entity_id%type,
                        p_upd_term timetable.ent_term%type,
                        p_upd_user timetable.ent_user%type,
                        /*p_time_stamp in out timetable.time_stamp%type,*/
                        p_flg out varchar2,
                        p_msg out varchar2
                     ) as

v_cnt number(3);
begin
     update timetable
        set
            batch_id = p_batch_id,
            t_date = p_t_date,
            fr_time = p_fr_time,
            to_time = p_to_time,
            ref_sub_id = p_ref_sub_id,
            ref_t_entity_id = p_ref_t_entity_id,

            upd_date = SYSDATE,
            upd_user = p_upd_user,
            upd_term = p_upd_term,
            time_stamp = systimestamp
      where branch = p_branch;


    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   timetable a
       where  branch = p_branch;
              /*and time_stamp = p_time_stamp;*/

       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
end;
---------------------------------------
procedure prc_mas_del(p_uniqid timetable.batch_id%type,
                      p_flg out varchar2,
                      p_msg out varchar2
                     ) as
begin
  -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
  delete from timetable a
        where 1 = p_uniqid;

  if sql%rowcount > 0 then
     p_flg:= 'Y';
     p_msg:= sql%rowcount || ' record(s) deleted successfully!';
  else
     p_flg := 'T';
     p_msg := 'Please refresh once. As some contain change by another user!';
     return;
  end if;
END prc_mas_del;
---------------------------------------------------
procedure prc_mas_get_data(p_criteria varchar2,
                           p_data out ref_cur
                          ) as
v_str varchar2(1000);
begin
   v_str := 'SELECT BRANCH,
                    BATCH_ID,
                    T_DATE,
                    FR_TIME,
                    TO_TIME,
                    REF_SUB_ID,
                    REF_T_ENTITY_ID,
                    TIME_STAMP
               FROM TIMETABLE a
              WHERE 1 = 1
                AND ' ||p_criteria;
   open p_data for v_str;
end;

END PKG_TIMETABLE;

/
--------------------------------------------------------
--  DDL for Package Body PKG_TRANSACTION_SETTING
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_TRANSACTION_SETTING" AS

  procedure prc_mas_ins(
                          p_batch_id           transaction_setting.batch_id%type,
                          p_seqno              out transaction_setting.seqno%type,
                          p_ref_entity_type_id transaction_setting.ref_entity_type_id%type,
                          p_amount             transaction_setting.amount%type,
                          p_cash_chq_ratio     transaction_setting.cash_chq_ratio%type,
                          p_allow_emi          transaction_setting.allow_emi%type,
                          p_allow_advance      transaction_setting.allow_advance%type,
                          p_no_of_emi          transaction_setting.no_of_emi%type,
                          p_discount           transaction_setting.discount%type,
                          p_remark             transaction_setting.remark%type,
                          p_ent_term           transaction_setting.ent_term%type,
                          p_ent_user           transaction_setting.ent_user%type,
                          /*p_time_stamp out     transaction_setting.time_stamp%type,*/
                          p_flg out varchar2,
                          p_msg out varchar2
                       ) AS
  BEGIN
    begin
        select nvl(max(seqno),0)+1 into p_seqno from TRANSACTION_SETTING;
        insert into transaction_setting
          (batch_id,       ref_entity_type_id,    amount,
           cash_chq_ratio, allow_emi,             allow_advance,
           no_of_emi,      discount,              remark,
           ent_date,       ent_term,              ent_user,
           time_stamp,     seqno 
          )
        values
          (p_batch_id,       p_ref_entity_type_id,   p_amount,
           p_cash_chq_ratio, p_allow_emi,            p_allow_advance,
           p_no_of_emi,      p_discount,             p_remark,
           SYSDATE,          p_ent_term,             p_ent_user,
           SYSTIMESTAMP,     p_seqno
          );

        if sql%rowcount > 0 then
           p_flg := 'Y';
           p_msg := sql%rowcount ||' record(s) successfully saved!';
           /*p_time_stamp := systimestamp;*/
           return;
        else
           p_flg := 'N';
           p_msg := 'Problem in inserting record!';
        end if;
    exception
      when dup_val_on_index then
           p_flg := 'N';
           p_msg := 'Already Exist!';
    end;
  END prc_mas_ins;

  procedure prc_mas_upd(
                          p_batch_id           transaction_setting.batch_id%type,
                          p_seqno              transaction_setting.seqno%type,
                          p_ref_entity_type_id transaction_setting.ref_entity_type_id%type,
                          p_amount             transaction_setting.amount%type,
                          p_cash_chq_ratio     transaction_setting.cash_chq_ratio%type,
                          p_allow_emi          transaction_setting.allow_emi%type,
                          p_allow_advance      transaction_setting.allow_advance%type,
                          p_no_of_emi          transaction_setting.no_of_emi%type,
                          p_discount           transaction_setting.discount%type,
                          p_remark             transaction_setting.remark%type,
                          p_upd_term           transaction_setting.upd_term%type,
                          p_upd_user           transaction_setting.upd_user%type,
                          /*p_time_stamp in out transaction_setting.time_stamp%type,*/
                          p_flg out varchar2,
                          p_msg out varchar2
                       ) AS
  v_cnt number(3);
  begin

     update transaction_setting
        set batch_id = p_batch_id,
            ref_entity_type_id = p_ref_entity_type_id,
            amount = p_amount,
            cash_chq_ratio = p_cash_chq_ratio,
            allow_emi = p_allow_emi,
            allow_advance = p_allow_advance,
            no_of_emi = p_no_of_emi,
            discount = p_discount,
            remark = p_remark,
            upd_date   = SYSDATE,
            upd_user   = p_upd_user,
            upd_term   = p_upd_term,
            time_stamp = systimestamp
      where seqno = p_seqno  /*unique id*/;
        /*and time_stamp = p_time_stamp;*/

    if sql%rowcount > 0 then
       p_flg := 'Y';
       p_msg := sql%rowcount || ' record(s) updated successfully!';
       return;
    else
       select count(1)
              into v_cnt
       from   transaction_setting a
       where  a.seqno = p_seqno /*unique id*/;
              /*and a.time_stamp = p_time_stamp;*/
       if v_cnt = 0 then
          p_flg := 'T';
          p_msg := 'Please refresh once. As some contain change by another user!';
          return;
       else
          p_flg := 'N';
          p_msg := 'Problem in updating record!';
          return;
       end if;
    end if;
  end prc_mas_upd;

  procedure prc_mas_del(
                        p_seqno    transaction_setting.seqno%type,
                        p_flg out varchar2,
                        p_msg out varchar2
                       ) as
  begin
    -- TODO Implementation required for procedure PKG_EMP_MAS.prc_emp_del
    delete from transaction_setting a
     where a.SEQNO = p_seqno /*unique id*/;

    if sql%rowcount > 0 then
       p_flg:= 'Y';
       p_msg:= sql%rowcount || ' record(s) deleted successfully!';
    else
       p_flg := 'T';
       p_msg := 'Please refresh once. As some contain change by another user!';
       return;
    end if;
  END prc_mas_del;
  ---------------------------------------------------
  procedure prc_mas_get_data(p_criteria varchar2,
                             p_data out ref_cur
                            ) as
  v_str varchar2(1000);
  begin
     v_str := 'SELECT BATCH_ID,  
                      SEQNO,
                      REF_ENTITY_TYPE_ID,  
                      AMOUNT,  
                      CASH_CHQ_RATIO,  
                      ALLOW_EMI,  
                      ALLOW_ADVANCE,  
                      NO_OF_EMI,  
                      DISCOUNT,  
                      REMARK,  
                      TIME_STAMP
                 FROM TRANSACTION_SETTING a
                WHERE 1 = 1                      
                  AND ' ||p_criteria;
     open p_data for v_str;
  end;

END PKG_TRANSACTION_SETTING;

/
--------------------------------------------------------
--  DDL for Package Body PKG_TUITION_BASE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "HR"."PKG_TUITION_BASE" 
AS
  --
  --
  --Get Grid fields
  --
  --
  PROCEDURE prc_fetch_grid_fields(
      p_menu_name VARCHAR2,
      p_ctrl_name VARCHAR2,
      p_data OUT ref_cur)
  AS
  BEGIN
    -- TODO: Implementation required for procedure
    -- PKG_TUTIION_BASE.prc_fetch_grid_fields
    OPEN p_data FOR SELECT a.MENU_NAME , a.CTRL_NAME , a.DATA_FIELD_NAME , a.FIELD_SIZE , a.DISP_NAME , a.COL_TYPE , a.COMBO_FLG , a.COMBO_BIND_ID , a.EXCEL_FIELD_NAME , a.REMARK , a.EXTRA_REMARK , a.ORD FROM GRID_FIELDS a WHERE a.MENU_NAME = p_menu_name AND a.CTRL_NAME = nvl(p_ctrl_name,a.CTRL_NAME);
  EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, 'Problem in Fetching Grid Fields Data');
  END prc_fetch_grid_fields;
--
--
--Get Active Subjects
--
--
  PROCEDURE prc_get_sub_list(
      p_std_id         VARCHAR2,
      p_subject_status VARCHAR2,
      p_data OUT ref_cur)
  AS
  BEGIN
    OPEN p_data FOR SELECT s.REF_STD_ID, s.SUB_ID, s.SUB_NAME FROM SUB_MAS S WHERE S.REF_STD_ID = NVL(to_number(P_STD_ID),S.REF_STD_ID) AND S.IS_ACTIVE = nvl(p_subject_status,S.IS_ACTIVE);
  EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching Subject Details');
  END;
--
--
-- Get Chapter Details with Subject
--
--
  PROCEDURE prc_get_chp_list(
      p_sub_id VARCHAR2,
      p_data OUT ref_cur)
  AS
  BEGIN
    OPEN p_data FOR SELECT C.SEQNO , C.REF_SUB_ID , C.CHP_ID, C.CHP_NAME, C.DESCRIPTION, C.REMARK, C.TIME_STAMP FROM CHP_DET C WHERE c.ref_sub_id = TO_NUMBER(p_sub_id);
  EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching Chapter Details');
  END;
--
--
-- Get Std Type
--
--
  PROCEDURE prc_get_std_type(
      p_data OUT ref_cur)
  AS
  BEGIN
    OPEN P_DATA FOR SELECT 'GUJARATI'
  AS
    DISP_OPTION , '1'
  AS
    value_member , 1 ord FROM dual
    UNION ALL
    SELECT 'ENGLISH' , '2' , 2 FROM dual ORDER BY ord;
  END;
--
-- Get Std Combo Active/InActive
--
  PROCEDURE prc_get_std_list(
      p_branch     VARCHAR2,
      p_std_status VARCHAR2,
      p_std_list OUT ref_cur )
  AS
  BEGIN
    OPEN p_std_list FOR SELECT a.STD_ID,
    a.STD_LEVEL || ' - ' || a.STD_NAME || ' - ' || a.STD_TYPE
  AS
    STD_NAME FROM study_level_mas a WHERE a.BRANCH = nvl(p_branch,a.BRANCH) AND a.is_active = p_std_status;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching Std List');
  END;
  
  PROCEDURE prc_get_std_medium(
    p_data OUT ref_cur)
  AS
  BEGIN
    OPEN P_DATA FOR SELECT 'GBSE' AS DISP_OPTION , 1 AS value_member , 1 ord FROM dual
    UNION ALL
    SELECT 'CBSE' , 2 , 2 FROM dual
    UNION ALL
    SELECT 'ICSE' , 3 , 3 FROM dual ORDER BY 3;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching Std Medium');
    end;
    
  PROCEDURE prc_get_teacher_list(flg varchar,p_data out ref_cur) as
  begin
    open p_data for
         SELECT a.ENTITY_ID VALUE_MEMBER,
                A.F_NAME || ' ' || A.L_NAME DISP_OPTION
           FROM emp_mas a
          WHERE EXISTS (SELECT DISTINCT b.ENTITY_TYPE_ID
                          FROM entity_type_mas b
                         WHERE b.entity_type_name = 'TEACHER'
                           AND B.IS_ACTIVE        = NVL(flg,b.is_active)
                          )
          ORDER BY 2;
    EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching Teacher List');
  end;
  
  PROCEDURE prc_get_batch_list(flg varchar,p_data out ref_cur) as
  begin
    open p_data for
         SELECT a.BATCH_ID VALUE_MEM , a.BATCH_NAME DISP_MEM
           FROM batch_mas a
          WHERE a.is_active = nvl(flg,a.is_active);
    EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching Teacher List');
    end;
  
  PROCEDURE prc_get_entity_type(flg varchar,p_data out ref_cur) as
  begin
    open p_data for
         SELECT a.entity_type_id VALUE_MEM , a.entity_type_name DISP_MEM
           FROM entity_type_mas a
          WHERE a.is_active = nvl(flg,a.is_active);
    EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching Teacher List');
    end;
    
  PROCEDURE prc_get_static_combo(p_static_flg varchar2, p_data out ref_cur) 
  as
  begin
    OPEN p_data FOR SELECT a.*
                      FROM static_combo a
                     WHERE a.REF_SRNO =
                        (SELECT SRNO FROM static_combo B WHERE B.DISP_MEM = nvl(P_STATIC_FLG,b.disp_mem)
                        );
  EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching static combo data');
 end;
 
 PROCEDURE prc_get_exam_list(p_exam_flg varchar2, p_data out ref_cur)
 as
  begin
    OPEN p_data FOR SELECT EXAM_ID 
                      FROM EXAM_MAS
                     WHERE EXAM_DATE < TRUNC(SYSDATE);
  EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching static combo data');
 end; 
 
 PROCEDURE prc_get_emp_list(p_entity_type varchar2,p_is_active varchar2, p_data out ref_cur)
 as
  begin
    OPEN p_data FOR SELECT ENTITY_ID 
                         , ENTITY_NAME 
                         , ENTITY_TYPE_id 
                      FROM ENTITY_MAS 
                     WHERE ENTITY_TYPE_ID = nvl(p_entity_type,entity_type_id)
                       AND IS_ACTIVE = NVL(p_is_active,is_active);
  EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20001, 'Problem in fetching static combo data');
 end;
  
END PKG_TUiTION_BASE;

/
--------------------------------------------------------
--  DDL for Procedure ADD_JOB_HISTORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "HR"."ADD_JOB_HISTORY" 
  (  p_emp_id          job_history.employee_id%type
   , p_start_date      job_history.start_date%type
   , p_end_date        job_history.end_date%type
   , p_job_id          job_history.job_id%type
   , p_department_id   job_history.department_id%type
   )
IS
BEGIN
  INSERT INTO job_history (employee_id, start_date, end_date,
                           job_id, department_id)
    VALUES(p_emp_id, p_start_date, p_end_date, p_job_id, p_department_id);
END add_job_history;

/
--------------------------------------------------------
--  DDL for Procedure SECURE_DML
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "HR"."SECURE_DML" 
IS
BEGIN
  IF TO_CHAR (SYSDATE, 'HH24:MI') NOT BETWEEN '08:00' AND '18:00'
        OR TO_CHAR (SYSDATE, 'DY') IN ('SAT', 'SUN') THEN
	RAISE_APPLICATION_ERROR (-20205,
		'You may only make changes during normal office hours');
  END IF;
END secure_dml;

/
